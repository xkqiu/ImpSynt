SKETCH version 1.7.2
Benchmark = local/test.sk
    [0;32m[1491836612.6470 - DEBUG] Running stage 'parse' -- Parse the program from a file[0m
    [0;32m[1491836612.9570 - DEBUG] Running stage 'preproc' -- Preprocessing (used for all further transformations)[0m
    [0;32m[1491836613.2150 - DEBUG] Running stage SpmdLowLevelCStage[0m
    [0;32m[1491836613.2170 - DEBUG]    Running visitor FlattenStmtBlocks2[0m
    [0;32m[1491836613.2190 - DEBUG]    Running visitor SplitAssignFromVarDef[0m
    [0;32m[1491836613.2210 - DEBUG]    Running visitor EliminateComplexForLoops[0m
    [0;32m[1491836613.2240 - DEBUG] Running stage 'lowering' -- Lower for SKETCH backend[0m
    [0;32m[1491836613.2740 - DEBUG] Running stage 'sten' -- Stencil transformations[0m

//// After stage lowering
/* BEGIN PACKAGE ANONYMOUS*/
/*aux.skh:77*/

void assertPost (bit b_1c5, ref global bit error_flag__ANONYMOUS_s824_1c6)/*aux.skh:77*/
{
  {
    {
      if(error_flag__ANONYMOUS_s824_1c6)/*aux.skh:78*/
      {
        return;
      }
      else
      {
        assert (b_1c5); //Assert at aux.skh:79 (-1881271548688414637)
      }
    }
  }
}
/*aux.skh:73*/

void assumePre (bit b_376, ref global bit error_flag__ANONYMOUS_s797_377)/*aux.skh:73*/
{
  {
    {
      if(!(b_376))/*aux.skh:74*/
      {
        error_flag__ANONYMOUS_s797_377 = 1;
      }
    }
  }
}
/*aux.skh:277*/

void basic_assumptions (ref bit _out_82, ref global bit[4] active__ANONYMOUS_s854_83, ref global int[4] key__ANONYMOUS_s855_84, ref global int[4] left__ANONYMOUS_s856_85, ref global int[3] locvars__ANONYMOUS_s857_86, ref global int[4] next__ANONYMOUS_s858_87, ref global int[4] right__ANONYMOUS_s859_88, ref global int[4] supernext__ANONYMOUS_s860_89, ref global bit[4] symbolic__ANONYMOUS_s861_8a)/*aux.skh:277*/
{
  {
    {
      _out_82 = 0;
      bit _pac_sc_s1790;
      {
        bit _pac_sc_s1791;
        {
          bit _pac_sc_s1792;
          {
            bit _pac_sc_s1793;
            {
              bit _pac_sc_s1794;
              {
                bit _pac_sc_s1795;
                {
                  bit _pac_sc_s1796;
                  {
                    bit _pac_s1797;
                    _pac_s1797 = 0;
                    assert ((_pac_s1797 >= 0) && (_pac_s1797 < 3)); //aux.skh:279: Array out of bounds
                    _pac_sc_s1796 = (locvars__ANONYMOUS_s857_86[_pac_s1797]) == 0;
                    if(_pac_sc_s1796)/*aux.skh:279*/
                    {
                      bit _pac_s1798;
                      _pac_s1798 = 0;
                      assert ((_pac_s1798 >= 0) && (_pac_s1798 < 4)); //aux.skh:280: Array out of bounds
                      _pac_sc_s1796 = (next__ANONYMOUS_s858_87[_pac_s1798]) == 0;
                    }
                  }
                  _pac_sc_s1795 = _pac_sc_s1796;
                  if(_pac_sc_s1795)/*aux.skh:279*/
                  {
                    bit _pac_s1799;
                    _pac_s1799 = 0;
                    assert ((_pac_s1799 >= 0) && (_pac_s1799 < 4)); //aux.skh:281: Array out of bounds
                    _pac_sc_s1795 = (supernext__ANONYMOUS_s860_89[_pac_s1799]) == 0;
                  }
                }
                _pac_sc_s1794 = _pac_sc_s1795;
                if(_pac_sc_s1794)/*aux.skh:279*/
                {
                  bit _pac_s1800;
                  _pac_s1800 = 0;
                  assert ((_pac_s1800 >= 0) && (_pac_s1800 < 4)); //aux.skh:282: Array out of bounds
                  _pac_sc_s1794 = (left__ANONYMOUS_s856_85[_pac_s1800]) == 0;
                }
              }
              _pac_sc_s1793 = _pac_sc_s1794;
              if(_pac_sc_s1793)/*aux.skh:279*/
              {
                bit _pac_s1801;
                _pac_s1801 = 0;
                assert ((_pac_s1801 >= 0) && (_pac_s1801 < 4)); //aux.skh:283: Array out of bounds
                _pac_sc_s1793 = (right__ANONYMOUS_s859_88[_pac_s1801]) == 0;
              }
            }
            _pac_sc_s1792 = _pac_sc_s1793;
            if(_pac_sc_s1792)/*aux.skh:279*/
            {
              bit _pac_s1802;
              _pac_s1802 = 0;
              assert ((_pac_s1802 >= 0) && (_pac_s1802 < 4)); //aux.skh:284: Array out of bounds
              _pac_sc_s1792 = (key__ANONYMOUS_s855_84[_pac_s1802]) == 0;
            }
          }
          _pac_sc_s1791 = _pac_sc_s1792;
          if(_pac_sc_s1791)/*aux.skh:279*/
          {
            bit _pac_s1803;
            _pac_s1803 = 0;
            assert ((_pac_s1803 >= 0) && (_pac_s1803 < 4)); //aux.skh:285: Array out of bounds
            _pac_sc_s1791 = !(symbolic__ANONYMOUS_s861_8a[_pac_s1803]);
          }
        }
        _pac_sc_s1790 = _pac_sc_s1791;
        if(_pac_sc_s1790)/*aux.skh:279*/
        {
          bit _pac_s1804;
          _pac_s1804 = 0;
          assert ((_pac_s1804 >= 0) && (_pac_s1804 < 4)); //aux.skh:286: Array out of bounds
          _pac_sc_s1790 = active__ANONYMOUS_s854_83[_pac_s1804];
        }
      }
      _out_82 = _pac_sc_s1790;
      int idx_8b;
      idx_8b = 2;
      while((idx_8b <= 2) && _out_82)
      {
        assert ((idx_8b >= 0) && (idx_8b < 4)); //aux.skh:291: Array out of bounds
        _out_82 = !(active__ANONYMOUS_s854_83[idx_8b]);
        int uo_s36_8e;
        uo_s36_8e = idx_8b;
        idx_8b = idx_8b + 1;
        uo_s36_8e;
      }
      return;
    }
  }
}
/*lseg_header.skh:1414*/

void basic_axioms (ref bit _out_8f, ref global int[4] supernext__ANONYMOUS_s881_90, ref global int ts__ANONYMOUS_s882_91)/*lseg_header.skh:1414*/
{
  {
    {
      _out_8f = 0;
      bit _pac_sc_s288_92;
      bit _pac_sc_s289_93;
      int _pac_sc_s289_s291_94;
      len(0, ts__ANONYMOUS_s882_91, _pac_sc_s289_s291_94);
      _pac_sc_s289_93 = _pac_sc_s289_s291_94 == 0;
      if(_pac_sc_s289_93)/*lseg_header.skh:1415*/
      {
        int _pac_sc_s289_s293_95;
        min(0, ts__ANONYMOUS_s882_91, _pac_sc_s289_s293_95);
        _pac_sc_s289_93 = _pac_sc_s289_s293_95 == 7;
      }
      _pac_sc_s288_92 = _pac_sc_s289_93;
      if(_pac_sc_s288_92)/*lseg_header.skh:1415*/
      {
        int _pac_sc_s288_s295_96;
        max(0, ts__ANONYMOUS_s882_91, _pac_sc_s288_s295_96);
        _pac_sc_s288_92 = _pac_sc_s288_s295_96 == 0;
      }
      _out_8f = _pac_sc_s288_92;
      int idx_97;
      idx_97 = 1;
      while((idx_97 < 4) && _out_8f)
      {
        bit _pac_sc_s296_aa;
        bit _pac_sc_s297_ab;
        bit _pac_sc_s298_ac;
        assert ((idx_97 >= 0) && (idx_97 < 4)); //lseg_header.skh:1421: Array out of bounds
        _pac_sc_s298_ac = (supernext__ANONYMOUS_s881_90[idx_97]) != 0;
        if(_pac_sc_s298_ac)/*lseg_header.skh:1421*/
        {
          int _pac_sc_s298_s300_ad;
          len(idx_97, ts__ANONYMOUS_s882_91, _pac_sc_s298_s300_ad);
          _pac_sc_s298_ac = _pac_sc_s298_s300_ad > 0;
        }
        _pac_sc_s297_ab = _pac_sc_s298_ac;
        if(_pac_sc_s297_ab)/*lseg_header.skh:1421*/
        {
          int _pac_sc_s297_s302_ae;
          min(idx_97, ts__ANONYMOUS_s882_91, _pac_sc_s297_s302_ae);
          int _pac_sc_s297_s304_af;
          max(idx_97, ts__ANONYMOUS_s882_91, _pac_sc_s297_s304_af);
          _pac_sc_s297_ab = _pac_sc_s297_s302_ae <= _pac_sc_s297_s304_af;
        }
        _pac_sc_s296_aa = _pac_sc_s297_ab;
        if(_pac_sc_s296_aa)/*lseg_header.skh:1421*/
        {
          int _pac_sc_s296_s306_b0;
          minseg(idx_97, ts__ANONYMOUS_s882_91, _pac_sc_s296_s306_b0);
          int _pac_sc_s296_s308_b1;
          maxseg(idx_97, ts__ANONYMOUS_s882_91, _pac_sc_s296_s308_b1);
          _pac_sc_s296_aa = _pac_sc_s296_s306_b0 <= _pac_sc_s296_s308_b1;
        }
        _out_8f = _pac_sc_s296_aa;
        int uo_s35_b2;
        uo_s35_b2 = idx_97;
        idx_97 = idx_97 + 1;
        uo_s35_b2;
      }
      return;
    }
  }
}
/*local/test.sk:92*/

void basic_cond0 (int locrange_dd, int intrange_de, ref bit _out_df, ref global bit[4] active__ANONYMOUS_s1330_e0, ref global bit error_flag__ANONYMOUS_s996_e1, ref global int fake_unfold__ANONYMOUS_s1331_e2, ref global int fake_unfold_to__ANONYMOUS_s1332_e3, ref global bit[4 * 4] history__ANONYMOUS_s1159_e4, ref global int[2] intvars__ANONYMOUS_s1333_e5, ref global int[4] key__ANONYMOUS_s1334_e6, ref global int[3] locvars__ANONYMOUS_s1335_e7, ref global int[4] next__ANONYMOUS_s1336_e8, ref global bit[4 * 4] p_history__ANONYMOUS_s1288_e9, ref global int[4] supernext__ANONYMOUS_s1532_ea, ref global bit[4] symbolic__ANONYMOUS_s1337_eb, ref global int ts__ANONYMOUS_s1160_ec)/*local/test.sk:92*/
{
  {
    {
      _out_df = 0;
      bit _out_s269_ed;
      int locrange_ee;
      locrange_ee = locrange_dd;
      int intrange_ef;
      intrange_ef = intrange_de;
      bit _has_out__f0;
      _has_out__f0 = 0;
      _out_s269_ed = 0;
      int lll_f1;
      int lll_s206_f2;
      int r_f3;
      r_f3 = locrange_ee;
      bit _has_out__f4;
      _has_out__f4 = 0;
      lll_s206_f2 = 0;
      int n_f5;
      n_f5 = ??/* H__0_395_175int:2 */;
      assert ((n_f5 >= 0) && (n_f5 < r_f3)); //Assert at aux.skh:57 (8246299997498639982)
      lll_s206_f2 = n_f5 + 1;
      _has_out__f4 = 1;
      lll_f1 = lll_s206_f2;
      bit res_f6;
      bit res_s208_f7;
      int v_f8;
      v_f8 = lll_f1;
      int locrange_f9;
      locrange_f9 = locrange_ee;
      int intrange_fa;
      intrange_fa = intrange_ef;
      bit _has_out__fb;
      _has_out__fb = 0;
      res_s208_f7 = 0;
      bit d_fc;
      d_fc = ??/* H__4_395_176bit:1 */;
      if(intrange_fa == 0)/*lseg_header.skh:731*/
      {
        d_fc = 0;
      }
      if(d_fc)/*lseg_header.skh:732*/
      {
        assert (intrange_fa > 0); //Assert at lseg_header.skh:733 (5742565722398651968)
        int rrr_fd;
        int rrr_s210_fe;
        int r_ff;
        r_ff = intrange_fa;
        bit _has_out__100;
        _has_out__100 = 0;
        rrr_s210_fe = 0;
        rrr_s210_fe = ??/* H__1_395_176_165int:3 */;
        assert ((rrr_s210_fe >= 0) && (rrr_s210_fe < r_ff)); //Assert at aux.skh:63 (3631387498543592694)
        _has_out__100 = 1;
        rrr_fd = rrr_s210_fe;
        bit _pac_sc_s211_101;
        bit _pac_sc_s211_s213_102;
        locvar_eq@ANONYMOUS(v_f8, 0, _pac_sc_s211_s213_102, locvars__ANONYMOUS_s1335_e7);
        _pac_sc_s211_101 = !(_pac_sc_s211_s213_102);
        if(_pac_sc_s211_101)/*lseg_header.skh:735*/
        {
          bit _pac_sc_s211_s215_103;
          intderef_lt_var@ANONYMOUS(v_f8, rrr_fd, _pac_sc_s211_s215_103, active__ANONYMOUS_s1330_e0, error_flag__ANONYMOUS_s996_e1, fake_unfold__ANONYMOUS_s1331_e2, fake_unfold_to__ANONYMOUS_s1332_e3, history__ANONYMOUS_s1159_e4, intvars__ANONYMOUS_s1333_e5, key__ANONYMOUS_s1334_e6, locvars__ANONYMOUS_s1335_e7, next__ANONYMOUS_s1336_e8, p_history__ANONYMOUS_s1288_e9, supernext__ANONYMOUS_s1532_ea, symbolic__ANONYMOUS_s1337_eb, ts__ANONYMOUS_s1160_ec);
          _pac_sc_s211_101 = _pac_sc_s211_s215_103;
        }
        res_s208_f7 = _pac_sc_s211_101;
        _has_out__fb = 1;
      }
      else
      {
        int _out_s217_104;
        int r_105;
        r_105 = locrange_f9 + 1;
        bit _has_out__106;
        _has_out__106 = 0;
        _out_s217_104 = 0;
        _out_s217_104 = ??/* H__1_395_176_168int:3 */;
        assert ((_out_s217_104 >= 0) && (_out_s217_104 < r_105)); //Assert at aux.skh:63 (3631387498543592694)
        _has_out__106 = 1;
        bit _out_s219_107;
        locvar_eq@ANONYMOUS(v_f8, _out_s217_104, _out_s219_107, locvars__ANONYMOUS_s1335_e7);
        res_s208_f7 = _out_s219_107;
        _has_out__fb = 1;
      }
      res_f6 = res_s208_f7;
      if(??/* H__6_395bit:1 */)/*lseg_header.skh:758*/
      {
        _out_s269_ed = res_f6;
        _has_out__f0 = 1;
      }
      else
      {
        _out_s269_ed = !(res_f6);
        _has_out__f0 = 1;
      }
      _out_df = _out_s269_ed;
      return;
    }
  }
}
/*local/test.sk:95*/

void basic_cond1 (int locrange_1e3, int intrange_1e4, ref bit _out_1e5, ref global bit[4] active__ANONYMOUS_s981_1e6, ref global bit error_flag__ANONYMOUS_s1502_1e7, ref global int fake_unfold__ANONYMOUS_s1658_1e8, ref global int fake_unfold_to__ANONYMOUS_s1659_1e9, ref global bit[4 * 4] history__ANONYMOUS_s952_1ea, ref global int[2] intvars__ANONYMOUS_s1660_1eb, ref global int[4] key__ANONYMOUS_s1246_1ec, ref global int[3] locvars__ANONYMOUS_s1471_1ed, ref global int[4] next__ANONYMOUS_s982_1ee, ref global bit[4 * 4] p_history__ANONYMOUS_s1247_1ef, ref global int[4] supernext__ANONYMOUS_s983_1f0, ref global bit[4] symbolic__ANONYMOUS_s984_1f1, ref global int ts__ANONYMOUS_s953_1f2)/*local/test.sk:95*/
{
  {
    {
      _out_1e5 = 0;
      bit _out_s204_1f3;
      int locrange_1f4;
      locrange_1f4 = locrange_1e3;
      int intrange_1f5;
      intrange_1f5 = intrange_1e4;
      bit _has_out__1f6;
      _has_out__1f6 = 0;
      _out_s204_1f3 = 0;
      int lll_1f7;
      int lll_s206_1f8;
      int r_1f9;
      r_1f9 = locrange_1f4;
      bit _has_out__1fa;
      _has_out__1fa = 0;
      lll_s206_1f8 = 0;
      int n_1fb;
      n_1fb = ??/* H__0_396_175int:2 */;
      assert ((n_1fb >= 0) && (n_1fb < r_1f9)); //Assert at aux.skh:57 (-2888009174720848900)
      lll_s206_1f8 = n_1fb + 1;
      _has_out__1fa = 1;
      lll_1f7 = lll_s206_1f8;
      bit res_1fc;
      bit res_s208_1fd;
      int v_1fe;
      v_1fe = lll_1f7;
      int locrange_1ff;
      locrange_1ff = locrange_1f4;
      int intrange_200;
      intrange_200 = intrange_1f5;
      bit _has_out__201;
      _has_out__201 = 0;
      res_s208_1fd = 0;
      bit d_202;
      d_202 = ??/* H__4_396_176bit:1 */;
      if(intrange_200 == 0)/*lseg_header.skh:731*/
      {
        d_202 = 0;
      }
      if(d_202)/*lseg_header.skh:732*/
      {
        assert (intrange_200 > 0); //Assert at lseg_header.skh:733 (8127928145670982142)
        int rrr_203;
        int rrr_s210_204;
        int r_205;
        r_205 = intrange_200;
        bit _has_out__206;
        _has_out__206 = 0;
        rrr_s210_204 = 0;
        rrr_s210_204 = ??/* H__1_396_176_165int:3 */;
        assert ((rrr_s210_204 >= 0) && (rrr_s210_204 < r_205)); //Assert at aux.skh:63 (3631387498543592694)
        _has_out__206 = 1;
        rrr_203 = rrr_s210_204;
        bit _pac_sc_s211_207;
        bit _pac_sc_s211_s213_208;
        locvar_eq@ANONYMOUS(v_1fe, 0, _pac_sc_s211_s213_208, locvars__ANONYMOUS_s1471_1ed);
        _pac_sc_s211_207 = !(_pac_sc_s211_s213_208);
        if(_pac_sc_s211_207)/*lseg_header.skh:735*/
        {
          bit _pac_sc_s211_s215_209;
          intderef_lt_var@ANONYMOUS(v_1fe, rrr_203, _pac_sc_s211_s215_209, active__ANONYMOUS_s981_1e6, error_flag__ANONYMOUS_s1502_1e7, fake_unfold__ANONYMOUS_s1658_1e8, fake_unfold_to__ANONYMOUS_s1659_1e9, history__ANONYMOUS_s952_1ea, intvars__ANONYMOUS_s1660_1eb, key__ANONYMOUS_s1246_1ec, locvars__ANONYMOUS_s1471_1ed, next__ANONYMOUS_s982_1ee, p_history__ANONYMOUS_s1247_1ef, supernext__ANONYMOUS_s983_1f0, symbolic__ANONYMOUS_s984_1f1, ts__ANONYMOUS_s953_1f2);
          _pac_sc_s211_207 = _pac_sc_s211_s215_209;
        }
        res_s208_1fd = _pac_sc_s211_207;
        _has_out__201 = 1;
      }
      else
      {
        int _out_s217_20a;
        int r_20b;
        r_20b = locrange_1ff + 1;
        bit _has_out__20c;
        _has_out__20c = 0;
        _out_s217_20a = 0;
        _out_s217_20a = ??/* H__1_396_176_168int:3 */;
        assert ((_out_s217_20a >= 0) && (_out_s217_20a < r_20b)); //Assert at aux.skh:63 (3631387498543592694)
        _has_out__20c = 1;
        bit _out_s219_20d;
        locvar_eq@ANONYMOUS(v_1fe, _out_s217_20a, _out_s219_20d, locvars__ANONYMOUS_s1471_1ed);
        res_s208_1fd = _out_s219_20d;
        _has_out__201 = 1;
      }
      res_1fc = res_s208_1fd;
      if(??/* H__6_396bit:1 */)/*lseg_header.skh:758*/
      {
        _out_s204_1f3 = res_1fc;
        _has_out__1f6 = 1;
      }
      else
      {
        _out_s204_1f3 = !(res_1fc);
        _has_out__1f6 = 1;
      }
      _out_1e5 = _out_s204_1f3;
      return;
    }
  }
}
/*lseg_header.skh:312*/

void check_p_treeness (int t1_384, int t2_385, ref bit[4] m_386, int bnd_387, ref bit _out_388, ref global bit[4] active__ANONYMOUS_s736_389, ref global int[4] next__ANONYMOUS_s737_38a, ref global int[4] supernext__ANONYMOUS_s738_38b, ref global bit[4] symbolic__ANONYMOUS_s739_38c)/*lseg_header.skh:312*/
{
  {
    {
      _out_388 = 0;
      if(bnd_387 < 0)/*lseg_header.skh:313*/
      {
        _out_388 = 0;
        return;
      }
      else
      {
        if((((t1_384 < 0) || (t1_384 >= 4)) || (t2_385 < 0)) || (t2_385 >= 4))/*lseg_header.skh:314*/
        {
          _out_388 = 0;
          return;
        }
        else
        {
          bit _pac_sc_s1839;
          {
            assert ((t1_384 >= 0) && (t1_384 < 4)); //lseg_header.skh:315: Array out of bounds
            _pac_sc_s1839 = !(active__ANONYMOUS_s736_389[t1_384]);
            if(!(_pac_sc_s1839))/*lseg_header.skh:315*/
            {
              assert ((t2_385 >= 0) && (t2_385 < 4)); //lseg_header.skh:315: Array out of bounds
              _pac_sc_s1839 = !(active__ANONYMOUS_s736_389[t2_385]);
            }
          }
          if(_pac_sc_s1839)/*lseg_header.skh:315*/
          {
            _out_388 = 0;
            return;
          }
          else
          {
            if(t1_384 == t2_385)/*lseg_header.skh:316*/
            {
              _out_388 = 1;
              return;
            }
            else
            {
              if(t1_384 == 0)/*lseg_header.skh:317*/
              {
                _out_388 = 0;
                return;
              }
              else
              {
                assert ((t1_384 >= 0) && (t1_384 < 4)); //lseg_header.skh:318: Array out of bounds
                if(symbolic__ANONYMOUS_s739_38c[t1_384])/*lseg_header.skh:318*/
                {
                  assert ((t1_384 >= 0) && (t1_384 < 4)); //lseg_header.skh:319: Array out of bounds
                  if(m_386[t1_384])/*lseg_header.skh:319*/
                  {
                    _out_388 = 0;
                    return;
                  }
                  else
                  {
                    assert ((t1_384 >= 0) && (t1_384 < 4)); //lseg_header.skh:321: Either null pointer or Array out of bounds
                    m_386[t1_384] = 1;
                    _out_388 = t2_385 == 0;
                    return;
                  }
                }
                else
                {
                  assert ((t1_384 >= 0) && (t1_384 < 4)); //lseg_header.skh:326: Array out of bounds
                  if(m_386[t1_384])/*lseg_header.skh:326*/
                  {
                    _out_388 = 0;
                    return;
                  }
                  else
                  {
                    assert ((t1_384 >= 0) && (t1_384 < 4)); //lseg_header.skh:328: Either null pointer or Array out of bounds
                    m_386[t1_384] = 1;
                    int nxt_38d;
                    assert ((t1_384 >= 0) && (t1_384 < 4)); //lseg_header.skh:329: Array out of bounds
                    nxt_38d = next__ANONYMOUS_s737_38a[t1_384];
                    if((nxt_38d < 0) || (nxt_38d >= 4))/*lseg_header.skh:330*/
                    {
                      assert ((t1_384 >= 0) && (t1_384 < 4)); //lseg_header.skh:330: Array out of bounds
                      nxt_38d = supernext__ANONYMOUS_s738_38b[t1_384];
                    }
                    if(nxt_38d == 0)/*lseg_header.skh:331*/
                    {
                      _out_388 = t2_385 == 0;
                      return;
                    }
                    else
                    {
                      if((nxt_38d < 0) || (nxt_38d >= 4))/*lseg_header.skh:332*/
                      {
                        _out_388 = 0;
                        return;
                      }
                      else
                      {
                        bit _out_s79_38e;
                        int bnd_387_s1752;
                        bnd_387_s1752 = bnd_387 - 1;
                        check_p_treeness@ANONYMOUS(nxt_38d, t2_385, m_386, bnd_387_s1752, _out_s79_38e, active__ANONYMOUS_s736_389, next__ANONYMOUS_s737_38a, supernext__ANONYMOUS_s738_38b, symbolic__ANONYMOUS_s739_38c);
                        _out_388 = _out_s79_38e;
                        return;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
/*lseg_header.skh:409*/

void compute_reach (int init_3e5, int stop_3e6, ref bit[4] reach_3e7, ref global bit[4] active__ANONYMOUS_s735_3e8, ref global int[4] next__ANONYMOUS_s1428_3e9, ref global int[4] supernext__ANONYMOUS_s1429_3ea, ref global bit[4] symbolic__ANONYMOUS_s1430_3eb)/*lseg_header.skh:409*/
{
  {
    {
      if((init_3e5 < 0) || (init_3e5 >= 4))/*lseg_header.skh:410*/
      {
        return;
      }
      else
      {
        assert ((init_3e5 >= 0) && (init_3e5 < 4)); //lseg_header.skh:411: Array out of bounds
        if(!(active__ANONYMOUS_s735_3e8[init_3e5]))/*lseg_header.skh:411*/
        {
          return;
        }
      }
      assert ((init_3e5 >= 0) && (init_3e5 < 4)); //lseg_header.skh:412: Either null pointer or Array out of bounds
      reach_3e7[init_3e5] = (init_3e5 == stop_3e6 ? 0 : 1);
      bit updated_3ec;
      updated_3ec = 0;
      bit __sa1684_3ed;
      __sa1684_3ed = 1;
      while(__sa1684_3ed)
      {
        updated_3ec = 0;
        update_reach@ANONYMOUS(updated_3ec, reach_3e7, stop_3e6, active__ANONYMOUS_s735_3e8, next__ANONYMOUS_s1428_3e9, supernext__ANONYMOUS_s1429_3ea, symbolic__ANONYMOUS_s1430_3eb);
        __sa1684_3ed = updated_3ec;
      }
    }
  }
}
/*aux.skh:82*/

void connect_defs (ref global bit[4] active__ANONYMOUS_s728_3de, ref global bit[4 * 4] history__ANONYMOUS_s729_3df, ref global int[4] next__ANONYMOUS_s730_3e0, ref global bit[4 * 4] p_history__ANONYMOUS_s731_3e1, ref global bit[4] symbolic__ANONYMOUS_s732_3e2, ref global int ts__ANONYMOUS_s733_3e3)/*aux.skh:82*/
{
  {
    {
      int i_3e4;
      if(0 < 4)/*aux.skh:83*/
      {
      }
      for(i_3e4 = 0; i_3e4 < 4; i_3e4 = i_3e4 + 1)/*Canonical*/
      {
        if(active__ANONYMOUS_s728_3de[i_3e4])/*aux.skh:84*/
        {
          assert ((i_3e4 >= 0) && (i_3e4 < 4)); //aux.skh:85: Array out of bounds
          if(symbolic__ANONYMOUS_s732_3e2[i_3e4])/*aux.skh:85*/
          {
            assert ((i_3e4 >= 0) && (i_3e4 < 4)); //aux.skh:86: Array out of bounds
            assert ((ts__ANONYMOUS_s733_3e3 >= 0) && (ts__ANONYMOUS_s733_3e3 < 4)); //aux.skh:86: Either null pointer or Array out of bounds
            history__ANONYMOUS_s729_3df[(4 * i_3e4) + ts__ANONYMOUS_s733_3e3] = 1;
            assert ((i_3e4 >= 0) && (i_3e4 < 4)); //aux.skh:87: Array out of bounds
            assert ((ts__ANONYMOUS_s733_3e3 >= 0) && (ts__ANONYMOUS_s733_3e3 < 4)); //aux.skh:87: Either null pointer or Array out of bounds
            p_history__ANONYMOUS_s731_3e1[(4 * i_3e4) + ts__ANONYMOUS_s733_3e3] = 1;
          }
          else
          {
            bit _pac_sc_s1862;
            {
              assert ((i_3e4 >= 0) && (i_3e4 < 4)); //aux.skh:89: Array out of bounds
              _pac_sc_s1862 = (next__ANONYMOUS_s730_3e0[i_3e4]) < 0;
              if(!(_pac_sc_s1862))/*aux.skh:89*/
              {
                assert ((i_3e4 >= 0) && (i_3e4 < 4)); //aux.skh:89: Array out of bounds
                _pac_sc_s1862 = (next__ANONYMOUS_s730_3e0[i_3e4]) >= 4;
              }
            }
            if(_pac_sc_s1862)/*aux.skh:89*/
            {
              assert ((i_3e4 >= 0) && (i_3e4 < 4)); //aux.skh:90: Array out of bounds
              assert ((ts__ANONYMOUS_s733_3e3 >= 0) && (ts__ANONYMOUS_s733_3e3 < 4)); //aux.skh:90: Either null pointer or Array out of bounds
              p_history__ANONYMOUS_s731_3e1[(4 * i_3e4) + ts__ANONYMOUS_s733_3e3] = 1;
            }
          }
        }
      }
    }
  }
}
/*lseg_header.skh:590*/

void free (int c_32d, ref global bit[4] active__ANONYMOUS_s792_32e, ref global bit error_flag__ANONYMOUS_s1567_32f, ref global bit[4 * 4] history__ANONYMOUS_s1533_330, ref global int[3] locvars__ANONYMOUS_s793_331, ref global int malloc_budget__ANONYMOUS_s794_332, ref global int[4] next__ANONYMOUS_s1534_333, ref global bit[4 * 4] p_history__ANONYMOUS_s1535_334, ref global bit[4] symbolic__ANONYMOUS_s795_335, ref global int ts__ANONYMOUS_s796_336)/*lseg_header.skh:590*/
{
  {
    {
      int choice_337;
      choice_337 = c_32d;
      assert (choice_337 > 0); //Assert at lseg_header.skh:594 (3998561429438794940)
      assert (choice_337 < 3); //Assert at lseg_header.skh:595 (3252136169983122127)
      int l_338;
      assert ((choice_337 >= 0) && (choice_337 < 3)); //lseg_header.skh:597: Array out of bounds
      l_338 = locvars__ANONYMOUS_s793_331[choice_337];
      bit b_1c5_s1745;
      bit _pac_sc_s1824;
      {
        assert ((l_338 >= 0) && (l_338 < 4)); //lseg_header.skh:600: Array out of bounds
        _pac_sc_s1824 = active__ANONYMOUS_s792_32e[l_338];
        if(_pac_sc_s1824)/*lseg_header.skh:600*/
        {
          assert ((l_338 >= 0) && (l_338 < 4)); //lseg_header.skh:600: Array out of bounds
          _pac_sc_s1824 = !(symbolic__ANONYMOUS_s795_335[l_338]);
        }
      }
      b_1c5_s1745 = _pac_sc_s1824;
      assertPost@ANONYMOUS(b_1c5_s1745, error_flag__ANONYMOUS_s1567_32f);
      bit _pac_sc_s1825;
      {
        assert ((l_338 >= 0) && (l_338 < 4)); //lseg_header.skh:601: Array out of bounds
        _pac_sc_s1825 = !(active__ANONYMOUS_s792_32e[l_338]);
        if(!(_pac_sc_s1825))/*lseg_header.skh:601*/
        {
          assert ((l_338 >= 0) && (l_338 < 4)); //lseg_header.skh:601: Array out of bounds
          _pac_sc_s1825 = symbolic__ANONYMOUS_s795_335[l_338];
        }
      }
      if(_pac_sc_s1825)/*lseg_header.skh:601*/
      {
        return;
      }
      if((l_338 > 0) && (l_338 < 4))/*lseg_header.skh:603*/
      {
        assert ((l_338 >= 0) && (l_338 < 4)); //lseg_header.skh:604: Either null pointer or Array out of bounds
        active__ANONYMOUS_s792_32e[l_338] = 0;
        int uo_s17_339;
        uo_s17_339 = malloc_budget__ANONYMOUS_s794_332;
        malloc_budget__ANONYMOUS_s794_332 = malloc_budget__ANONYMOUS_s794_332 + 1;
        uo_s17_339;
        int uo_s18_33a;
        uo_s18_33a = ts__ANONYMOUS_s796_336;
        ts__ANONYMOUS_s796_336 = ts__ANONYMOUS_s796_336 + 1;
        uo_s18_33a;
        connect_defs@ANONYMOUS(active__ANONYMOUS_s792_32e, history__ANONYMOUS_s1533_330, next__ANONYMOUS_s1534_333, p_history__ANONYMOUS_s1535_334, symbolic__ANONYMOUS_s795_335, ts__ANONYMOUS_s796_336);
      }
    }
  }
}
/*aux.skh:32*/

void glblInit_error_flag__ANONYMOUS_s1671 (ref bit error_flag__ANONYMOUS_s1670_2e)/*aux.skh:32*/
{
  {
    {
      error_flag__ANONYMOUS_s1670_2e = 0;
    }
  }
}
/*aux.skh:35*/

void glblInit_fake_unfold__ANONYMOUS_s1673 (ref int fake_unfold__ANONYMOUS_s1672_2f)/*aux.skh:35*/
{
  {
    {
      fake_unfold__ANONYMOUS_s1672_2f = 0;
    }
  }
}
/*aux.skh:36*/

void glblInit_fake_unfold_to__ANONYMOUS_s1675 (ref int fake_unfold_to__ANONYMOUS_s1674_30)/*aux.skh:36*/
{
  {
    {
      fake_unfold_to__ANONYMOUS_s1674_30 = 0;
    }
  }
}
/*local/test.sk:9*/

void glblInit_malloc_budget__ANONYMOUS_s1677 (ref int malloc_budget__ANONYMOUS_s1676_31)/*local/test.sk:9*/
{
  {
    {
      malloc_budget__ANONYMOUS_s1676_31 = 1;
    }
  }
}
/*aux.skh:30*/

void glblInit_ranking__ANONYMOUS_s1679 (ref int ranking__ANONYMOUS_s1678_32)/*aux.skh:30*/
{
  {
    {
      ranking__ANONYMOUS_s1678_32 = 0;
    }
  }
}
/*aux.skh:29*/

void glblInit_ret__ANONYMOUS_s1681 (ref int ret__ANONYMOUS_s1680_33)/*aux.skh:29*/
{
  {
    {
      ret__ANONYMOUS_s1680_33 = 0;
    }
  }
}
/*aux.skh:33*/

void glblInit_ts__ANONYMOUS_s1683 (ref int ts__ANONYMOUS_s1682_34)/*aux.skh:33*/
{
  {
    {
      ts__ANONYMOUS_s1682_34 = 0;
    }
  }
}
/*lseg_header.skh:422*/

void havoc (int r_360, ref bit[3] new_symbolic_361, ref int[3] new_next_362, ref int[3] new_supernext_363, ref int[3] new_key_364, ref int _out_365, ref global bit[4] active__ANONYMOUS_s894_366, ref global bit[4 * 4] history__ANONYMOUS_s1303_367, ref global int[4] key__ANONYMOUS_s895_368, ref global int[4] next__ANONYMOUS_s896_369, ref global bit[4 * 4] p_history__ANONYMOUS_s1304_36a, ref global int[4] supernext__ANONYMOUS_s897_36b, ref global bit[4] symbolic__ANONYMOUS_s898_36c, ref global int ts__ANONYMOUS_s899_36d)/*lseg_header.skh:422*/
{
  {
    {
      _out_365 = 0;
      bit[4] reach_36e;
      {
        for(int __sa1897 = 0; __sa1897 < 4; __sa1897 = __sa1897 + 1)/*Canonical*/
        {
          reach_36e[__sa1897] = 0;
        }
      }
      compute_reach@ANONYMOUS(r_360, 0, reach_36e, active__ANONYMOUS_s894_366, next__ANONYMOUS_s896_369, supernext__ANONYMOUS_s897_36b, symbolic__ANONYMOUS_s898_36c);
      int idx_36f;
      if(1 < 4)/*lseg_header.skh:426*/
      {
      }
      for(idx_36f = 1; idx_36f < 4; idx_36f = idx_36f + 1)/*Canonical*/
      {
        if(reach_36e[idx_36f])/*lseg_header.skh:427*/
        {
          assert ((idx_36f >= 0) && (idx_36f < 4)); //lseg_header.skh:427: Either null pointer or Array out of bounds
          active__ANONYMOUS_s894_366[idx_36f] = 0;
        }
        if(!(active__ANONYMOUS_s894_366[idx_36f]))/*lseg_header.skh:428*/
        {
          int _pac_s1829;
          _pac_s1829 = idx_36f - 1;
          assert ((_pac_s1829 >= 0) && (_pac_s1829 < 3)); //lseg_header.skh:429: Array out of bounds
          assert ((idx_36f >= 0) && (idx_36f < 4)); //lseg_header.skh:429: Either null pointer or Array out of bounds
          symbolic__ANONYMOUS_s898_36c[idx_36f] = new_symbolic_361[_pac_s1829];
          int _pac_s1830;
          _pac_s1830 = idx_36f - 1;
          assert ((_pac_s1830 >= 0) && (_pac_s1830 < 3)); //lseg_header.skh:430: Array out of bounds
          assert ((idx_36f >= 0) && (idx_36f < 4)); //lseg_header.skh:430: Either null pointer or Array out of bounds
          next__ANONYMOUS_s896_369[idx_36f] = new_next_362[_pac_s1830];
          int _pac_s1831;
          _pac_s1831 = idx_36f - 1;
          assert ((_pac_s1831 >= 0) && (_pac_s1831 < 3)); //lseg_header.skh:431: Array out of bounds
          assert ((idx_36f >= 0) && (idx_36f < 4)); //lseg_header.skh:431: Either null pointer or Array out of bounds
          supernext__ANONYMOUS_s897_36b[idx_36f] = new_supernext_363[_pac_s1831];
          int _pac_s1832;
          _pac_s1832 = idx_36f - 1;
          assert ((_pac_s1832 >= 0) && (_pac_s1832 < 3)); //lseg_header.skh:432: Array out of bounds
          assert ((idx_36f >= 0) && (idx_36f < 4)); //lseg_header.skh:432: Either null pointer or Array out of bounds
          key__ANONYMOUS_s895_368[idx_36f] = new_key_364[_pac_s1832];
        }
      }
      int loc_370;
      loc_370 = 1;
      bit __sa10_371;
      bit _pac_sc_s1833;
      {
        _pac_sc_s1833 = 1;
        if(_pac_sc_s1833)/*lseg_header.skh:437*/
        {
          bit _pac_sc_s1834;
          {
            bit _pac_s1835;
            _pac_s1835 = 1;
            assert ((_pac_s1835 >= 0) && (_pac_s1835 < 4)); //lseg_header.skh:437: Array out of bounds
            _pac_sc_s1834 = active__ANONYMOUS_s894_366[_pac_s1835];
            if(!(_pac_sc_s1834))/*lseg_header.skh:437*/
            {
              bit _pac_s1836;
              _pac_s1836 = 1;
              assert ((_pac_s1836 >= 0) && (_pac_s1836 < 4)); //lseg_header.skh:437: Array out of bounds
              _pac_sc_s1834 = !(symbolic__ANONYMOUS_s898_36c[_pac_s1836]);
            }
          }
          _pac_sc_s1833 = _pac_sc_s1834;
        }
      }
      __sa10_371 = _pac_sc_s1833;
      while(__sa10_371)
      {
        int uo_s33_374;
        uo_s33_374 = loc_370;
        loc_370 = loc_370 + 1;
        uo_s33_374;
        bit _pac_sc_s1837;
        {
          _pac_sc_s1837 = loc_370 < 4;
          if(_pac_sc_s1837)/*lseg_header.skh:437*/
          {
            bit _pac_sc_s1838;
            {
              assert ((loc_370 >= 0) && (loc_370 < 4)); //lseg_header.skh:437: Array out of bounds
              _pac_sc_s1838 = active__ANONYMOUS_s894_366[loc_370];
              if(!(_pac_sc_s1838))/*lseg_header.skh:437*/
              {
                assert ((loc_370 >= 0) && (loc_370 < 4)); //lseg_header.skh:437: Array out of bounds
                _pac_sc_s1838 = !(symbolic__ANONYMOUS_s898_36c[loc_370]);
              }
            }
            _pac_sc_s1837 = _pac_sc_s1838;
          }
        }
        __sa10_371 = _pac_sc_s1837;
      }
      if(loc_370 >= 4)/*lseg_header.skh:440*/
      {
        _out_365 = 0;
        return;
      }
      int uo_s34_375;
      uo_s34_375 = ts__ANONYMOUS_s899_36d;
      ts__ANONYMOUS_s899_36d = ts__ANONYMOUS_s899_36d + 1;
      uo_s34_375;
      connect_defs@ANONYMOUS(active__ANONYMOUS_s894_366, history__ANONYMOUS_s1303_367, next__ANONYMOUS_s896_369, p_history__ANONYMOUS_s1304_36a, symbolic__ANONYMOUS_s898_36c, ts__ANONYMOUS_s899_36d);
      assert ((loc_370 >= 0) && (loc_370 < 4)); //lseg_header.skh:446: Either null pointer or Array out of bounds
      active__ANONYMOUS_s894_366[loc_370] = 1;
      _out_365 = loc_370;
      return;
    }
  }
}
/*aux.skh:264*/

void init (ref int[2] llocvars_70, ref int[2] lintvars_71, ref int[3] lnext_72, ref int[3] lsupernext_73, ref int[3] lleft_74, ref int[3] lright_75, ref int[3] lkey_76, ref bit[3] lsymbolic_77, ref bit[3] lactive_78, ref global bit[4] active__ANONYMOUS_s748_79, ref global int[2] intvars__ANONYMOUS_s749_7a, ref global int[4] key__ANONYMOUS_s750_7b, ref global int[4] left__ANONYMOUS_s751_7c, ref global int[3] locvars__ANONYMOUS_s752_7d, ref global int[4] next__ANONYMOUS_s753_7e, ref global int[4] right__ANONYMOUS_s754_7f, ref global int[4] supernext__ANONYMOUS_s755_80, ref global bit[4] symbolic__ANONYMOUS_s756_81)/*aux.skh:264*/
{
  {
    {
      int[2] __sa1773;
      __sa1773 = llocvars_70;
      bit _pac_s1781;
      _pac_s1781 = 1;
      assert ((_pac_s1781 >= 0) && ((_pac_s1781 + 2) <= 3)); //aux.skh:265: Either null pointer or Array out of bounds
      {
        for(int __sa1886 = 0; __sa1886 < 2; __sa1886 = __sa1886 + 1)/*Canonical*/
        {
          locvars__ANONYMOUS_s752_7d[_pac_s1781 + __sa1886] = __sa1773[__sa1886];
        }
      }
      {
        for(int __sa1887 = 0; __sa1887 < 2; __sa1887 = __sa1887 + 1)/*Canonical*/
        {
          intvars__ANONYMOUS_s749_7a[__sa1887] = lintvars_71[__sa1887];
        }
      }
      int[3] __sa1774;
      __sa1774 = lnext_72;
      bit _pac_s1782;
      _pac_s1782 = 1;
      assert ((_pac_s1782 >= 0) && ((_pac_s1782 + 3) <= 4)); //aux.skh:267: Either null pointer or Array out of bounds
      {
        for(int __sa1888 = 0; __sa1888 < 3; __sa1888 = __sa1888 + 1)/*Canonical*/
        {
          next__ANONYMOUS_s753_7e[_pac_s1782 + __sa1888] = __sa1774[__sa1888];
        }
      }
      int[3] __sa1775;
      __sa1775 = lsupernext_73;
      bit _pac_s1783;
      _pac_s1783 = 1;
      assert ((_pac_s1783 >= 0) && ((_pac_s1783 + 3) <= 4)); //aux.skh:268: Either null pointer or Array out of bounds
      {
        for(int __sa1889 = 0; __sa1889 < 3; __sa1889 = __sa1889 + 1)/*Canonical*/
        {
          supernext__ANONYMOUS_s755_80[_pac_s1783 + __sa1889] = __sa1775[__sa1889];
        }
      }
      int[3] __sa1776;
      __sa1776 = lleft_74;
      bit _pac_s1784;
      _pac_s1784 = 1;
      assert ((_pac_s1784 >= 0) && ((_pac_s1784 + 3) <= 4)); //aux.skh:269: Either null pointer or Array out of bounds
      {
        for(int __sa1890 = 0; __sa1890 < 3; __sa1890 = __sa1890 + 1)/*Canonical*/
        {
          left__ANONYMOUS_s751_7c[_pac_s1784 + __sa1890] = __sa1776[__sa1890];
        }
      }
      int[3] __sa1777;
      __sa1777 = lright_75;
      bit _pac_s1785;
      _pac_s1785 = 1;
      assert ((_pac_s1785 >= 0) && ((_pac_s1785 + 3) <= 4)); //aux.skh:270: Either null pointer or Array out of bounds
      {
        for(int __sa1891 = 0; __sa1891 < 3; __sa1891 = __sa1891 + 1)/*Canonical*/
        {
          right__ANONYMOUS_s754_7f[_pac_s1785 + __sa1891] = __sa1777[__sa1891];
        }
      }
      int[3] __sa1778;
      __sa1778 = lkey_76;
      bit _pac_s1786;
      _pac_s1786 = 1;
      assert ((_pac_s1786 >= 0) && ((_pac_s1786 + 3) <= 4)); //aux.skh:271: Either null pointer or Array out of bounds
      {
        for(int __sa1892 = 0; __sa1892 < 3; __sa1892 = __sa1892 + 1)/*Canonical*/
        {
          key__ANONYMOUS_s750_7b[_pac_s1786 + __sa1892] = __sa1778[__sa1892];
        }
      }
      bit[3] __sa1779;
      __sa1779 = lsymbolic_77;
      bit _pac_s1787;
      _pac_s1787 = 1;
      assert ((_pac_s1787 >= 0) && ((_pac_s1787 + 3) <= 4)); //aux.skh:272: Either null pointer or Array out of bounds
      {
        for(int __sa1893 = 0; __sa1893 < 3; __sa1893 = __sa1893 + 1)/*Canonical*/
        {
          symbolic__ANONYMOUS_s756_81[_pac_s1787 + __sa1893] = __sa1779[__sa1893];
        }
      }
      bit[3] __sa1780;
      __sa1780 = lactive_78;
      bit _pac_s1788;
      _pac_s1788 = 1;
      assert ((_pac_s1788 >= 0) && ((_pac_s1788 + 3) <= 4)); //aux.skh:273: Either null pointer or Array out of bounds
      {
        for(int __sa1894 = 0; __sa1894 < 3; __sa1894 = __sa1894 + 1)/*Canonical*/
        {
          active__ANONYMOUS_s748_79[_pac_s1788 + __sa1894] = __sa1780[__sa1894];
        }
      }
      bit _pac_s1789;
      _pac_s1789 = 0;
      assert ((_pac_s1789 >= 0) && (_pac_s1789 < 4)); //aux.skh:274: Either null pointer or Array out of bounds
      active__ANONYMOUS_s748_79[_pac_s1789] = 1;
    }
  }
}
/*aux.skh:174*/

void intMutate (int c1_34e, int c2_34f, ref global bit[4] active__ANONYMOUS_s778_350, ref global bit error_flag__ANONYMOUS_s1595_351, ref global int fake_unfold__ANONYMOUS_s779_352, ref global bit[4 * 4] history__ANONYMOUS_s1202_353, ref global int[2] intvars__ANONYMOUS_s780_354, ref global int[4] key__ANONYMOUS_s781_355, ref global int[3] locvars__ANONYMOUS_s782_356, ref global int[4] next__ANONYMOUS_s1203_357, ref global bit[4 * 4] p_history__ANONYMOUS_s1204_358, ref global bit[4] symbolic__ANONYMOUS_s783_359, ref global int ts__ANONYMOUS_s784_35a)/*aux.skh:174*/
{
  {
    {
      int choice_35b;
      choice_35b = c1_34e;
      assert (choice_35b > 0); //Assert at aux.skh:177 (-8364769372142780397)
      assert (choice_35b < 3); //Assert at aux.skh:178 (1259381282049990795)
      int choice2_35c;
      choice2_35c = c2_34f;
      assert (choice2_35c >= 0); //Assert at aux.skh:180 (-7901941287156615889)
      assert (choice2_35c < 2); //Assert at aux.skh:181 (-2484161174657556818)
      int df_35d;
      assert ((choice_35b >= 0) && (choice_35b < 3)); //aux.skh:184: Array out of bounds
      df_35d = locvars__ANONYMOUS_s782_356[choice_35b];
      bit b_376_s1750;
      b_376_s1750 = df_35d >= 0;
      assumePre@ANONYMOUS(b_376_s1750, error_flag__ANONYMOUS_s1595_351);
      bit b_376_s1751;
      b_376_s1751 = df_35d < 4;
      assumePre@ANONYMOUS(b_376_s1751, error_flag__ANONYMOUS_s1595_351);
      if((df_35d < 0) || (df_35d >= 4))/*aux.skh:187*/
      {
        return;
      }
      if(df_35d == 0)/*aux.skh:190*/
      {
        return;
      }
      assert ((df_35d >= 0) && (df_35d < 4)); //aux.skh:191: Array out of bounds
      if(!(active__ANONYMOUS_s778_350[df_35d]))/*aux.skh:191*/
      {
        return;
      }
      bit _pac_sc_s1828;
      {
        assert ((df_35d >= 0) && (df_35d < 4)); //aux.skh:192: Array out of bounds
        _pac_sc_s1828 = symbolic__ANONYMOUS_s783_359[df_35d];
        if(_pac_sc_s1828)/*aux.skh:192*/
        {
          _pac_sc_s1828 = fake_unfold__ANONYMOUS_s779_352 != df_35d;
        }
      }
      if(_pac_sc_s1828)/*aux.skh:192*/
      {
        return;
      }
      int k_35e;
      assert ((choice2_35c >= 0) && (choice2_35c < 2)); //aux.skh:194: Array out of bounds
      k_35e = intvars__ANONYMOUS_s780_354[choice2_35c];
      int uo_s15_35f;
      uo_s15_35f = ts__ANONYMOUS_s784_35a;
      ts__ANONYMOUS_s784_35a = ts__ANONYMOUS_s784_35a + 1;
      uo_s15_35f;
      assert ((df_35d >= 0) && (df_35d < 4)); //aux.skh:197: Either null pointer or Array out of bounds
      key__ANONYMOUS_s781_355[df_35d] = k_35e;
      connect_defs@ANONYMOUS(active__ANONYMOUS_s778_350, history__ANONYMOUS_s1202_353, next__ANONYMOUS_s1203_357, p_history__ANONYMOUS_s1204_358, symbolic__ANONYMOUS_s783_359, ts__ANONYMOUS_s784_35a);
    }
  }
}
/*aux.skh:121*/

void intVarAssign (int c1_317, int c2_318, int c3_319, ref global int[2] intvars__ANONYMOUS_s830_31a)/*aux.skh:121*/
{
  {
    {
      int choice_31b;
      choice_31b = c1_317;
      assert (choice_31b >= 0); //Assert at aux.skh:124 (-4513834367423848539)
      assert (choice_31b < 2); //Assert at aux.skh:125 (7123383068344415191)
      int choice2_31c;
      choice2_31c = c2_318;
      assert (choice2_31c >= 0); //Assert at aux.skh:128 (1127675180348953653)
      assert (choice2_31c < 2); //Assert at aux.skh:129 (8629709707906903488)
      int val_choice_31d;
      val_choice_31d = c3_319;
      if(val_choice_31d == 0)/*aux.skh:132*/
      {
        assert ((choice_31b >= 0) && (choice_31b < 2)); //aux.skh:132: Either null pointer or Array out of bounds
        intvars__ANONYMOUS_s830_31a[choice_31b] = 0;
      }
      else
      {
        if(val_choice_31d == 7)/*aux.skh:133*/
        {
          assert ((choice_31b >= 0) && (choice_31b < 2)); //aux.skh:133: Either null pointer or Array out of bounds
          intvars__ANONYMOUS_s830_31a[choice_31b] = 7;
        }
        else
        {
          if(val_choice_31d == 1)/*aux.skh:134*/
          {
            assert ((choice2_31c >= 0) && (choice2_31c < 2)); //aux.skh:134: Array out of bounds
            assert ((choice_31b >= 0) && (choice_31b < 2)); //aux.skh:134: Either null pointer or Array out of bounds
            intvars__ANONYMOUS_s830_31a[choice_31b] = intvars__ANONYMOUS_s830_31a[choice2_31c];
          }
          else
          {
            if(val_choice_31d == 2)/*aux.skh:135*/
            {
              assert ((choice2_31c >= 0) && (choice2_31c < 2)); //aux.skh:135: Array out of bounds
              assert ((choice_31b >= 0) && (choice_31b < 2)); //aux.skh:135: Either null pointer or Array out of bounds
              intvars__ANONYMOUS_s830_31a[choice_31b] = (intvars__ANONYMOUS_s830_31a[choice2_31c]) + 1;
            }
            else
            {
              if(val_choice_31d == 3)/*aux.skh:136*/
              {
                assert ((choice2_31c >= 0) && (choice2_31c < 2)); //aux.skh:136: Array out of bounds
                assert ((choice_31b >= 0) && (choice_31b < 2)); //aux.skh:136: Either null pointer or Array out of bounds
                intvars__ANONYMOUS_s830_31a[choice_31b] = (intvars__ANONYMOUS_s830_31a[choice2_31c]) - 1;
              }
            }
          }
        }
      }
    }
  }
}
/*local/test.sk:101*/

void int_id0 (int intrange_1c7, ref int _out_1c8)/*local/test.sk:101*/
{
  {
    {
      _out_1c8 = 0;
      int _out_s237_1c9;
      int r_1ca;
      r_1ca = intrange_1c7;
      bit _has_out__1cb;
      _has_out__1cb = 0;
      _out_s237_1c9 = 0;
      _out_s237_1c9 = ??/* H__1_398int:3 */;
      assert ((_out_s237_1c9 >= 0) && (_out_s237_1c9 < r_1ca)); //Assert at aux.skh:63 (3631387498543592694)
      _has_out__1cb = 1;
      _out_1c8 = _out_s237_1c9;
      return;
    }
  }
}
/*lseg_header.skh:509*/

void intderef2var (int c1_2f9, int c2_2fa, ref global bit[4] active__ANONYMOUS_s874_2fb, ref global bit error_flag__ANONYMOUS_s1125_2fc, ref global bit[4 * 4] history__ANONYMOUS_s1052_2fd, ref global int[2] intvars__ANONYMOUS_s875_2fe, ref global int[4] key__ANONYMOUS_s876_2ff, ref global int[3] locvars__ANONYMOUS_s877_300, ref global int[4] next__ANONYMOUS_s878_301, ref global bit[4 * 4] p_history__ANONYMOUS_s1452_302, ref global int[4] supernext__ANONYMOUS_s1285_303, ref global bit[4] symbolic__ANONYMOUS_s879_304, ref global int ts__ANONYMOUS_s880_305)/*lseg_header.skh:509*/
{
  {
    {
      int choice_306;
      choice_306 = c1_2f9;
      assert (choice_306 > 0); //Assert at lseg_header.skh:512 (-2546932479276690354)
      assert (choice_306 < 3); //Assert at lseg_header.skh:513 (-1173666344203638484)
      int choice2_307;
      choice2_307 = c2_2fa;
      assert (choice2_307 >= 0); //Assert at lseg_header.skh:515 (1842970724580581118)
      assert (choice2_307 < 2); //Assert at lseg_header.skh:516 (-5373267300216159279)
      int l_308;
      assert ((choice_306 >= 0) && (choice_306 < 3)); //lseg_header.skh:519: Array out of bounds
      l_308 = locvars__ANONYMOUS_s877_300[choice_306];
      bit b_1c5_s1734;
      b_1c5_s1734 = l_308 > 0;
      assertPost@ANONYMOUS(b_1c5_s1734, error_flag__ANONYMOUS_s1125_2fc);
      bit b_1c5_s1735;
      b_1c5_s1735 = l_308 < 4;
      assertPost@ANONYMOUS(b_1c5_s1735, error_flag__ANONYMOUS_s1125_2fc);
      if((l_308 <= 0) || (l_308 >= 4))/*lseg_header.skh:522*/
      {
        return;
      }
      assert ((l_308 >= 0) && (l_308 < 4)); //lseg_header.skh:523: Array out of bounds
      if(!(active__ANONYMOUS_s874_2fb[l_308]))/*lseg_header.skh:523*/
      {
        return;
      }
      int test_309;
      assert ((l_308 >= 0) && (l_308 < 4)); //lseg_header.skh:526: Array out of bounds
      test_309 = next__ANONYMOUS_s878_301[l_308];
      assert ((l_308 >= 0) && (l_308 < 4)); //lseg_header.skh:528: Array out of bounds
      if(!(symbolic__ANONYMOUS_s879_304[l_308]))/*lseg_header.skh:528*/
      {
        bit b_376_s1736;
        b_376_s1736 = test_309 >= 0;
        assumePre@ANONYMOUS(b_376_s1736, error_flag__ANONYMOUS_s1125_2fc);
        bit b_376_s1737;
        b_376_s1737 = test_309 < 4;
        assumePre@ANONYMOUS(b_376_s1737, error_flag__ANONYMOUS_s1125_2fc);
        if((test_309 < 0) || (test_309 >= 4))/*lseg_header.skh:531*/
        {
          return;
        }
        assert ((l_308 >= 0) && (l_308 < 4)); //lseg_header.skh:534: Array out of bounds
        assert ((choice2_307 >= 0) && (choice2_307 < 2)); //lseg_header.skh:534: Either null pointer or Array out of bounds
        intvars__ANONYMOUS_s875_2fe[choice2_307] = key__ANONYMOUS_s876_2ff[l_308];
        return;
      }
      int ln_30a;
      ln_30a = test_309;
      if(test_309 > 0)/*lseg_header.skh:540*/
      {
        ln_30a = 1;
        bit __sa12_30b;
        bit _pac_sc_s1818;
        {
          _pac_sc_s1818 = 1;
          if(_pac_sc_s1818)/*lseg_header.skh:542*/
          {
            bit _pac_s1819;
            _pac_s1819 = 1;
            assert ((_pac_s1819 >= 0) && (_pac_s1819 < 4)); //lseg_header.skh:542: Array out of bounds
            _pac_sc_s1818 = active__ANONYMOUS_s874_2fb[_pac_s1819];
          }
        }
        __sa12_30b = _pac_sc_s1818;
        while(__sa12_30b)
        {
          int uo_s21_30e;
          uo_s21_30e = ln_30a;
          ln_30a = ln_30a + 1;
          uo_s21_30e;
          bit _pac_sc_s1820;
          {
            _pac_sc_s1820 = ln_30a < 4;
            if(_pac_sc_s1820)/*lseg_header.skh:542*/
            {
              assert ((ln_30a >= 0) && (ln_30a < 4)); //lseg_header.skh:542: Array out of bounds
              _pac_sc_s1820 = active__ANONYMOUS_s874_2fb[ln_30a];
            }
          }
          __sa12_30b = _pac_sc_s1820;
        }
        bit b_376_s1738;
        b_376_s1738 = ln_30a < 4;
        assumePre@ANONYMOUS(b_376_s1738, error_flag__ANONYMOUS_s1125_2fc);
        if(ln_30a >= 4)/*lseg_header.skh:546*/
        {
          return;
        }
        assert ((ln_30a >= 0) && (ln_30a < 4)); //lseg_header.skh:549: Either null pointer or Array out of bounds
        active__ANONYMOUS_s874_2fb[ln_30a] = 1;
        assert ((ln_30a >= 0) && (ln_30a < 4)); //lseg_header.skh:550: Either null pointer or Array out of bounds
        symbolic__ANONYMOUS_s879_304[ln_30a] = 1;
        assert ((l_308 >= 0) && (l_308 < 4)); //lseg_header.skh:551: Either null pointer or Array out of bounds
        next__ANONYMOUS_s878_301[l_308] = ln_30a;
      }
      assert ((l_308 >= 0) && (l_308 < 4)); //lseg_header.skh:554: Array out of bounds
      assert ((choice2_307 >= 0) && (choice2_307 < 2)); //lseg_header.skh:554: Either null pointer or Array out of bounds
      intvars__ANONYMOUS_s875_2fe[choice2_307] = key__ANONYMOUS_s876_2ff[l_308];
      assert ((l_308 >= 0) && (l_308 < 4)); //lseg_header.skh:555: Either null pointer or Array out of bounds
      symbolic__ANONYMOUS_s879_304[l_308] = 0;
      bit _out_s97_30f;
      sll(l_308, ts__ANONYMOUS_s880_305, _out_s97_30f);
      bit _out_s99_310;
      sll_comp@ANONYMOUS(l_308, _out_s99_310, active__ANONYMOUS_s874_2fb, history__ANONYMOUS_s1052_2fd, key__ANONYMOUS_s876_2ff, next__ANONYMOUS_s878_301, p_history__ANONYMOUS_s1452_302, supernext__ANONYMOUS_s1285_303, symbolic__ANONYMOUS_s879_304, ts__ANONYMOUS_s880_305);
      bit b_376_s1739;
      b_376_s1739 = _out_s97_30f == _out_s99_310;
      assumePre@ANONYMOUS(b_376_s1739, error_flag__ANONYMOUS_s1125_2fc);
      int _out_s101_311;
      len(l_308, ts__ANONYMOUS_s880_305, _out_s101_311);
      int _out_s103_312;
      len_comp@ANONYMOUS(l_308, _out_s103_312, active__ANONYMOUS_s874_2fb, history__ANONYMOUS_s1052_2fd, next__ANONYMOUS_s878_301, p_history__ANONYMOUS_s1452_302, supernext__ANONYMOUS_s1285_303, symbolic__ANONYMOUS_s879_304, ts__ANONYMOUS_s880_305);
      bit b_376_s1740;
      b_376_s1740 = _out_s101_311 == _out_s103_312;
      assumePre@ANONYMOUS(b_376_s1740, error_flag__ANONYMOUS_s1125_2fc);
      int _out_s105_313;
      min(l_308, ts__ANONYMOUS_s880_305, _out_s105_313);
      int _out_s107_314;
      min_comp@ANONYMOUS(l_308, _out_s107_314, active__ANONYMOUS_s874_2fb, history__ANONYMOUS_s1052_2fd, key__ANONYMOUS_s876_2ff, next__ANONYMOUS_s878_301, p_history__ANONYMOUS_s1452_302, supernext__ANONYMOUS_s1285_303, symbolic__ANONYMOUS_s879_304, ts__ANONYMOUS_s880_305);
      bit b_376_s1741;
      b_376_s1741 = _out_s105_313 == _out_s107_314;
      assumePre@ANONYMOUS(b_376_s1741, error_flag__ANONYMOUS_s1125_2fc);
      int _out_s109_315;
      max(l_308, ts__ANONYMOUS_s880_305, _out_s109_315);
      int _out_s111_316;
      max_comp@ANONYMOUS(l_308, _out_s111_316, active__ANONYMOUS_s874_2fb, history__ANONYMOUS_s1052_2fd, key__ANONYMOUS_s876_2ff, next__ANONYMOUS_s878_301, p_history__ANONYMOUS_s1452_302, supernext__ANONYMOUS_s1285_303, symbolic__ANONYMOUS_s879_304, ts__ANONYMOUS_s880_305);
      bit b_376_s1742;
      b_376_s1742 = _out_s109_315 == _out_s111_316;
      assumePre@ANONYMOUS(b_376_s1742, error_flag__ANONYMOUS_s1125_2fc);
    }
  }
}
/*lseg_header.skh:648*/

void intderef_lt_var (int c1_2b4, int c2_2b5, ref bit _out_2b6, ref global bit[4] active__ANONYMOUS_s808_2b7, ref global bit error_flag__ANONYMOUS_s1427_2b8, ref global int fake_unfold__ANONYMOUS_s809_2b9, ref global int fake_unfold_to__ANONYMOUS_s810_2ba, ref global bit[4 * 4] history__ANONYMOUS_s1143_2bb, ref global int[2] intvars__ANONYMOUS_s811_2bc, ref global int[4] key__ANONYMOUS_s812_2bd, ref global int[3] locvars__ANONYMOUS_s813_2be, ref global int[4] next__ANONYMOUS_s814_2bf, ref global bit[4 * 4] p_history__ANONYMOUS_s1124_2c0, ref global int[4] supernext__ANONYMOUS_s1338_2c1, ref global bit[4] symbolic__ANONYMOUS_s815_2c2, ref global int ts__ANONYMOUS_s816_2c3)/*lseg_header.skh:648*/
{
  {
    {
      _out_2b6 = 0;
      int choice_2c4;
      choice_2c4 = c1_2b4;
      assert (choice_2c4 > 0); //Assert at lseg_header.skh:651 (6158516423312220666)
      assert (choice_2c4 < 3); //Assert at lseg_header.skh:652 (1277181396346541703)
      int choice2_2c5;
      choice2_2c5 = c2_2b5;
      assert (choice2_2c5 >= 0); //Assert at lseg_header.skh:654 (-3643124575569143229)
      assert (choice2_2c5 < 2); //Assert at lseg_header.skh:655 (-8447981083104355708)
      int l_2c6;
      assert ((choice_2c4 >= 0) && (choice_2c4 < 3)); //lseg_header.skh:658: Array out of bounds
      l_2c6 = locvars__ANONYMOUS_s813_2be[choice_2c4];
      bit b_1c5_s1713;
      b_1c5_s1713 = l_2c6 > 0;
      assertPost@ANONYMOUS(b_1c5_s1713, error_flag__ANONYMOUS_s1427_2b8);
      bit b_1c5_s1714;
      b_1c5_s1714 = l_2c6 < 4;
      assertPost@ANONYMOUS(b_1c5_s1714, error_flag__ANONYMOUS_s1427_2b8);
      if((l_2c6 <= 0) || (l_2c6 >= 4))/*lseg_header.skh:661*/
      {
        _out_2b6 = 0;
        return;
      }
      assert ((l_2c6 >= 0) && (l_2c6 < 4)); //lseg_header.skh:662: Array out of bounds
      if(!(active__ANONYMOUS_s808_2b7[l_2c6]))/*lseg_header.skh:662*/
      {
        _out_2b6 = 0;
        return;
      }
      int test_2c7;
      assert ((l_2c6 >= 0) && (l_2c6 < 4)); //lseg_header.skh:665: Array out of bounds
      test_2c7 = next__ANONYMOUS_s814_2bf[l_2c6];
      assert ((l_2c6 >= 0) && (l_2c6 < 4)); //lseg_header.skh:667: Array out of bounds
      if(!(symbolic__ANONYMOUS_s815_2c2[l_2c6]))/*lseg_header.skh:667*/
      {
        bit b_376_s1715;
        b_376_s1715 = test_2c7 >= 0;
        assumePre@ANONYMOUS(b_376_s1715, error_flag__ANONYMOUS_s1427_2b8);
        bit b_376_s1716;
        b_376_s1716 = test_2c7 < 4;
        assumePre@ANONYMOUS(b_376_s1716, error_flag__ANONYMOUS_s1427_2b8);
        if((test_2c7 < 0) || (test_2c7 >= 4))/*lseg_header.skh:670*/
        {
          _out_2b6 = 0;
          return;
        }
        assert ((l_2c6 >= 0) && (l_2c6 < 4)); //lseg_header.skh:673: Array out of bounds
        assert ((choice2_2c5 >= 0) && (choice2_2c5 < 2)); //lseg_header.skh:673: Array out of bounds
        _out_2b6 = (key__ANONYMOUS_s812_2bd[l_2c6]) < (intvars__ANONYMOUS_s811_2bc[choice2_2c5]);
        return;
      }
      int ln_2c8;
      ln_2c8 = test_2c7;
      if(test_2c7 > 0)/*lseg_header.skh:678*/
      {
        ln_2c8 = 1;
        bit __sa14_2c9;
        bit _pac_sc_s1812;
        {
          _pac_sc_s1812 = 1;
          if(_pac_sc_s1812)/*lseg_header.skh:680*/
          {
            bit _pac_s1813;
            _pac_s1813 = 1;
            assert ((_pac_s1813 >= 0) && (_pac_s1813 < 4)); //lseg_header.skh:680: Array out of bounds
            _pac_sc_s1812 = active__ANONYMOUS_s808_2b7[_pac_s1813];
          }
        }
        __sa14_2c9 = _pac_sc_s1812;
        while(__sa14_2c9)
        {
          int uo_s32_2cc;
          uo_s32_2cc = ln_2c8;
          ln_2c8 = ln_2c8 + 1;
          uo_s32_2cc;
          bit _pac_sc_s1814;
          {
            _pac_sc_s1814 = ln_2c8 < 4;
            if(_pac_sc_s1814)/*lseg_header.skh:680*/
            {
              assert ((ln_2c8 >= 0) && (ln_2c8 < 4)); //lseg_header.skh:680: Array out of bounds
              _pac_sc_s1814 = active__ANONYMOUS_s808_2b7[ln_2c8];
            }
          }
          __sa14_2c9 = _pac_sc_s1814;
        }
        bit b_376_s1717;
        b_376_s1717 = ln_2c8 < 4;
        assumePre@ANONYMOUS(b_376_s1717, error_flag__ANONYMOUS_s1427_2b8);
        if(ln_2c8 >= 4)/*lseg_header.skh:684*/
        {
          _out_2b6 = 0;
          return;
        }
        bit b_1c5_s1718;
        b_1c5_s1718 = (fake_unfold__ANONYMOUS_s809_2b9 == 0) || (fake_unfold__ANONYMOUS_s809_2b9 == l_2c6);
        assertPost@ANONYMOUS(b_1c5_s1718, error_flag__ANONYMOUS_s1427_2b8);
        bit b_1c5_s1719;
        b_1c5_s1719 = (fake_unfold_to__ANONYMOUS_s810_2ba == 0) || (fake_unfold_to__ANONYMOUS_s810_2ba == ln_2c8);
        assertPost@ANONYMOUS(b_1c5_s1719, error_flag__ANONYMOUS_s1427_2b8);
        fake_unfold__ANONYMOUS_s809_2b9 = l_2c6;
        fake_unfold_to__ANONYMOUS_s810_2ba = ln_2c8;
        assert ((ln_2c8 >= 0) && (ln_2c8 < 4)); //lseg_header.skh:691: Either null pointer or Array out of bounds
        active__ANONYMOUS_s808_2b7[ln_2c8] = 1;
        assert ((ln_2c8 >= 0) && (ln_2c8 < 4)); //lseg_header.skh:692: Either null pointer or Array out of bounds
        symbolic__ANONYMOUS_s815_2c2[ln_2c8] = 1;
        assert ((l_2c6 >= 0) && (l_2c6 < 4)); //lseg_header.skh:693: Either null pointer or Array out of bounds
        next__ANONYMOUS_s814_2bf[l_2c6] = ln_2c8;
      }
      assert ((l_2c6 >= 0) && (l_2c6 < 4)); //lseg_header.skh:696: Either null pointer or Array out of bounds
      symbolic__ANONYMOUS_s815_2c2[l_2c6] = 0;
      bit _out_s221_2cd;
      sll(l_2c6, ts__ANONYMOUS_s816_2c3, _out_s221_2cd);
      bit _out_s223_2ce;
      sll_comp@ANONYMOUS(l_2c6, _out_s223_2ce, active__ANONYMOUS_s808_2b7, history__ANONYMOUS_s1143_2bb, key__ANONYMOUS_s812_2bd, next__ANONYMOUS_s814_2bf, p_history__ANONYMOUS_s1124_2c0, supernext__ANONYMOUS_s1338_2c1, symbolic__ANONYMOUS_s815_2c2, ts__ANONYMOUS_s816_2c3);
      bit b_376_s1720;
      b_376_s1720 = _out_s221_2cd == _out_s223_2ce;
      assumePre@ANONYMOUS(b_376_s1720, error_flag__ANONYMOUS_s1427_2b8);
      int _out_s225_2cf;
      len(l_2c6, ts__ANONYMOUS_s816_2c3, _out_s225_2cf);
      int _out_s227_2d0;
      len_comp@ANONYMOUS(l_2c6, _out_s227_2d0, active__ANONYMOUS_s808_2b7, history__ANONYMOUS_s1143_2bb, next__ANONYMOUS_s814_2bf, p_history__ANONYMOUS_s1124_2c0, supernext__ANONYMOUS_s1338_2c1, symbolic__ANONYMOUS_s815_2c2, ts__ANONYMOUS_s816_2c3);
      bit b_376_s1721;
      b_376_s1721 = _out_s225_2cf == _out_s227_2d0;
      assumePre@ANONYMOUS(b_376_s1721, error_flag__ANONYMOUS_s1427_2b8);
      int _out_s229_2d1;
      min(l_2c6, ts__ANONYMOUS_s816_2c3, _out_s229_2d1);
      int _out_s231_2d2;
      min_comp@ANONYMOUS(l_2c6, _out_s231_2d2, active__ANONYMOUS_s808_2b7, history__ANONYMOUS_s1143_2bb, key__ANONYMOUS_s812_2bd, next__ANONYMOUS_s814_2bf, p_history__ANONYMOUS_s1124_2c0, supernext__ANONYMOUS_s1338_2c1, symbolic__ANONYMOUS_s815_2c2, ts__ANONYMOUS_s816_2c3);
      bit b_376_s1722;
      b_376_s1722 = _out_s229_2d1 == _out_s231_2d2;
      assumePre@ANONYMOUS(b_376_s1722, error_flag__ANONYMOUS_s1427_2b8);
      int _out_s233_2d3;
      max(l_2c6, ts__ANONYMOUS_s816_2c3, _out_s233_2d3);
      int _out_s235_2d4;
      max_comp@ANONYMOUS(l_2c6, _out_s235_2d4, active__ANONYMOUS_s808_2b7, history__ANONYMOUS_s1143_2bb, key__ANONYMOUS_s812_2bd, next__ANONYMOUS_s814_2bf, p_history__ANONYMOUS_s1124_2c0, supernext__ANONYMOUS_s1338_2c1, symbolic__ANONYMOUS_s815_2c2, ts__ANONYMOUS_s816_2c3);
      bit b_376_s1723;
      b_376_s1723 = _out_s233_2d3 == _out_s235_2d4;
      assumePre@ANONYMOUS(b_376_s1723, error_flag__ANONYMOUS_s1427_2b8);
      if(test_2c7 > 0)/*lseg_header.skh:704*/
      {
        assert ((ln_2c8 >= 0) && (ln_2c8 < 4)); //lseg_header.skh:705: Either null pointer or Array out of bounds
        active__ANONYMOUS_s808_2b7[ln_2c8] = 0;
      }
      assert ((l_2c6 >= 0) && (l_2c6 < 4)); //lseg_header.skh:707: Either null pointer or Array out of bounds
      symbolic__ANONYMOUS_s815_2c2[l_2c6] = 1;
      assert ((l_2c6 >= 0) && (l_2c6 < 4)); //lseg_header.skh:709: Array out of bounds
      assert ((choice2_2c5 >= 0) && (choice2_2c5 < 2)); //lseg_header.skh:709: Array out of bounds
      _out_2b6 = (key__ANONYMOUS_s812_2bd[l_2c6]) < (intvars__ANONYMOUS_s811_2bc[choice2_2c5]);
      return;
    }
  }
}
/*lseg_header.skh:20*/

uninterp void len (int l, int t, ref int _out)/*lseg_header.skh:20*/
/*lseg_header.skh:129*/

void len_comp (int l_26d, ref int _out_26e, ref global bit[4] active__ANONYMOUS_s1516_26f, ref global bit[4 * 4] history__ANONYMOUS_s1517_270, ref global int[4] next__ANONYMOUS_s1518_271, ref global bit[4 * 4] p_history__ANONYMOUS_s1524_272, ref global int[4] supernext__ANONYMOUS_s1519_273, ref global bit[4] symbolic__ANONYMOUS_s1520_274, ref global int ts__ANONYMOUS_s1521_275)/*lseg_header.skh:129*/
{
  {
    {
      _out_26e = 0;
      int _out_s149_276;
      len_recursive@ANONYMOUS(l_26d, 0, 3, _out_s149_276, active__ANONYMOUS_s1516_26f, history__ANONYMOUS_s1517_270, next__ANONYMOUS_s1518_271, p_history__ANONYMOUS_s1524_272, supernext__ANONYMOUS_s1519_273, symbolic__ANONYMOUS_s1520_274, ts__ANONYMOUS_s1521_275);
      _out_26e = _out_s149_276;
      return;
    }
  }
}
/*lseg_header.skh:158*/

void len_history (int l_3ee, int ts_0_3ef, ref int _out_3f0, ref global bit[4 * 4] history__ANONYMOUS_s868_3f1, ref global int ts__ANONYMOUS_s869_3f2)/*lseg_header.skh:158*/
{
  {
    {
      _out_3f0 = 0;
      int ts_3f3;
      ts_3f3 = ts_0_3ef;
      bit __sa4_3f4;
      bit _pac_sc_s1863;
      {
        _pac_sc_s1863 = ts_3f3 > 0;
        if(_pac_sc_s1863)/*lseg_header.skh:159*/
        {
          assert ((l_3ee >= 0) && (l_3ee < 4)); //lseg_header.skh:159: Array out of bounds
          assert ((ts_3f3 >= 0) && (ts_3f3 < 4)); //lseg_header.skh:159: Array out of bounds
          _pac_sc_s1863 = history__ANONYMOUS_s868_3f1[(4 * l_3ee) + ts_3f3];
        }
      }
      __sa4_3f4 = _pac_sc_s1863;
      while(__sa4_3f4)
      {
        int uo_s27_3f6;
        uo_s27_3f6 = ts_3f3;
        ts_3f3 = ts_3f3 - 1;
        uo_s27_3f6;
        bit _pac_sc_s1864;
        {
          _pac_sc_s1864 = ts_3f3 > 0;
          if(_pac_sc_s1864)/*lseg_header.skh:159*/
          {
            assert ((l_3ee >= 0) && (l_3ee < 4)); //lseg_header.skh:159: Array out of bounds
            assert ((ts_3f3 >= 0) && (ts_3f3 < 4)); //lseg_header.skh:159: Array out of bounds
            _pac_sc_s1864 = history__ANONYMOUS_s868_3f1[(4 * l_3ee) + ts_3f3];
          }
        }
        __sa4_3f4 = _pac_sc_s1864;
      }
      int _out_s163_3f7;
      len(l_3ee, ts_3f3, _out_s163_3f7);
      _out_3f0 = _out_s163_3f7;
      return;
    }
  }
}
/*lseg_header.skh:134*/

void len_recursive (int l1_38f, int l2_390, int bnd_391, ref int _out_392, ref global bit[4] active__ANONYMOUS_s918_393, ref global bit[4 * 4] history__ANONYMOUS_s1441_394, ref global int[4] next__ANONYMOUS_s919_395, ref global bit[4 * 4] p_history__ANONYMOUS_s1622_396, ref global int[4] supernext__ANONYMOUS_s920_397, ref global bit[4] symbolic__ANONYMOUS_s921_398, ref global int ts__ANONYMOUS_s922_399)/*lseg_header.skh:134*/
{
  {
    {
      _out_392 = 0;
      if((((l1_38f < 0) || (l1_38f >= 4)) || (l2_390 < 0)) || (l2_390 >= 4))/*lseg_header.skh:135*/
      {
        _out_392 = -1;
        return;
      }
      else
      {
        bit _pac_sc_s1840;
        {
          assert ((l1_38f >= 0) && (l1_38f < 4)); //lseg_header.skh:136: Array out of bounds
          _pac_sc_s1840 = !(active__ANONYMOUS_s918_393[l1_38f]);
          if(!(_pac_sc_s1840))/*lseg_header.skh:136*/
          {
            assert ((l2_390 >= 0) && (l2_390 < 4)); //lseg_header.skh:136: Array out of bounds
            _pac_sc_s1840 = !(active__ANONYMOUS_s918_393[l2_390]);
          }
        }
        if(_pac_sc_s1840)/*lseg_header.skh:136*/
        {
          _out_392 = -1;
          return;
        }
        else
        {
          if(l1_38f == l2_390)/*lseg_header.skh:138*/
          {
            bit _pac_sc_s1841;
            {
              _pac_sc_s1841 = l1_38f == 0;
              if(!(_pac_sc_s1841))/*lseg_header.skh:138*/
              {
                assert ((l1_38f >= 0) && (l1_38f < 4)); //lseg_header.skh:138: Array out of bounds
                _pac_sc_s1841 = (next__ANONYMOUS_s919_395[l1_38f]) != l1_38f;
              }
            }
            _out_392 = (_pac_sc_s1841 ? 0 : 1);
            return;
          }
          else
          {
            if(l1_38f == 0)/*lseg_header.skh:140*/
            {
              _out_392 = -1;
              return;
            }
            else
            {
              if(bnd_391 < 0)/*lseg_header.skh:141*/
              {
                _out_392 = -1;
                return;
              }
              else
              {
                assert ((l1_38f >= 0) && (l1_38f < 4)); //lseg_header.skh:143: Array out of bounds
                if(symbolic__ANONYMOUS_s921_398[l1_38f])/*lseg_header.skh:143*/
                {
                  if(l2_390 == 0)/*lseg_header.skh:144*/
                  {
                    int _out_s151_39a;
                    len_history@ANONYMOUS(l1_38f, ts__ANONYMOUS_s922_399, _out_s151_39a, history__ANONYMOUS_s1441_394, ts__ANONYMOUS_s922_399);
                    _out_392 = _out_s151_39a;
                    return;
                  }
                  else
                  {
                    _out_392 = -1;
                    return;
                  }
                }
                else
                {
                  assert ((l1_38f >= 0) && (l1_38f < 4)); //lseg_header.skh:148: Array out of bounds
                  if(l2_390 == (next__ANONYMOUS_s919_395[l1_38f]))/*lseg_header.skh:148*/
                  {
                    bit _pac_sc_s1842;
                    {
                      _pac_sc_s1842 = l2_390 == 0;
                      if(!(_pac_sc_s1842))/*lseg_header.skh:148*/
                      {
                        assert ((l2_390 >= 0) && (l2_390 < 4)); //lseg_header.skh:148: Array out of bounds
                        _pac_sc_s1842 = (next__ANONYMOUS_s919_395[l2_390]) != l2_390;
                      }
                    }
                    _out_392 = (_pac_sc_s1842 ? 1 : 2);
                    return;
                  }
                  else
                  {
                    assert ((l1_38f >= 0) && (l1_38f < 4)); //lseg_header.skh:149: Array out of bounds
                    if(0 == (next__ANONYMOUS_s919_395[l1_38f]))/*lseg_header.skh:149*/
                    {
                      _out_392 = -1;
                      return;
                    }
                    else
                    {
                      bit _pac_sc_s1843;
                      {
                        assert ((l1_38f >= 0) && (l1_38f < 4)); //lseg_header.skh:150: Array out of bounds
                        _pac_sc_s1843 = 0 < (next__ANONYMOUS_s919_395[l1_38f]);
                        if(_pac_sc_s1843)/*lseg_header.skh:150*/
                        {
                          assert ((l1_38f >= 0) && (l1_38f < 4)); //lseg_header.skh:150: Array out of bounds
                          _pac_sc_s1843 = (next__ANONYMOUS_s919_395[l1_38f]) < 4;
                        }
                      }
                      if(_pac_sc_s1843)/*lseg_header.skh:150*/
                      {
                        int _out_s153_39b;
                        int l1_38f_s1753;
                        assert ((l1_38f >= 0) && (l1_38f < 4)); //lseg_header.skh:150: Array out of bounds
                        l1_38f_s1753 = next__ANONYMOUS_s919_395[l1_38f];
                        int bnd_391_s1754;
                        bnd_391_s1754 = bnd_391 - 1;
                        len_recursive@ANONYMOUS(l1_38f_s1753, l2_390, bnd_391_s1754, _out_s153_39b, active__ANONYMOUS_s918_393, history__ANONYMOUS_s1441_394, next__ANONYMOUS_s919_395, p_history__ANONYMOUS_s1622_396, supernext__ANONYMOUS_s920_397, symbolic__ANONYMOUS_s921_398, ts__ANONYMOUS_s922_399);
                        _out_392 = _out_s153_39b + 1;
                        return;
                      }
                      else
                      {
                        assert ((l1_38f >= 0) && (l1_38f < 4)); //lseg_header.skh:151: Array out of bounds
                        if(l2_390 == (supernext__ANONYMOUS_s920_397[l1_38f]))/*lseg_header.skh:151*/
                        {
                          int _out_s155_39c;
                          lenseg_history@ANONYMOUS(l1_38f, ts__ANONYMOUS_s922_399, _out_s155_39c, p_history__ANONYMOUS_s1622_396, ts__ANONYMOUS_s922_399);
                          _out_392 = _out_s155_39c;
                          return;
                        }
                        else
                        {
                          assert ((l1_38f >= 0) && (l1_38f < 4)); //lseg_header.skh:152: Array out of bounds
                          if(0 == (supernext__ANONYMOUS_s920_397[l1_38f]))/*lseg_header.skh:152*/
                          {
                            _out_392 = -1;
                            return;
                          }
                          else
                          {
                            bit _pac_sc_s1844;
                            {
                              assert ((l1_38f >= 0) && (l1_38f < 4)); //lseg_header.skh:153: Array out of bounds
                              _pac_sc_s1844 = 0 < (supernext__ANONYMOUS_s920_397[l1_38f]);
                              if(_pac_sc_s1844)/*lseg_header.skh:153*/
                              {
                                assert ((l1_38f >= 0) && (l1_38f < 4)); //lseg_header.skh:153: Array out of bounds
                                _pac_sc_s1844 = (supernext__ANONYMOUS_s920_397[l1_38f]) < 4;
                              }
                            }
                            if(_pac_sc_s1844)/*lseg_header.skh:153*/
                            {
                              int _out_s157_39d;
                              lenseg_history@ANONYMOUS(l1_38f, ts__ANONYMOUS_s922_399, _out_s157_39d, p_history__ANONYMOUS_s1622_396, ts__ANONYMOUS_s922_399);
                              int _out_s159_39e;
                              int l1_38f_s1755;
                              assert ((l1_38f >= 0) && (l1_38f < 4)); //lseg_header.skh:153: Array out of bounds
                              l1_38f_s1755 = supernext__ANONYMOUS_s920_397[l1_38f];
                              int bnd_391_s1756;
                              bnd_391_s1756 = bnd_391 - 1;
                              len_recursive@ANONYMOUS(l1_38f_s1755, l2_390, bnd_391_s1756, _out_s159_39e, active__ANONYMOUS_s918_393, history__ANONYMOUS_s1441_394, next__ANONYMOUS_s919_395, p_history__ANONYMOUS_s1622_396, supernext__ANONYMOUS_s920_397, symbolic__ANONYMOUS_s921_398, ts__ANONYMOUS_s922_399);
                              _out_392 = _out_s157_39d + _out_s159_39e;
                              return;
                            }
                            else
                            {
                              _out_392 = -1;
                              return;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
/*lseg_header.skh:27*/

uninterp void lenseg (int l1, int t, ref int _out)/*lseg_header.skh:27*/
/*lseg_header.skh:163*/

void lenseg_comp (int l1_28b, int l2_28c, ref int _out_28d, ref global bit[4] active__ANONYMOUS_s1503_28e, ref global bit[4 * 4] history__ANONYMOUS_s1504_28f, ref global int[4] next__ANONYMOUS_s1505_290, ref global bit[4 * 4] p_history__ANONYMOUS_s1477_291, ref global int[4] supernext__ANONYMOUS_s1506_292, ref global bit[4] symbolic__ANONYMOUS_s1507_293, ref global int ts__ANONYMOUS_s1478_294)/*lseg_header.skh:163*/
{
  {
    {
      _out_28d = 0;
      int _out_s265_295;
      len_recursive@ANONYMOUS(l1_28b, l2_28c, 3, _out_s265_295, active__ANONYMOUS_s1503_28e, history__ANONYMOUS_s1504_28f, next__ANONYMOUS_s1505_290, p_history__ANONYMOUS_s1477_291, supernext__ANONYMOUS_s1506_292, symbolic__ANONYMOUS_s1507_293, ts__ANONYMOUS_s1478_294);
      _out_28d = _out_s265_295;
      return;
    }
  }
}
/*lseg_header.skh:168*/

void lenseg_history (int l1_3f8, int ts_0_3f9, ref int _out_3fa, ref global bit[4 * 4] p_history__ANONYMOUS_s872_3fb, ref global int ts__ANONYMOUS_s873_3fc)/*lseg_header.skh:168*/
{
  {
    {
      _out_3fa = 0;
      int ts_3fd;
      ts_3fd = ts_0_3f9;
      bit __sa5_3fe;
      bit _pac_sc_s1865;
      {
        _pac_sc_s1865 = ts_3fd > 0;
        if(_pac_sc_s1865)/*lseg_header.skh:169*/
        {
          assert ((l1_3f8 >= 0) && (l1_3f8 < 4)); //lseg_header.skh:169: Array out of bounds
          assert ((ts_3fd >= 0) && (ts_3fd < 4)); //lseg_header.skh:169: Array out of bounds
          _pac_sc_s1865 = p_history__ANONYMOUS_s872_3fb[(4 * l1_3f8) + ts_3fd];
        }
      }
      __sa5_3fe = _pac_sc_s1865;
      while(__sa5_3fe)
      {
        int uo_s26_400;
        uo_s26_400 = ts_3fd;
        ts_3fd = ts_3fd - 1;
        uo_s26_400;
        bit _pac_sc_s1866;
        {
          _pac_sc_s1866 = ts_3fd > 0;
          if(_pac_sc_s1866)/*lseg_header.skh:169*/
          {
            assert ((l1_3f8 >= 0) && (l1_3f8 < 4)); //lseg_header.skh:169: Array out of bounds
            assert ((ts_3fd >= 0) && (ts_3fd < 4)); //lseg_header.skh:169: Array out of bounds
            _pac_sc_s1866 = p_history__ANONYMOUS_s872_3fb[(4 * l1_3f8) + ts_3fd];
          }
        }
        __sa5_3fe = _pac_sc_s1866;
      }
      int _out_s161_401;
      lenseg(l1_3f8, ts_3fd, _out_s161_401);
      _out_3fa = _out_s161_401;
      return;
    }
  }
}
/*local/test.sk:45*/

void list_find_min_rec0 (int[2] llocvars_0_35, int[2] lintvars_1_36, int[3] lnext_2_37, int[3] lsupernext_3_38, int[3] lkey_4_39, bit[3] lsymbolic_5_3a, bit[3] lactive_6_3b, int ret_value_7_3c, bit[3] new_symbolic_8_3d, int[3] new_next_9_3e, int[3] new_supernext_10_3f, int[3] new_key_11_40, ref global bit[4] active__ANONYMOUS_s969_41, ref global bit error_flag__ANONYMOUS_s1078_42, ref global int fake_unfold__ANONYMOUS_s999_43, ref global int fake_unfold_to__ANONYMOUS_s1617_44, ref global bit[4 * 4] history__ANONYMOUS_s977_45, ref global int[2] intvars__ANONYMOUS_s1131_46, ref global int[4] key__ANONYMOUS_s1108_47, ref global int[4] left__ANONYMOUS_s1000_48, ref global int[3] locvars__ANONYMOUS_s1001_49, ref global int malloc_budget__ANONYMOUS_s1149_4a, ref global int newer_min__ANONYMOUS_s1632_4b, ref global int newer_sll__ANONYMOUS_s1633_4c, ref global int[4] next__ANONYMOUS_s970_4d, ref global int old_min__ANONYMOUS_s833_4e, ref global int old_sll__ANONYMOUS_s834_4f, ref global bit[4 * 4] p_history__ANONYMOUS_s1079_50, ref global int ranking__ANONYMOUS_s1101_51, ref global int ret__ANONYMOUS_s835_52, ref global int[4] right__ANONYMOUS_s1002_53, ref global int[4] supernext__ANONYMOUS_s971_54, ref global bit[4] symbolic__ANONYMOUS_s972_55, ref global int ts__ANONYMOUS_s973_56)/*local/test.sk:45*/
{
  {
    {
      int[3] new_key_57;
      new_key_57 = new_key_11_40;
      int[3] new_supernext_58;
      new_supernext_58 = new_supernext_10_3f;
      int[3] new_next_59;
      new_next_59 = new_next_9_3e;
      bit[3] new_symbolic_5a;
      new_symbolic_5a = new_symbolic_8_3d;
      int ret_value_5b;
      ret_value_5b = ret_value_7_3c;
      bit[3] lactive_5c;
      lactive_5c = lactive_6_3b;
      bit[3] lsymbolic_5d;
      lsymbolic_5d = lsymbolic_5_3a;
      int[3] lkey_5e;
      lkey_5e = lkey_4_39;
      int[3] lsupernext_5f;
      lsupernext_5f = lsupernext_3_38;
      int[3] lnext_60;
      lnext_60 = lnext_2_37;
      int[2] lintvars_61;
      lintvars_61 = lintvars_1_36;
      int[2] llocvars_62;
      llocvars_62 = llocvars_0_35;
      int[3] lleft_63;
      {
        for(int __sa1898 = 0; __sa1898 < 0; __sa1898 = __sa1898 + 1)/*Canonical*/
        {
          lleft_63[__sa1898] = {}[__sa1898];
        }
        for(int __sa1899 = 0; __sa1899 < 3; __sa1899 = __sa1899 + 1)/*Canonical*/
        {
          lleft_63[__sa1899] = '\0';
        }
      }
      int[3] lright_64;
      {
        for(int __sa1900 = 0; __sa1900 < 0; __sa1900 = __sa1900 + 1)/*Canonical*/
        {
          lright_64[__sa1900] = {}[__sa1900];
        }
        for(int __sa1901 = 0; __sa1901 < 3; __sa1901 = __sa1901 + 1)/*Canonical*/
        {
          lright_64[__sa1901] = '\0';
        }
      }
      init@ANONYMOUS(llocvars_62, lintvars_61, lnext_60, lsupernext_5f, lleft_63, lright_64, lkey_5e, lsymbolic_5d, lactive_5c, active__ANONYMOUS_s969_41, intvars__ANONYMOUS_s1131_46, key__ANONYMOUS_s1108_47, left__ANONYMOUS_s1000_48, locvars__ANONYMOUS_s1001_49, next__ANONYMOUS_s970_4d, right__ANONYMOUS_s1002_53, supernext__ANONYMOUS_s971_54, symbolic__ANONYMOUS_s972_55);
      bit _pac_sc_s52_65;
      bit _pac_sc_s52_s54_66;
      basic_assumptions@ANONYMOUS(_pac_sc_s52_s54_66, active__ANONYMOUS_s969_41, key__ANONYMOUS_s1108_47, left__ANONYMOUS_s1000_48, locvars__ANONYMOUS_s1001_49, next__ANONYMOUS_s970_4d, right__ANONYMOUS_s1002_53, supernext__ANONYMOUS_s971_54, symbolic__ANONYMOUS_s972_55);
      _pac_sc_s52_65 = _pac_sc_s52_s54_66;
      if(_pac_sc_s52_65)/*local/test.sk:51*/
      {
        bit _pac_sc_s52_s56_67;
        basic_axioms@ANONYMOUS(_pac_sc_s52_s56_67, supernext__ANONYMOUS_s971_54, ts__ANONYMOUS_s973_56);
        _pac_sc_s52_65 = _pac_sc_s52_s56_67;
      }
      assume (_pac_sc_s52_65): "Assume at local/test.sk:51"; //Assume at local/test.sk:51
      bit _out_s58_68;
      pre_cond_list_find_min_rec@ANONYMOUS(2, _out_s58_68, active__ANONYMOUS_s969_41, locvars__ANONYMOUS_s1001_49, next__ANONYMOUS_s970_4d, supernext__ANONYMOUS_s971_54, symbolic__ANONYMOUS_s972_55);
      assume (_out_s58_68): "Assume at local/test.sk:53"; //Assume at local/test.sk:53
      snapshot_list_find_min_rec@ANONYMOUS(2, old_sll__ANONYMOUS_s834_4f, old_min__ANONYMOUS_s833_4e, active__ANONYMOUS_s969_41, history__ANONYMOUS_s977_45, key__ANONYMOUS_s1108_47, locvars__ANONYMOUS_s1001_49, next__ANONYMOUS_s970_4d, p_history__ANONYMOUS_s1079_50, supernext__ANONYMOUS_s971_54, symbolic__ANONYMOUS_s972_55, ts__ANONYMOUS_s973_56);
      ranking_snapshot@ANONYMOUS(1, 2, 1, active__ANONYMOUS_s969_41, history__ANONYMOUS_s977_45, key__ANONYMOUS_s1108_47, locvars__ANONYMOUS_s1001_49, next__ANONYMOUS_s970_4d, p_history__ANONYMOUS_s1079_50, ranking__ANONYMOUS_s1101_51, supernext__ANONYMOUS_s971_54, symbolic__ANONYMOUS_s972_55, ts__ANONYMOUS_s973_56);
      bit _out_s60_69;
      basic_cond0@ANONYMOUS(2, 2, _out_s60_69, active__ANONYMOUS_s969_41, error_flag__ANONYMOUS_s1078_42, fake_unfold__ANONYMOUS_s999_43, fake_unfold_to__ANONYMOUS_s1617_44, history__ANONYMOUS_s977_45, intvars__ANONYMOUS_s1131_46, key__ANONYMOUS_s1108_47, locvars__ANONYMOUS_s1001_49, next__ANONYMOUS_s970_4d, p_history__ANONYMOUS_s1079_50, supernext__ANONYMOUS_s971_54, symbolic__ANONYMOUS_s972_55, ts__ANONYMOUS_s973_56);
      if(_out_s60_69)/*local/test.sk:59*/
      {
        statement0@ANONYMOUS(1, 2, 1, 0, active__ANONYMOUS_s969_41, error_flag__ANONYMOUS_s1078_42, fake_unfold__ANONYMOUS_s999_43, history__ANONYMOUS_s977_45, intvars__ANONYMOUS_s1131_46, key__ANONYMOUS_s1108_47, left__ANONYMOUS_s1000_48, locvars__ANONYMOUS_s1001_49, malloc_budget__ANONYMOUS_s1149_4a, next__ANONYMOUS_s970_4d, p_history__ANONYMOUS_s1079_50, right__ANONYMOUS_s1002_53, supernext__ANONYMOUS_s971_54, symbolic__ANONYMOUS_s972_55, ts__ANONYMOUS_s973_56);
        statement1@ANONYMOUS(1, 2, 1, 0, active__ANONYMOUS_s969_41, error_flag__ANONYMOUS_s1078_42, fake_unfold__ANONYMOUS_s999_43, history__ANONYMOUS_s977_45, intvars__ANONYMOUS_s1131_46, key__ANONYMOUS_s1108_47, left__ANONYMOUS_s1000_48, locvars__ANONYMOUS_s1001_49, malloc_budget__ANONYMOUS_s1149_4a, next__ANONYMOUS_s970_4d, p_history__ANONYMOUS_s1079_50, right__ANONYMOUS_s1002_53, supernext__ANONYMOUS_s971_54, symbolic__ANONYMOUS_s972_55, ts__ANONYMOUS_s973_56);
      }
      else
      {
        statement2@ANONYMOUS(1, 2, 1, 0, active__ANONYMOUS_s969_41, error_flag__ANONYMOUS_s1078_42, fake_unfold__ANONYMOUS_s999_43, history__ANONYMOUS_s977_45, intvars__ANONYMOUS_s1131_46, key__ANONYMOUS_s1108_47, left__ANONYMOUS_s1000_48, locvars__ANONYMOUS_s1001_49, malloc_budget__ANONYMOUS_s1149_4a, next__ANONYMOUS_s970_4d, p_history__ANONYMOUS_s1079_50, right__ANONYMOUS_s1002_53, supernext__ANONYMOUS_s971_54, symbolic__ANONYMOUS_s972_55, ts__ANONYMOUS_s973_56);
        int rank_var_for_call_0_6a;
        int rank_var_for_call_0_s62_6b;
        loc_id0@ANONYMOUS(2, rank_var_for_call_0_s62_6b);
        rank_var_for_call_0_6a = rank_var_for_call_0_s62_6b;
        bit _out_s64_6c;
        ranking_decreases@ANONYMOUS(1, rank_var_for_call_0_6a, 1, _out_s64_6c, active__ANONYMOUS_s969_41, history__ANONYMOUS_s977_45, key__ANONYMOUS_s1108_47, locvars__ANONYMOUS_s1001_49, next__ANONYMOUS_s970_4d, p_history__ANONYMOUS_s1079_50, ranking__ANONYMOUS_s1101_51, supernext__ANONYMOUS_s971_54, symbolic__ANONYMOUS_s972_55, ts__ANONYMOUS_s973_56);
        assertPost@ANONYMOUS(_out_s64_6c, error_flag__ANONYMOUS_s1078_42);
        int _out_s66_6d;
        int_id0@ANONYMOUS(2, _out_s66_6d);
        rec_list_find_min_rec@ANONYMOUS(rank_var_for_call_0_6a, _out_s66_6d, ret_value_5b, new_symbolic_5a, new_next_59, new_supernext_58, new_key_57, active__ANONYMOUS_s969_41, error_flag__ANONYMOUS_s1078_42, history__ANONYMOUS_s977_45, intvars__ANONYMOUS_s1131_46, key__ANONYMOUS_s1108_47, locvars__ANONYMOUS_s1001_49, newer_min__ANONYMOUS_s1632_4b, newer_sll__ANONYMOUS_s1633_4c, next__ANONYMOUS_s970_4d, p_history__ANONYMOUS_s1079_50, supernext__ANONYMOUS_s971_54, symbolic__ANONYMOUS_s972_55, ts__ANONYMOUS_s973_56);
        bit _out_s68_6e;
        basic_cond1@ANONYMOUS(2, 2, _out_s68_6e, active__ANONYMOUS_s969_41, error_flag__ANONYMOUS_s1078_42, fake_unfold__ANONYMOUS_s999_43, fake_unfold_to__ANONYMOUS_s1617_44, history__ANONYMOUS_s977_45, intvars__ANONYMOUS_s1131_46, key__ANONYMOUS_s1108_47, locvars__ANONYMOUS_s1001_49, next__ANONYMOUS_s970_4d, p_history__ANONYMOUS_s1079_50, supernext__ANONYMOUS_s971_54, symbolic__ANONYMOUS_s972_55, ts__ANONYMOUS_s973_56);
        if(_out_s68_6e)/*local/test.sk:70*/
        {
          statement3@ANONYMOUS(1, 2, 1, 0, active__ANONYMOUS_s969_41, error_flag__ANONYMOUS_s1078_42, fake_unfold__ANONYMOUS_s999_43, history__ANONYMOUS_s977_45, intvars__ANONYMOUS_s1131_46, key__ANONYMOUS_s1108_47, left__ANONYMOUS_s1000_48, locvars__ANONYMOUS_s1001_49, malloc_budget__ANONYMOUS_s1149_4a, next__ANONYMOUS_s970_4d, p_history__ANONYMOUS_s1079_50, right__ANONYMOUS_s1002_53, supernext__ANONYMOUS_s971_54, symbolic__ANONYMOUS_s972_55, ts__ANONYMOUS_s973_56);
        }
      }
      ret_int@ANONYMOUS(0, ret__ANONYMOUS_s835_52);
      bit _out_s70_6f;
      post_cond_list_find_min_rec@ANONYMOUS(ret__ANONYMOUS_s835_52, 2, old_min__ANONYMOUS_s833_4e, _out_s70_6f, active__ANONYMOUS_s969_41, intvars__ANONYMOUS_s1131_46, locvars__ANONYMOUS_s1001_49, next__ANONYMOUS_s970_4d, supernext__ANONYMOUS_s971_54, symbolic__ANONYMOUS_s972_55);
      assertPost@ANONYMOUS(_out_s70_6f, error_flag__ANONYMOUS_s1078_42);
    }
  }
}
/*local/test.sk:45*/

void list_find_min_rec__Wrapper (int[2] llocvars_22, int[2] lintvars_23, int[3] lnext_24, int[3] lsupernext_25, int[3] lkey_26, bit[3] lsymbolic_27, bit[3] lactive_28, int ret_value_29, bit[3] new_symbolic_2a, int[3] new_next_2b, int[3] new_supernext_2c, int[3] new_key_2d)  implements list_find_min_rec__WrapperNospec/*local/test.sk:45*/
{
  {
    {
      global int ts__ANONYMOUS_s1044_c;
      glblInit_ts__ANONYMOUS_s1683@ANONYMOUS(ts__ANONYMOUS_s1044_c);
      global bit[4] symbolic__ANONYMOUS_s1043_d;
      global int[4] supernext__ANONYMOUS_s1133_e;
      global int[4] right__ANONYMOUS_s1165_f;
      global int ret__ANONYMOUS_s1189_10;
      glblInit_ret__ANONYMOUS_s1681@ANONYMOUS(ret__ANONYMOUS_s1189_10);
      global int ranking__ANONYMOUS_s1182_11;
      glblInit_ranking__ANONYMOUS_s1679@ANONYMOUS(ranking__ANONYMOUS_s1182_11);
      global bit[4 * 4] p_history__ANONYMOUS_s1181_12;
      global int old_sll__ANONYMOUS_s1579_13;
      global int old_min__ANONYMOUS_s1578_14;
      global int[4] next__ANONYMOUS_s1132_15;
      global int newer_sll__ANONYMOUS_s1621_16;
      global int newer_min__ANONYMOUS_s1620_17;
      global int malloc_budget__ANONYMOUS_s1279_18;
      glblInit_malloc_budget__ANONYMOUS_s1677@ANONYMOUS(malloc_budget__ANONYMOUS_s1279_18);
      global int[3] locvars__ANONYMOUS_s1042_19;
      global int[4] left__ANONYMOUS_s1164_1a;
      global int[4] key__ANONYMOUS_s1041_1b;
      global int[2] intvars__ANONYMOUS_s1040_1c;
      global bit[4 * 4] history__ANONYMOUS_s1134_1d;
      global int fake_unfold_to__ANONYMOUS_s1400_1e;
      glblInit_fake_unfold_to__ANONYMOUS_s1675@ANONYMOUS(fake_unfold_to__ANONYMOUS_s1400_1e);
      global int fake_unfold__ANONYMOUS_s1039_1f;
      glblInit_fake_unfold__ANONYMOUS_s1673@ANONYMOUS(fake_unfold__ANONYMOUS_s1039_1f);
      global bit error_flag__ANONYMOUS_s1022_20;
      glblInit_error_flag__ANONYMOUS_s1671@ANONYMOUS(error_flag__ANONYMOUS_s1022_20);
      global bit[4] active__ANONYMOUS_s1038_21;
      list_find_min_rec0@ANONYMOUS(llocvars_22, lintvars_23, lnext_24, lsupernext_25, lkey_26, lsymbolic_27, lactive_28, ret_value_29, new_symbolic_2a, new_next_2b, new_supernext_2c, new_key_2d, active__ANONYMOUS_s1038_21, error_flag__ANONYMOUS_s1022_20, fake_unfold__ANONYMOUS_s1039_1f, fake_unfold_to__ANONYMOUS_s1400_1e, history__ANONYMOUS_s1134_1d, intvars__ANONYMOUS_s1040_1c, key__ANONYMOUS_s1041_1b, left__ANONYMOUS_s1164_1a, locvars__ANONYMOUS_s1042_19, malloc_budget__ANONYMOUS_s1279_18, newer_min__ANONYMOUS_s1620_17, newer_sll__ANONYMOUS_s1621_16, next__ANONYMOUS_s1132_15, old_min__ANONYMOUS_s1578_14, old_sll__ANONYMOUS_s1579_13, p_history__ANONYMOUS_s1181_12, ranking__ANONYMOUS_s1182_11, ret__ANONYMOUS_s1189_10, right__ANONYMOUS_s1165_f, supernext__ANONYMOUS_s1133_e, symbolic__ANONYMOUS_s1043_d, ts__ANONYMOUS_s1044_c);
    }
  }
}
/*local/test.sk:45*/

void list_find_min_rec__WrapperNospec (int[2] llocvars_22, int[2] lintvars_23, int[3] lnext_24, int[3] lsupernext_25, int[3] lkey_26, bit[3] lsymbolic_27, bit[3] lactive_28, int ret_value_29, bit[3] new_symbolic_2a, int[3] new_next_2b, int[3] new_supernext_2c, int[3] new_key_2d)/*local/test.sk:45*/
{
  {
    {
    }
  }
}
/*aux.skh:141*/

void locMutate (int c1_33b, int c2_33c, int dir_33d, ref global bit[4] active__ANONYMOUS_s768_33e, ref global bit error_flag__ANONYMOUS_s1631_33f, ref global int fake_unfold__ANONYMOUS_s769_340, ref global bit[4 * 4] history__ANONYMOUS_s1469_341, ref global int[4] left__ANONYMOUS_s770_342, ref global int[3] locvars__ANONYMOUS_s771_343, ref global int[4] next__ANONYMOUS_s772_344, ref global bit[4 * 4] p_history__ANONYMOUS_s1470_345, ref global int[4] right__ANONYMOUS_s773_346, ref global bit[4] symbolic__ANONYMOUS_s774_347, ref global int ts__ANONYMOUS_s775_348)/*aux.skh:141*/
{
  {
    {
      int choice_349;
      choice_349 = c1_33b;
      assert (choice_349 > 0); //Assert at aux.skh:144 (1465215996281868162)
      assert (choice_349 < 3); //Assert at aux.skh:145 (-8869836747223197661)
      int choice2_34a;
      choice2_34a = c2_33c;
      assert (choice2_34a >= 0); //Assert at aux.skh:147 (-4899445188661613499)
      assert (choice2_34a < 3); //Assert at aux.skh:148 (-1008809646584950555)
      int df_34b;
      assert ((choice_349 >= 0) && (choice_349 < 3)); //aux.skh:151: Array out of bounds
      df_34b = locvars__ANONYMOUS_s771_343[choice_349];
      bit b_376_s1746;
      b_376_s1746 = df_34b >= 0;
      assumePre@ANONYMOUS(b_376_s1746, error_flag__ANONYMOUS_s1631_33f);
      bit b_376_s1747;
      b_376_s1747 = df_34b < 4;
      assumePre@ANONYMOUS(b_376_s1747, error_flag__ANONYMOUS_s1631_33f);
      if((df_34b < 0) || (df_34b >= 4))/*aux.skh:154*/
      {
        return;
      }
      if(df_34b == 0)/*aux.skh:157*/
      {
        return;
      }
      assert ((df_34b >= 0) && (df_34b < 4)); //aux.skh:158: Array out of bounds
      if(!(active__ANONYMOUS_s768_33e[df_34b]))/*aux.skh:158*/
      {
        return;
      }
      bit _pac_sc_s1826;
      {
        assert ((df_34b >= 0) && (df_34b < 4)); //aux.skh:159: Array out of bounds
        _pac_sc_s1826 = symbolic__ANONYMOUS_s774_347[df_34b];
        if(_pac_sc_s1826)/*aux.skh:159*/
        {
          _pac_sc_s1826 = fake_unfold__ANONYMOUS_s769_340 != df_34b;
        }
      }
      if(_pac_sc_s1826)/*aux.skh:159*/
      {
        return;
      }
      int to_34c;
      assert ((choice2_34a >= 0) && (choice2_34a < 3)); //aux.skh:161: Array out of bounds
      to_34c = locvars__ANONYMOUS_s771_343[choice2_34a];
      bit b_376_s1748;
      b_376_s1748 = to_34c >= 0;
      assumePre@ANONYMOUS(b_376_s1748, error_flag__ANONYMOUS_s1631_33f);
      bit b_376_s1749;
      b_376_s1749 = to_34c < 4;
      assumePre@ANONYMOUS(b_376_s1749, error_flag__ANONYMOUS_s1631_33f);
      bit _pac_sc_s1827;
      {
        _pac_sc_s1827 = to_34c >= 4;
        if(!(_pac_sc_s1827))/*aux.skh:164*/
        {
          assert ((to_34c >= 0) && (to_34c < 4)); //aux.skh:164: Array out of bounds
          _pac_sc_s1827 = !(active__ANONYMOUS_s768_33e[to_34c]);
        }
      }
      if(_pac_sc_s1827)/*aux.skh:164*/
      {
        return;
      }
      int uo_s16_34d;
      uo_s16_34d = ts__ANONYMOUS_s775_348;
      ts__ANONYMOUS_s775_348 = ts__ANONYMOUS_s775_348 + 1;
      uo_s16_34d;
      if(dir_33d == 0)/*aux.skh:167*/
      {
        assert ((df_34b >= 0) && (df_34b < 4)); //aux.skh:167: Either null pointer or Array out of bounds
        next__ANONYMOUS_s772_344[df_34b] = to_34c;
      }
      else
      {
        if(dir_33d == 1)/*aux.skh:168*/
        {
          assert ((df_34b >= 0) && (df_34b < 4)); //aux.skh:168: Either null pointer or Array out of bounds
          left__ANONYMOUS_s770_342[df_34b] = to_34c;
        }
        else
        {
          if(dir_33d == 2)/*aux.skh:169*/
          {
            assert ((df_34b >= 0) && (df_34b < 4)); //aux.skh:169: Either null pointer or Array out of bounds
            right__ANONYMOUS_s773_346[df_34b] = to_34c;
          }
        }
      }
      connect_defs@ANONYMOUS(active__ANONYMOUS_s768_33e, history__ANONYMOUS_s1469_341, next__ANONYMOUS_s772_344, p_history__ANONYMOUS_s1470_345, symbolic__ANONYMOUS_s774_347, ts__ANONYMOUS_s775_348);
    }
  }
}
/*aux.skh:108*/

void locVarAssign (int c1_2f4, int c2_2f5, ref global int[3] locvars__ANONYMOUS_s713_2f6)/*aux.skh:108*/
{
  {
    {
      int choice_2f7;
      choice_2f7 = c1_2f4;
      assert (choice_2f7 > 0); //Assert at aux.skh:111 (5510685524859916480)
      assert (choice_2f7 < 3); //Assert at aux.skh:112 (-6878923042455732956)
      int choice2_2f8;
      choice2_2f8 = c2_2f5;
      assert (choice2_2f8 >= 0); //Assert at aux.skh:115 (3052164954628591320)
      assert (choice2_2f8 < 3); //Assert at aux.skh:116 (1364399462850496639)
      assert ((choice2_2f8 >= 0) && (choice2_2f8 < 3)); //aux.skh:118: Array out of bounds
      assert ((choice_2f7 >= 0) && (choice_2f7 < 3)); //aux.skh:118: Either null pointer or Array out of bounds
      locvars__ANONYMOUS_s713_2f6[choice_2f7] = locvars__ANONYMOUS_s713_2f6[choice2_2f8];
    }
  }
}
/*local/test.sk:98*/

void loc_id0 (int locrange_1aa, ref int _out_1ab)/*local/test.sk:98*/
{
  {
    {
      _out_1ab = 0;
      int _out_s267_1ac;
      int r_1ad;
      r_1ad = locrange_1aa;
      bit _has_out__1ae;
      _has_out__1ae = 0;
      _out_s267_1ac = 0;
      int n_1af;
      n_1af = ??/* H__0_397int:2 */;
      assert ((n_1af >= 0) && (n_1af < r_1ad)); //Assert at aux.skh:57 (-541663708396614913)
      _out_s267_1ac = n_1af + 1;
      _has_out__1ae = 1;
      _out_1ab = _out_s267_1ac;
      return;
    }
  }
}
/*lseg_header.skh:451*/

void locderef2var (int c1_2d5, int c2_2d6, ref global bit[4] active__ANONYMOUS_s800_2d7, ref global bit error_flag__ANONYMOUS_s980_2d8, ref global bit[4 * 4] history__ANONYMOUS_s1424_2d9, ref global int[4] key__ANONYMOUS_s974_2da, ref global int[3] locvars__ANONYMOUS_s801_2db, ref global int malloc_budget__ANONYMOUS_s802_2dc, ref global int[4] next__ANONYMOUS_s803_2dd, ref global bit[4 * 4] p_history__ANONYMOUS_s1091_2de, ref global int[4] supernext__ANONYMOUS_s975_2df, ref global bit[4] symbolic__ANONYMOUS_s804_2e0, ref global int ts__ANONYMOUS_s805_2e1)/*lseg_header.skh:451*/
{
  {
    {
      int choice_2e2;
      choice_2e2 = c1_2d5;
      assert (choice_2e2 > 0); //Assert at lseg_header.skh:454 (-3026533328922806517)
      assert (choice_2e2 < 3); //Assert at lseg_header.skh:455 (5873620620978905829)
      int choice2_2e3;
      choice2_2e3 = c2_2d6;
      assert (choice2_2e3 > 0); //Assert at lseg_header.skh:457 (4718317117049483038)
      assert (choice2_2e3 < 3); //Assert at lseg_header.skh:458 (-1304951464091196225)
      int l_2e4;
      assert ((choice_2e2 >= 0) && (choice_2e2 < 3)); //lseg_header.skh:461: Array out of bounds
      l_2e4 = locvars__ANONYMOUS_s801_2db[choice_2e2];
      bit b_1c5_s1724;
      b_1c5_s1724 = l_2e4 > 0;
      assertPost@ANONYMOUS(b_1c5_s1724, error_flag__ANONYMOUS_s980_2d8);
      bit b_1c5_s1725;
      b_1c5_s1725 = l_2e4 < 4;
      assertPost@ANONYMOUS(b_1c5_s1725, error_flag__ANONYMOUS_s980_2d8);
      if((l_2e4 <= 0) || (l_2e4 >= 4))/*lseg_header.skh:464*/
      {
        return;
      }
      assert ((l_2e4 >= 0) && (l_2e4 < 4)); //lseg_header.skh:465: Array out of bounds
      if(!(active__ANONYMOUS_s800_2d7[l_2e4]))/*lseg_header.skh:465*/
      {
        return;
      }
      int test_2e5;
      assert ((l_2e4 >= 0) && (l_2e4 < 4)); //lseg_header.skh:468: Array out of bounds
      test_2e5 = next__ANONYMOUS_s803_2dd[l_2e4];
      assert ((l_2e4 >= 0) && (l_2e4 < 4)); //lseg_header.skh:470: Array out of bounds
      if(!(symbolic__ANONYMOUS_s804_2e0[l_2e4]))/*lseg_header.skh:470*/
      {
        bit b_376_s1726;
        b_376_s1726 = test_2e5 >= 0;
        assumePre@ANONYMOUS(b_376_s1726, error_flag__ANONYMOUS_s980_2d8);
        bit b_376_s1727;
        b_376_s1727 = test_2e5 < 4;
        assumePre@ANONYMOUS(b_376_s1727, error_flag__ANONYMOUS_s980_2d8);
        if((test_2e5 < 0) || (test_2e5 >= 4))/*lseg_header.skh:473*/
        {
          return;
        }
        assert ((choice2_2e3 >= 0) && (choice2_2e3 < 3)); //lseg_header.skh:476: Either null pointer or Array out of bounds
        locvars__ANONYMOUS_s801_2db[choice2_2e3] = test_2e5;
        return;
      }
      int ln_2e6;
      ln_2e6 = test_2e5;
      if(test_2e5 > 0)/*lseg_header.skh:481*/
      {
        bit b_376_s1728;
        b_376_s1728 = malloc_budget__ANONYMOUS_s802_2dc >= 1;
        assumePre@ANONYMOUS(b_376_s1728, error_flag__ANONYMOUS_s980_2d8);
        if(malloc_budget__ANONYMOUS_s802_2dc < 1)/*lseg_header.skh:483*/
        {
          return;
        }
        int uo_s30_2e7;
        uo_s30_2e7 = malloc_budget__ANONYMOUS_s802_2dc;
        malloc_budget__ANONYMOUS_s802_2dc = malloc_budget__ANONYMOUS_s802_2dc - 1;
        uo_s30_2e7;
        ln_2e6 = 1;
        bit __sa11_2e8;
        bit _pac_sc_s1815;
        {
          _pac_sc_s1815 = 1;
          if(_pac_sc_s1815)/*lseg_header.skh:487*/
          {
            bit _pac_s1816;
            _pac_s1816 = 1;
            assert ((_pac_s1816 >= 0) && (_pac_s1816 < 4)); //lseg_header.skh:487: Array out of bounds
            _pac_sc_s1815 = active__ANONYMOUS_s800_2d7[_pac_s1816];
          }
        }
        __sa11_2e8 = _pac_sc_s1815;
        while(__sa11_2e8)
        {
          int uo_s31_2eb;
          uo_s31_2eb = ln_2e6;
          ln_2e6 = ln_2e6 + 1;
          uo_s31_2eb;
          bit _pac_sc_s1817;
          {
            _pac_sc_s1817 = ln_2e6 < 4;
            if(_pac_sc_s1817)/*lseg_header.skh:487*/
            {
              assert ((ln_2e6 >= 0) && (ln_2e6 < 4)); //lseg_header.skh:487: Array out of bounds
              _pac_sc_s1817 = active__ANONYMOUS_s800_2d7[ln_2e6];
            }
          }
          __sa11_2e8 = _pac_sc_s1817;
        }
        bit b_376_s1729;
        b_376_s1729 = ln_2e6 < 4;
        assumePre@ANONYMOUS(b_376_s1729, error_flag__ANONYMOUS_s980_2d8);
        if(ln_2e6 >= 4)/*lseg_header.skh:491*/
        {
          return;
        }
        assert ((ln_2e6 >= 0) && (ln_2e6 < 4)); //lseg_header.skh:494: Either null pointer or Array out of bounds
        active__ANONYMOUS_s800_2d7[ln_2e6] = 1;
        assert ((ln_2e6 >= 0) && (ln_2e6 < 4)); //lseg_header.skh:495: Either null pointer or Array out of bounds
        symbolic__ANONYMOUS_s804_2e0[ln_2e6] = 1;
        assert ((l_2e4 >= 0) && (l_2e4 < 4)); //lseg_header.skh:496: Either null pointer or Array out of bounds
        next__ANONYMOUS_s803_2dd[l_2e4] = ln_2e6;
      }
      assert ((choice2_2e3 >= 0) && (choice2_2e3 < 3)); //lseg_header.skh:499: Either null pointer or Array out of bounds
      locvars__ANONYMOUS_s801_2db[choice2_2e3] = ln_2e6;
      assert ((l_2e4 >= 0) && (l_2e4 < 4)); //lseg_header.skh:500: Either null pointer or Array out of bounds
      symbolic__ANONYMOUS_s804_2e0[l_2e4] = 0;
      bit _out_s188_2ec;
      sll(l_2e4, ts__ANONYMOUS_s805_2e1, _out_s188_2ec);
      bit _out_s190_2ed;
      sll_comp@ANONYMOUS(l_2e4, _out_s190_2ed, active__ANONYMOUS_s800_2d7, history__ANONYMOUS_s1424_2d9, key__ANONYMOUS_s974_2da, next__ANONYMOUS_s803_2dd, p_history__ANONYMOUS_s1091_2de, supernext__ANONYMOUS_s975_2df, symbolic__ANONYMOUS_s804_2e0, ts__ANONYMOUS_s805_2e1);
      bit b_376_s1730;
      b_376_s1730 = _out_s188_2ec == _out_s190_2ed;
      assumePre@ANONYMOUS(b_376_s1730, error_flag__ANONYMOUS_s980_2d8);
      int _out_s192_2ee;
      len(l_2e4, ts__ANONYMOUS_s805_2e1, _out_s192_2ee);
      int _out_s194_2ef;
      len_comp@ANONYMOUS(l_2e4, _out_s194_2ef, active__ANONYMOUS_s800_2d7, history__ANONYMOUS_s1424_2d9, next__ANONYMOUS_s803_2dd, p_history__ANONYMOUS_s1091_2de, supernext__ANONYMOUS_s975_2df, symbolic__ANONYMOUS_s804_2e0, ts__ANONYMOUS_s805_2e1);
      bit b_376_s1731;
      b_376_s1731 = _out_s192_2ee == _out_s194_2ef;
      assumePre@ANONYMOUS(b_376_s1731, error_flag__ANONYMOUS_s980_2d8);
      int _out_s196_2f0;
      min(l_2e4, ts__ANONYMOUS_s805_2e1, _out_s196_2f0);
      int _out_s198_2f1;
      min_comp@ANONYMOUS(l_2e4, _out_s198_2f1, active__ANONYMOUS_s800_2d7, history__ANONYMOUS_s1424_2d9, key__ANONYMOUS_s974_2da, next__ANONYMOUS_s803_2dd, p_history__ANONYMOUS_s1091_2de, supernext__ANONYMOUS_s975_2df, symbolic__ANONYMOUS_s804_2e0, ts__ANONYMOUS_s805_2e1);
      bit b_376_s1732;
      b_376_s1732 = _out_s196_2f0 == _out_s198_2f1;
      assumePre@ANONYMOUS(b_376_s1732, error_flag__ANONYMOUS_s980_2d8);
      int _out_s200_2f2;
      max(l_2e4, ts__ANONYMOUS_s805_2e1, _out_s200_2f2);
      int _out_s202_2f3;
      max_comp@ANONYMOUS(l_2e4, _out_s202_2f3, active__ANONYMOUS_s800_2d7, history__ANONYMOUS_s1424_2d9, key__ANONYMOUS_s974_2da, next__ANONYMOUS_s803_2dd, p_history__ANONYMOUS_s1091_2de, supernext__ANONYMOUS_s975_2df, symbolic__ANONYMOUS_s804_2e0, ts__ANONYMOUS_s805_2e1);
      bit b_376_s1733;
      b_376_s1733 = _out_s200_2f2 == _out_s202_2f3;
      assumePre@ANONYMOUS(b_376_s1733, error_flag__ANONYMOUS_s980_2d8);
    }
  }
}
/*aux.skh:203*/

void locvar_eq (int c1_2ae, int c2_2af, ref bit _out_2b0, ref global int[3] locvars__ANONYMOUS_s758_2b1)/*aux.skh:203*/
{
  {
    {
      _out_2b0 = 0;
      int choice_2b2;
      choice_2b2 = c1_2ae;
      assert (choice_2b2 > 0); //Assert at aux.skh:206 (7802058145489164666)
      assert (choice_2b2 < 3); //Assert at aux.skh:207 (-8073512117418549852)
      int choice2_2b3;
      choice2_2b3 = c2_2af;
      assert (choice2_2b3 >= 0); //Assert at aux.skh:209 (-8970905324550140276)
      assert (choice2_2b3 < 3); //Assert at aux.skh:210 (6193224394117173961)
      assert ((choice_2b2 >= 0) && (choice_2b2 < 3)); //aux.skh:212: Array out of bounds
      assert ((choice2_2b3 >= 0) && (choice2_2b3 < 3)); //aux.skh:212: Array out of bounds
      _out_2b0 = (locvars__ANONYMOUS_s758_2b1[choice_2b2]) == (locvars__ANONYMOUS_s758_2b1[choice2_2b3]);
      return;
    }
  }
}
/*lseg_header.skh:564*/

void malloc (int c_31e, ref global bit[4] active__ANONYMOUS_s923_31f, ref global bit error_flag__ANONYMOUS_s1557_320, ref global int[4] key__ANONYMOUS_s924_321, ref global int[3] locvars__ANONYMOUS_s925_322, ref global int malloc_budget__ANONYMOUS_s926_323, ref global int[4] next__ANONYMOUS_s927_324, ref global bit[4] symbolic__ANONYMOUS_s928_325)/*lseg_header.skh:564*/
{
  {
    {
      int choice_326;
      choice_326 = c_31e;
      assert (choice_326 > 0); //Assert at lseg_header.skh:568 (9172667198032166184)
      assert (choice_326 < 3); //Assert at lseg_header.skh:569 (7073278315219357540)
      assert (malloc_budget__ANONYMOUS_s926_323 >= 1); //Assert at lseg_header.skh:571 (7241485303337495199)
      bit b_376_s1743;
      b_376_s1743 = malloc_budget__ANONYMOUS_s926_323 >= 1;
      assumePre@ANONYMOUS(b_376_s1743, error_flag__ANONYMOUS_s1557_320);
      if(malloc_budget__ANONYMOUS_s926_323 < 1)/*lseg_header.skh:573*/
      {
        return;
      }
      int uo_s19_327;
      uo_s19_327 = malloc_budget__ANONYMOUS_s926_323;
      malloc_budget__ANONYMOUS_s926_323 = malloc_budget__ANONYMOUS_s926_323 - 1;
      uo_s19_327;
      int l_328;
      l_328 = 1;
      bit __sa13_329;
      bit _pac_sc_s1821;
      {
        _pac_sc_s1821 = 1;
        if(_pac_sc_s1821)/*lseg_header.skh:577*/
        {
          bit _pac_s1822;
          _pac_s1822 = 1;
          assert ((_pac_s1822 >= 0) && (_pac_s1822 < 4)); //lseg_header.skh:577: Array out of bounds
          _pac_sc_s1821 = active__ANONYMOUS_s923_31f[_pac_s1822];
        }
      }
      __sa13_329 = _pac_sc_s1821;
      while(__sa13_329)
      {
        int uo_s20_32c;
        uo_s20_32c = l_328;
        l_328 = l_328 + 1;
        uo_s20_32c;
        bit _pac_sc_s1823;
        {
          _pac_sc_s1823 = l_328 < 4;
          if(_pac_sc_s1823)/*lseg_header.skh:577*/
          {
            assert ((l_328 >= 0) && (l_328 < 4)); //lseg_header.skh:577: Array out of bounds
            _pac_sc_s1823 = active__ANONYMOUS_s923_31f[l_328];
          }
        }
        __sa13_329 = _pac_sc_s1823;
      }
      bit b_376_s1744;
      b_376_s1744 = l_328 < 4;
      assumePre@ANONYMOUS(b_376_s1744, error_flag__ANONYMOUS_s1557_320);
      if(l_328 >= 4)/*lseg_header.skh:581*/
      {
        return;
      }
      assert ((l_328 >= 0) && (l_328 < 4)); //lseg_header.skh:583: Either null pointer or Array out of bounds
      next__ANONYMOUS_s927_324[l_328] = 0;
      assert ((l_328 >= 0) && (l_328 < 4)); //lseg_header.skh:584: Either null pointer or Array out of bounds
      key__ANONYMOUS_s924_321[l_328] = 0;
      assert ((l_328 >= 0) && (l_328 < 4)); //lseg_header.skh:585: Either null pointer or Array out of bounds
      symbolic__ANONYMOUS_s928_325[l_328] = 0;
      assert ((l_328 >= 0) && (l_328 < 4)); //lseg_header.skh:586: Either null pointer or Array out of bounds
      active__ANONYMOUS_s923_31f[l_328] = 1;
      assert ((choice_326 >= 0) && (choice_326 < 3)); //lseg_header.skh:587: Either null pointer or Array out of bounds
      locvars__ANONYMOUS_s925_322[choice_326] = l_328;
    }
  }
}
/*lseg_header.skh:22*/

uninterp void max (int l, int t, ref int _out)/*lseg_header.skh:22*/
/*lseg_header.skh:227*/

void max_comp (int l_277, ref int _out_278, ref global bit[4] active__ANONYMOUS_s1170_279, ref global bit[4 * 4] history__ANONYMOUS_s1647_27a, ref global int[4] key__ANONYMOUS_s1171_27b, ref global int[4] next__ANONYMOUS_s1172_27c, ref global bit[4 * 4] p_history__ANONYMOUS_s1661_27d, ref global int[4] supernext__ANONYMOUS_s1173_27e, ref global bit[4] symbolic__ANONYMOUS_s1174_27f, ref global int ts__ANONYMOUS_s1175_280)/*lseg_header.skh:227*/
{
  {
    {
      _out_278 = 0;
      int _out_s113_281;
      max_recursive@ANONYMOUS(l_277, 3, _out_s113_281, active__ANONYMOUS_s1170_279, history__ANONYMOUS_s1647_27a, key__ANONYMOUS_s1171_27b, next__ANONYMOUS_s1172_27c, p_history__ANONYMOUS_s1661_27d, supernext__ANONYMOUS_s1173_27e, symbolic__ANONYMOUS_s1174_27f, ts__ANONYMOUS_s1175_280);
      _out_278 = _out_s113_281;
      return;
    }
  }
}
/*lseg_header.skh:236*/

void max_history (int l_402, int ts_0_403, ref int _out_404, ref global bit[4 * 4] history__ANONYMOUS_s806_405, ref global int ts__ANONYMOUS_s807_406)/*lseg_header.skh:236*/
{
  {
    {
      _out_404 = 0;
      int ts_407;
      ts_407 = ts_0_403;
      bit __sa8_408;
      bit _pac_sc_s1867;
      {
        _pac_sc_s1867 = ts_407 > 0;
        if(_pac_sc_s1867)/*lseg_header.skh:237*/
        {
          assert ((l_402 >= 0) && (l_402 < 4)); //lseg_header.skh:237: Array out of bounds
          assert ((ts_407 >= 0) && (ts_407 < 4)); //lseg_header.skh:237: Array out of bounds
          _pac_sc_s1867 = history__ANONYMOUS_s806_405[(4 * l_402) + ts_407];
        }
      }
      __sa8_408 = _pac_sc_s1867;
      while(__sa8_408)
      {
        int uo_s23_40a;
        uo_s23_40a = ts_407;
        ts_407 = ts_407 - 1;
        uo_s23_40a;
        bit _pac_sc_s1868;
        {
          _pac_sc_s1868 = ts_407 > 0;
          if(_pac_sc_s1868)/*lseg_header.skh:237*/
          {
            assert ((l_402 >= 0) && (l_402 < 4)); //lseg_header.skh:237: Array out of bounds
            assert ((ts_407 >= 0) && (ts_407 < 4)); //lseg_header.skh:237: Array out of bounds
            _pac_sc_s1868 = history__ANONYMOUS_s806_405[(4 * l_402) + ts_407];
          }
        }
        __sa8_408 = _pac_sc_s1868;
      }
      int _out_s129_40b;
      max(l_402, ts_407, _out_s129_40b);
      _out_404 = _out_s129_40b;
      return;
    }
  }
}
/*lseg_header.skh:232*/

void max_recursive (int l_39f, int bnd_3a0, ref int _out_3a1, ref global bit[4] active__ANONYMOUS_s1265_3a2, ref global bit[4 * 4] history__ANONYMOUS_s1645_3a3, ref global int[4] key__ANONYMOUS_s1266_3a4, ref global int[4] next__ANONYMOUS_s1267_3a5, ref global bit[4 * 4] p_history__ANONYMOUS_s1268_3a6, ref global int[4] supernext__ANONYMOUS_s1269_3a7, ref global bit[4] symbolic__ANONYMOUS_s1270_3a8, ref global int ts__ANONYMOUS_s1271_3a9)/*lseg_header.skh:232*/
{
  {
    {
      _out_3a1 = 0;
      int _out_s115_3aa;
      maxseg_recursive@ANONYMOUS(l_39f, 0, bnd_3a0, _out_s115_3aa, active__ANONYMOUS_s1265_3a2, history__ANONYMOUS_s1645_3a3, key__ANONYMOUS_s1266_3a4, next__ANONYMOUS_s1267_3a5, p_history__ANONYMOUS_s1268_3a6, supernext__ANONYMOUS_s1269_3a7, symbolic__ANONYMOUS_s1270_3a8, ts__ANONYMOUS_s1271_3a9);
      _out_3a1 = _out_s115_3aa;
      return;
    }
  }
}
/*lseg_header.skh:26*/

uninterp void maxseg (int l1, int t, ref int _out)/*lseg_header.skh:26*/
/*lseg_header.skh:241*/

void maxseg_comp (int l1_296, int l2_297, ref int _out_298, ref global bit[4] active__ANONYMOUS_s1320_299, ref global bit[4 * 4] history__ANONYMOUS_s1321_29a, ref global int[4] key__ANONYMOUS_s1322_29b, ref global int[4] next__ANONYMOUS_s1323_29c, ref global bit[4 * 4] p_history__ANONYMOUS_s1324_29d, ref global int[4] supernext__ANONYMOUS_s1325_29e, ref global bit[4] symbolic__ANONYMOUS_s1326_29f, ref global int ts__ANONYMOUS_s1327_2a0)/*lseg_header.skh:241*/
{
  {
    {
      _out_298 = 0;
      int _out_s263_2a1;
      maxseg_recursive@ANONYMOUS(l1_296, l2_297, 3, _out_s263_2a1, active__ANONYMOUS_s1320_299, history__ANONYMOUS_s1321_29a, key__ANONYMOUS_s1322_29b, next__ANONYMOUS_s1323_29c, p_history__ANONYMOUS_s1324_29d, supernext__ANONYMOUS_s1325_29e, symbolic__ANONYMOUS_s1326_29f, ts__ANONYMOUS_s1327_2a0);
      _out_298 = _out_s263_2a1;
      return;
    }
  }
}
/*lseg_header.skh:275*/

void maxseg_history (int l1_40c, int ts_0_40d, ref int _out_40e, ref global bit[4 * 4] p_history__ANONYMOUS_s900_40f, ref global int ts__ANONYMOUS_s901_410)/*lseg_header.skh:275*/
{
  {
    {
      _out_40e = 0;
      int ts_411;
      ts_411 = ts_0_40d;
      bit __sa9_412;
      bit _pac_sc_s1869;
      {
        _pac_sc_s1869 = ts_411 > 0;
        if(_pac_sc_s1869)/*lseg_header.skh:276*/
        {
          assert ((l1_40c >= 0) && (l1_40c < 4)); //lseg_header.skh:276: Array out of bounds
          assert ((ts_411 >= 0) && (ts_411 < 4)); //lseg_header.skh:276: Array out of bounds
          _pac_sc_s1869 = p_history__ANONYMOUS_s900_40f[(4 * l1_40c) + ts_411];
        }
      }
      __sa9_412 = _pac_sc_s1869;
      while(__sa9_412)
      {
        int uo_s22_414;
        uo_s22_414 = ts_411;
        ts_411 = ts_411 - 1;
        uo_s22_414;
        bit _pac_sc_s1870;
        {
          _pac_sc_s1870 = ts_411 > 0;
          if(_pac_sc_s1870)/*lseg_header.skh:276*/
          {
            assert ((l1_40c >= 0) && (l1_40c < 4)); //lseg_header.skh:276: Array out of bounds
            assert ((ts_411 >= 0) && (ts_411 < 4)); //lseg_header.skh:276: Array out of bounds
            _pac_sc_s1870 = p_history__ANONYMOUS_s900_40f[(4 * l1_40c) + ts_411];
          }
        }
        __sa9_412 = _pac_sc_s1870;
      }
      int _out_s127_415;
      maxseg(l1_40c, ts_411, _out_s127_415);
      _out_40e = _out_s127_415;
      return;
    }
  }
}
/*lseg_header.skh:246*/

void maxseg_recursive (int l1_3ab, int l2_3ac, int bnd_3ad, ref int _out_3ae, ref global bit[4] active__ANONYMOUS_s862_3af, ref global bit[4 * 4] history__ANONYMOUS_s1287_3b0, ref global int[4] key__ANONYMOUS_s863_3b1, ref global int[4] next__ANONYMOUS_s864_3b2, ref global bit[4 * 4] p_history__ANONYMOUS_s1201_3b3, ref global int[4] supernext__ANONYMOUS_s865_3b4, ref global bit[4] symbolic__ANONYMOUS_s866_3b5, ref global int ts__ANONYMOUS_s867_3b6)/*lseg_header.skh:246*/
{
  {
    {
      _out_3ae = 0;
      if((((l1_3ab < 0) || (l1_3ab >= 4)) || (l2_3ac < 0)) || (l2_3ac >= 4))/*lseg_header.skh:247*/
      {
        _out_3ae = -1;
        return;
      }
      else
      {
        bit _pac_sc_s1845;
        {
          assert ((l1_3ab >= 0) && (l1_3ab < 4)); //lseg_header.skh:248: Array out of bounds
          _pac_sc_s1845 = !(active__ANONYMOUS_s862_3af[l1_3ab]);
          if(!(_pac_sc_s1845))/*lseg_header.skh:248*/
          {
            assert ((l2_3ac >= 0) && (l2_3ac < 4)); //lseg_header.skh:248: Array out of bounds
            _pac_sc_s1845 = !(active__ANONYMOUS_s862_3af[l2_3ac]);
          }
        }
        if(_pac_sc_s1845)/*lseg_header.skh:248*/
        {
          _out_3ae = -1;
          return;
        }
        else
        {
          if(l1_3ab == l2_3ac)/*lseg_header.skh:249*/
          {
            bit _pac_sc_s1846;
            {
              _pac_sc_s1846 = l1_3ab == 0;
              if(!(_pac_sc_s1846))/*lseg_header.skh:249*/
              {
                assert ((l1_3ab >= 0) && (l1_3ab < 4)); //lseg_header.skh:249: Array out of bounds
                _pac_sc_s1846 = (next__ANONYMOUS_s864_3b2[l1_3ab]) != l1_3ab;
              }
            }
            int _pac_sc_s1847;
            if(_pac_sc_s1846)/*lseg_header.skh:249*/
            {
              _pac_sc_s1847 = 0;
            }
            else
            {
              assert ((l1_3ab >= 0) && (l1_3ab < 4)); //lseg_header.skh:249: Array out of bounds
              _pac_sc_s1847 = key__ANONYMOUS_s863_3b1[l1_3ab];
            }
            _out_3ae = _pac_sc_s1847;
            return;
          }
          else
          {
            if(l1_3ab == 0)/*lseg_header.skh:251*/
            {
              _out_3ae = 0;
              return;
            }
            else
            {
              if(bnd_3ad < 0)/*lseg_header.skh:252*/
              {
                _out_3ae = -1;
                return;
              }
              else
              {
                assert ((l1_3ab >= 0) && (l1_3ab < 4)); //lseg_header.skh:254: Array out of bounds
                if(symbolic__ANONYMOUS_s866_3b5[l1_3ab])/*lseg_header.skh:254*/
                {
                  if(l2_3ac == 0)/*lseg_header.skh:255*/
                  {
                    int _out_s117_3b7;
                    max_history@ANONYMOUS(l1_3ab, ts__ANONYMOUS_s867_3b6, _out_s117_3b7, history__ANONYMOUS_s1287_3b0, ts__ANONYMOUS_s867_3b6);
                    _out_3ae = _out_s117_3b7;
                    return;
                  }
                  else
                  {
                    _out_3ae = -1;
                    return;
                  }
                }
                else
                {
                  assert ((l1_3ab >= 0) && (l1_3ab < 4)); //lseg_header.skh:258: Array out of bounds
                  if(l2_3ac == (next__ANONYMOUS_s864_3b2[l1_3ab]))/*lseg_header.skh:258*/
                  {
                    bit _pac_sc_s1848;
                    {
                      bit _pac_sc_s1849;
                      {
                        _pac_sc_s1849 = l2_3ac == 0;
                        if(!(_pac_sc_s1849))/*lseg_header.skh:258*/
                        {
                          assert ((l2_3ac >= 0) && (l2_3ac < 4)); //lseg_header.skh:258: Array out of bounds
                          _pac_sc_s1849 = (next__ANONYMOUS_s864_3b2[l2_3ac]) != l2_3ac;
                        }
                      }
                      _pac_sc_s1848 = _pac_sc_s1849;
                      if(!(_pac_sc_s1848))/*lseg_header.skh:258*/
                      {
                        assert ((l2_3ac >= 0) && (l2_3ac < 4)); //lseg_header.skh:258: Array out of bounds
                        assert ((l1_3ab >= 0) && (l1_3ab < 4)); //lseg_header.skh:258: Array out of bounds
                        _pac_sc_s1848 = (key__ANONYMOUS_s863_3b1[l2_3ac]) <= (key__ANONYMOUS_s863_3b1[l1_3ab]);
                      }
                    }
                    int _pac_sc_s1850;
                    if(_pac_sc_s1848)/*lseg_header.skh:258*/
                    {
                      assert ((l1_3ab >= 0) && (l1_3ab < 4)); //lseg_header.skh:258: Array out of bounds
                      _pac_sc_s1850 = key__ANONYMOUS_s863_3b1[l1_3ab];
                    }
                    else
                    {
                      assert ((l2_3ac >= 0) && (l2_3ac < 4)); //lseg_header.skh:258: Array out of bounds
                      _pac_sc_s1850 = key__ANONYMOUS_s863_3b1[l2_3ac];
                    }
                    _out_3ae = _pac_sc_s1850;
                    return;
                  }
                  else
                  {
                    assert ((l1_3ab >= 0) && (l1_3ab < 4)); //lseg_header.skh:259: Array out of bounds
                    if(0 == (next__ANONYMOUS_s864_3b2[l1_3ab]))/*lseg_header.skh:259*/
                    {
                      _out_3ae = -1;
                      return;
                    }
                    else
                    {
                      bit _pac_sc_s1851;
                      {
                        assert ((l1_3ab >= 0) && (l1_3ab < 4)); //lseg_header.skh:260: Array out of bounds
                        _pac_sc_s1851 = 0 < (next__ANONYMOUS_s864_3b2[l1_3ab]);
                        if(_pac_sc_s1851)/*lseg_header.skh:260*/
                        {
                          assert ((l1_3ab >= 0) && (l1_3ab < 4)); //lseg_header.skh:260: Array out of bounds
                          _pac_sc_s1851 = (next__ANONYMOUS_s864_3b2[l1_3ab]) < 4;
                        }
                      }
                      if(_pac_sc_s1851)/*lseg_header.skh:260*/
                      {
                        int r_3b8;
                        int r_s119_3b9;
                        int l1_3ab_s1757;
                        assert ((l1_3ab >= 0) && (l1_3ab < 4)); //lseg_header.skh:261: Array out of bounds
                        l1_3ab_s1757 = next__ANONYMOUS_s864_3b2[l1_3ab];
                        int bnd_3ad_s1758;
                        bnd_3ad_s1758 = bnd_3ad - 1;
                        maxseg_recursive@ANONYMOUS(l1_3ab_s1757, l2_3ac, bnd_3ad_s1758, r_s119_3b9, active__ANONYMOUS_s862_3af, history__ANONYMOUS_s1287_3b0, key__ANONYMOUS_s863_3b1, next__ANONYMOUS_s864_3b2, p_history__ANONYMOUS_s1201_3b3, supernext__ANONYMOUS_s865_3b4, symbolic__ANONYMOUS_s866_3b5, ts__ANONYMOUS_s867_3b6);
                        r_3b8 = r_s119_3b9;
                        assert ((l1_3ab >= 0) && (l1_3ab < 4)); //lseg_header.skh:262: Array out of bounds
                        int _pac_sc_s1852;
                        if((key__ANONYMOUS_s863_3b1[l1_3ab]) >= r_3b8)/*lseg_header.skh:262*/
                        {
                          assert ((l1_3ab >= 0) && (l1_3ab < 4)); //lseg_header.skh:262: Array out of bounds
                          _pac_sc_s1852 = key__ANONYMOUS_s863_3b1[l1_3ab];
                        }
                        else
                        {
                          _pac_sc_s1852 = r_3b8;
                        }
                        _out_3ae = _pac_sc_s1852;
                        return;
                      }
                      else
                      {
                        assert ((l1_3ab >= 0) && (l1_3ab < 4)); //lseg_header.skh:264: Array out of bounds
                        if(l2_3ac == (supernext__ANONYMOUS_s865_3b4[l1_3ab]))/*lseg_header.skh:264*/
                        {
                          int _out_s121_3ba;
                          maxseg_history@ANONYMOUS(l1_3ab, ts__ANONYMOUS_s867_3b6, _out_s121_3ba, p_history__ANONYMOUS_s1201_3b3, ts__ANONYMOUS_s867_3b6);
                          _out_3ae = _out_s121_3ba;
                          return;
                        }
                        else
                        {
                          assert ((l1_3ab >= 0) && (l1_3ab < 4)); //lseg_header.skh:265: Array out of bounds
                          if(0 == (supernext__ANONYMOUS_s865_3b4[l1_3ab]))/*lseg_header.skh:265*/
                          {
                            _out_3ae = -1;
                            return;
                          }
                          else
                          {
                            bit _pac_sc_s1853;
                            {
                              assert ((l1_3ab >= 0) && (l1_3ab < 4)); //lseg_header.skh:266: Array out of bounds
                              _pac_sc_s1853 = 0 < (supernext__ANONYMOUS_s865_3b4[l1_3ab]);
                              if(_pac_sc_s1853)/*lseg_header.skh:266*/
                              {
                                assert ((l1_3ab >= 0) && (l1_3ab < 4)); //lseg_header.skh:266: Array out of bounds
                                _pac_sc_s1853 = (supernext__ANONYMOUS_s865_3b4[l1_3ab]) < 4;
                              }
                            }
                            if(_pac_sc_s1853)/*lseg_header.skh:266*/
                            {
                              int p1_3bb;
                              int p1_s123_3bc;
                              maxseg_history@ANONYMOUS(l1_3ab, ts__ANONYMOUS_s867_3b6, p1_s123_3bc, p_history__ANONYMOUS_s1201_3b3, ts__ANONYMOUS_s867_3b6);
                              p1_3bb = p1_s123_3bc;
                              int p2_3bd;
                              int p2_s125_3be;
                              int l1_3ab_s1759;
                              assert ((l1_3ab >= 0) && (l1_3ab < 4)); //lseg_header.skh:268: Array out of bounds
                              l1_3ab_s1759 = supernext__ANONYMOUS_s865_3b4[l1_3ab];
                              int bnd_3ad_s1760;
                              bnd_3ad_s1760 = bnd_3ad - 1;
                              maxseg_recursive@ANONYMOUS(l1_3ab_s1759, l2_3ac, bnd_3ad_s1760, p2_s125_3be, active__ANONYMOUS_s862_3af, history__ANONYMOUS_s1287_3b0, key__ANONYMOUS_s863_3b1, next__ANONYMOUS_s864_3b2, p_history__ANONYMOUS_s1201_3b3, supernext__ANONYMOUS_s865_3b4, symbolic__ANONYMOUS_s866_3b5, ts__ANONYMOUS_s867_3b6);
                              p2_3bd = p2_s125_3be;
                              _out_3ae = (p1_3bb >= p2_3bd ? p1_3bb : p2_3bd);
                              return;
                            }
                            else
                            {
                              _out_3ae = -1;
                              return;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
/*lseg_header.skh:21*/

uninterp void min (int l, int t, ref int _out)/*lseg_header.skh:21*/
/*lseg_header.skh:173*/

void min_comp (int l_25a, ref int _out_25b, ref global bit[4] active__ANONYMOUS_s1053_25c, ref global bit[4 * 4] history__ANONYMOUS_s1569_25d, ref global int[4] key__ANONYMOUS_s1054_25e, ref global int[4] next__ANONYMOUS_s1055_25f, ref global bit[4 * 4] p_history__ANONYMOUS_s1311_260, ref global int[4] supernext__ANONYMOUS_s1056_261, ref global bit[4] symbolic__ANONYMOUS_s1057_262, ref global int ts__ANONYMOUS_s1058_263)/*lseg_header.skh:173*/
{
  {
    {
      _out_25b = 0;
      int _out_s131_264;
      min_recursive@ANONYMOUS(l_25a, 3, _out_s131_264, active__ANONYMOUS_s1053_25c, history__ANONYMOUS_s1569_25d, key__ANONYMOUS_s1054_25e, next__ANONYMOUS_s1055_25f, p_history__ANONYMOUS_s1311_260, supernext__ANONYMOUS_s1056_261, symbolic__ANONYMOUS_s1057_262, ts__ANONYMOUS_s1058_263);
      _out_25b = _out_s131_264;
      return;
    }
  }
}
/*lseg_header.skh:182*/

void min_history (int l_416, int ts_0_417, ref int _out_418, ref global bit[4 * 4] history__ANONYMOUS_s939_419, ref global int ts__ANONYMOUS_s940_41a)/*lseg_header.skh:182*/
{
  {
    {
      _out_418 = 0;
      int ts_41b;
      ts_41b = ts_0_417;
      bit __sa6_41c;
      bit _pac_sc_s1871;
      {
        _pac_sc_s1871 = ts_41b > 0;
        if(_pac_sc_s1871)/*lseg_header.skh:183*/
        {
          assert ((l_416 >= 0) && (l_416 < 4)); //lseg_header.skh:183: Array out of bounds
          assert ((ts_41b >= 0) && (ts_41b < 4)); //lseg_header.skh:183: Array out of bounds
          _pac_sc_s1871 = history__ANONYMOUS_s939_419[(4 * l_416) + ts_41b];
        }
      }
      __sa6_41c = _pac_sc_s1871;
      while(__sa6_41c)
      {
        int uo_s25_41e;
        uo_s25_41e = ts_41b;
        ts_41b = ts_41b - 1;
        uo_s25_41e;
        bit _pac_sc_s1872;
        {
          _pac_sc_s1872 = ts_41b > 0;
          if(_pac_sc_s1872)/*lseg_header.skh:183*/
          {
            assert ((l_416 >= 0) && (l_416 < 4)); //lseg_header.skh:183: Array out of bounds
            assert ((ts_41b >= 0) && (ts_41b < 4)); //lseg_header.skh:183: Array out of bounds
            _pac_sc_s1872 = history__ANONYMOUS_s939_419[(4 * l_416) + ts_41b];
          }
        }
        __sa6_41c = _pac_sc_s1872;
      }
      int _out_s147_41f;
      min(l_416, ts_41b, _out_s147_41f);
      _out_418 = _out_s147_41f;
      return;
    }
  }
}
/*lseg_header.skh:178*/

void min_recursive (int l_378, int bnd_379, ref int _out_37a, ref global bit[4] active__ANONYMOUS_s1009_37b, ref global bit[4 * 4] history__ANONYMOUS_s1564_37c, ref global int[4] key__ANONYMOUS_s1010_37d, ref global int[4] next__ANONYMOUS_s1011_37e, ref global bit[4 * 4] p_history__ANONYMOUS_s1093_37f, ref global int[4] supernext__ANONYMOUS_s1012_380, ref global bit[4] symbolic__ANONYMOUS_s1013_381, ref global int ts__ANONYMOUS_s1014_382)/*lseg_header.skh:178*/
{
  {
    {
      _out_37a = 0;
      int _out_s133_383;
      minseg_recursive@ANONYMOUS(l_378, 0, bnd_379, _out_s133_383, active__ANONYMOUS_s1009_37b, history__ANONYMOUS_s1564_37c, key__ANONYMOUS_s1010_37d, next__ANONYMOUS_s1011_37e, p_history__ANONYMOUS_s1093_37f, supernext__ANONYMOUS_s1012_380, symbolic__ANONYMOUS_s1013_381, ts__ANONYMOUS_s1014_382);
      _out_37a = _out_s133_383;
      return;
    }
  }
}
/*lseg_header.skh:25*/

uninterp void minseg (int l1, int t, ref int _out)/*lseg_header.skh:25*/
/*lseg_header.skh:187*/

void minseg_comp (int l1_2a2, int l2_2a3, ref int _out_2a4, ref global bit[4] active__ANONYMOUS_s1479_2a5, ref global bit[4 * 4] history__ANONYMOUS_s1615_2a6, ref global int[4] key__ANONYMOUS_s1480_2a7, ref global int[4] next__ANONYMOUS_s1481_2a8, ref global bit[4 * 4] p_history__ANONYMOUS_s1664_2a9, ref global int[4] supernext__ANONYMOUS_s1482_2aa, ref global bit[4] symbolic__ANONYMOUS_s1483_2ab, ref global int ts__ANONYMOUS_s1484_2ac)/*lseg_header.skh:187*/
{
  {
    {
      _out_2a4 = 0;
      int _out_s261_2ad;
      minseg_recursive@ANONYMOUS(l1_2a2, l2_2a3, 3, _out_s261_2ad, active__ANONYMOUS_s1479_2a5, history__ANONYMOUS_s1615_2a6, key__ANONYMOUS_s1480_2a7, next__ANONYMOUS_s1481_2a8, p_history__ANONYMOUS_s1664_2a9, supernext__ANONYMOUS_s1482_2aa, symbolic__ANONYMOUS_s1483_2ab, ts__ANONYMOUS_s1484_2ac);
      _out_2a4 = _out_s261_2ad;
      return;
    }
  }
}
/*lseg_header.skh:222*/

void minseg_history (int l1_420, int ts_0_421, ref int _out_422, ref global bit[4 * 4] p_history__ANONYMOUS_s725_423, ref global int ts__ANONYMOUS_s726_424)/*lseg_header.skh:222*/
{
  {
    {
      _out_422 = 0;
      int ts_425;
      ts_425 = ts_0_421;
      bit __sa7_426;
      bit _pac_sc_s1873;
      {
        _pac_sc_s1873 = ts_425 > 0;
        if(_pac_sc_s1873)/*lseg_header.skh:223*/
        {
          assert ((l1_420 >= 0) && (l1_420 < 4)); //lseg_header.skh:223: Array out of bounds
          assert ((ts_425 >= 0) && (ts_425 < 4)); //lseg_header.skh:223: Array out of bounds
          _pac_sc_s1873 = p_history__ANONYMOUS_s725_423[(4 * l1_420) + ts_425];
        }
      }
      __sa7_426 = _pac_sc_s1873;
      while(__sa7_426)
      {
        int uo_s24_428;
        uo_s24_428 = ts_425;
        ts_425 = ts_425 - 1;
        uo_s24_428;
        bit _pac_sc_s1874;
        {
          _pac_sc_s1874 = ts_425 > 0;
          if(_pac_sc_s1874)/*lseg_header.skh:223*/
          {
            assert ((l1_420 >= 0) && (l1_420 < 4)); //lseg_header.skh:223: Array out of bounds
            assert ((ts_425 >= 0) && (ts_425 < 4)); //lseg_header.skh:223: Array out of bounds
            _pac_sc_s1874 = p_history__ANONYMOUS_s725_423[(4 * l1_420) + ts_425];
          }
        }
        __sa7_426 = _pac_sc_s1874;
      }
      int _out_s145_429;
      minseg(l1_420, ts_425, _out_s145_429);
      _out_422 = _out_s145_429;
      return;
    }
  }
}
/*lseg_header.skh:192*/

void minseg_recursive (int l1_3bf, int l2_3c0, int bnd_3c1, ref int _out_3c2, ref global bit[4] active__ANONYMOUS_s818_3c3, ref global bit[4 * 4] history__ANONYMOUS_s1572_3c4, ref global int[4] key__ANONYMOUS_s819_3c5, ref global int[4] next__ANONYMOUS_s820_3c6, ref global bit[4 * 4] p_history__ANONYMOUS_s1537_3c7, ref global int[4] supernext__ANONYMOUS_s821_3c8, ref global bit[4] symbolic__ANONYMOUS_s822_3c9, ref global int ts__ANONYMOUS_s823_3ca)/*lseg_header.skh:192*/
{
  {
    {
      _out_3c2 = 0;
      if((l1_3bf < 0) || (l1_3bf >= 4))/*lseg_header.skh:193*/
      {
        _out_3c2 = 7;
        return;
      }
      else
      {
        assert ((l1_3bf >= 0) && (l1_3bf < 4)); //lseg_header.skh:194: Array out of bounds
        if(!(active__ANONYMOUS_s818_3c3[l1_3bf]))/*lseg_header.skh:194*/
        {
          _out_3c2 = 7;
          return;
        }
        else
        {
          if(l1_3bf == l2_3c0)/*lseg_header.skh:196*/
          {
            bit _pac_sc_s1854;
            {
              _pac_sc_s1854 = l1_3bf == 0;
              if(!(_pac_sc_s1854))/*lseg_header.skh:196*/
              {
                assert ((l1_3bf >= 0) && (l1_3bf < 4)); //lseg_header.skh:196: Array out of bounds
                _pac_sc_s1854 = (next__ANONYMOUS_s820_3c6[l1_3bf]) != l1_3bf;
              }
            }
            int _pac_sc_s1855;
            if(_pac_sc_s1854)/*lseg_header.skh:196*/
            {
              _pac_sc_s1855 = 7;
            }
            else
            {
              assert ((l1_3bf >= 0) && (l1_3bf < 4)); //lseg_header.skh:196: Array out of bounds
              _pac_sc_s1855 = key__ANONYMOUS_s819_3c5[l1_3bf];
            }
            _out_3c2 = _pac_sc_s1855;
            return;
          }
          else
          {
            if(l1_3bf == 0)/*lseg_header.skh:198*/
            {
              _out_3c2 = 7;
              return;
            }
            else
            {
              if(bnd_3c1 < 0)/*lseg_header.skh:199*/
              {
                _out_3c2 = -1;
                return;
              }
              else
              {
                assert ((l1_3bf >= 0) && (l1_3bf < 4)); //lseg_header.skh:201: Array out of bounds
                if(symbolic__ANONYMOUS_s822_3c9[l1_3bf])/*lseg_header.skh:201*/
                {
                  if(l2_3c0 == 0)/*lseg_header.skh:202*/
                  {
                    int _out_s135_3cb;
                    min_history@ANONYMOUS(l1_3bf, ts__ANONYMOUS_s823_3ca, _out_s135_3cb, history__ANONYMOUS_s1572_3c4, ts__ANONYMOUS_s823_3ca);
                    _out_3c2 = _out_s135_3cb;
                    return;
                  }
                  else
                  {
                    _out_3c2 = -1;
                    return;
                  }
                }
                else
                {
                  assert ((l1_3bf >= 0) && (l1_3bf < 4)); //lseg_header.skh:205: Array out of bounds
                  if(l2_3c0 == (next__ANONYMOUS_s820_3c6[l1_3bf]))/*lseg_header.skh:205*/
                  {
                    bit _pac_sc_s1856;
                    {
                      bit _pac_sc_s1857;
                      {
                        _pac_sc_s1857 = l2_3c0 == 0;
                        if(!(_pac_sc_s1857))/*lseg_header.skh:205*/
                        {
                          assert ((l2_3c0 >= 0) && (l2_3c0 < 4)); //lseg_header.skh:205: Array out of bounds
                          _pac_sc_s1857 = (next__ANONYMOUS_s820_3c6[l2_3c0]) != l2_3c0;
                        }
                      }
                      _pac_sc_s1856 = _pac_sc_s1857;
                      if(!(_pac_sc_s1856))/*lseg_header.skh:205*/
                      {
                        assert ((l1_3bf >= 0) && (l1_3bf < 4)); //lseg_header.skh:205: Array out of bounds
                        assert ((l2_3c0 >= 0) && (l2_3c0 < 4)); //lseg_header.skh:205: Array out of bounds
                        _pac_sc_s1856 = (key__ANONYMOUS_s819_3c5[l1_3bf]) <= (key__ANONYMOUS_s819_3c5[l2_3c0]);
                      }
                    }
                    int _pac_sc_s1858;
                    if(_pac_sc_s1856)/*lseg_header.skh:205*/
                    {
                      assert ((l1_3bf >= 0) && (l1_3bf < 4)); //lseg_header.skh:205: Array out of bounds
                      _pac_sc_s1858 = key__ANONYMOUS_s819_3c5[l1_3bf];
                    }
                    else
                    {
                      assert ((l2_3c0 >= 0) && (l2_3c0 < 4)); //lseg_header.skh:205: Array out of bounds
                      _pac_sc_s1858 = key__ANONYMOUS_s819_3c5[l2_3c0];
                    }
                    _out_3c2 = _pac_sc_s1858;
                    return;
                  }
                  else
                  {
                    assert ((l1_3bf >= 0) && (l1_3bf < 4)); //lseg_header.skh:206: Array out of bounds
                    if(0 == (next__ANONYMOUS_s820_3c6[l1_3bf]))/*lseg_header.skh:206*/
                    {
                      _out_3c2 = -1;
                      return;
                    }
                    else
                    {
                      bit _pac_sc_s1859;
                      {
                        assert ((l1_3bf >= 0) && (l1_3bf < 4)); //lseg_header.skh:207: Array out of bounds
                        _pac_sc_s1859 = 0 < (next__ANONYMOUS_s820_3c6[l1_3bf]);
                        if(_pac_sc_s1859)/*lseg_header.skh:207*/
                        {
                          assert ((l1_3bf >= 0) && (l1_3bf < 4)); //lseg_header.skh:207: Array out of bounds
                          _pac_sc_s1859 = (next__ANONYMOUS_s820_3c6[l1_3bf]) < 4;
                        }
                      }
                      if(_pac_sc_s1859)/*lseg_header.skh:207*/
                      {
                        int r_3cc;
                        int r_s137_3cd;
                        int l1_3bf_s1761;
                        assert ((l1_3bf >= 0) && (l1_3bf < 4)); //lseg_header.skh:208: Array out of bounds
                        l1_3bf_s1761 = next__ANONYMOUS_s820_3c6[l1_3bf];
                        int bnd_3c1_s1762;
                        bnd_3c1_s1762 = bnd_3c1 - 1;
                        minseg_recursive@ANONYMOUS(l1_3bf_s1761, l2_3c0, bnd_3c1_s1762, r_s137_3cd, active__ANONYMOUS_s818_3c3, history__ANONYMOUS_s1572_3c4, key__ANONYMOUS_s819_3c5, next__ANONYMOUS_s820_3c6, p_history__ANONYMOUS_s1537_3c7, supernext__ANONYMOUS_s821_3c8, symbolic__ANONYMOUS_s822_3c9, ts__ANONYMOUS_s823_3ca);
                        r_3cc = r_s137_3cd;
                        assert ((l1_3bf >= 0) && (l1_3bf < 4)); //lseg_header.skh:209: Array out of bounds
                        int _pac_sc_s1860;
                        if((key__ANONYMOUS_s819_3c5[l1_3bf]) <= r_3cc)/*lseg_header.skh:209*/
                        {
                          assert ((l1_3bf >= 0) && (l1_3bf < 4)); //lseg_header.skh:209: Array out of bounds
                          _pac_sc_s1860 = key__ANONYMOUS_s819_3c5[l1_3bf];
                        }
                        else
                        {
                          _pac_sc_s1860 = r_3cc;
                        }
                        _out_3c2 = _pac_sc_s1860;
                        return;
                      }
                      else
                      {
                        assert ((l1_3bf >= 0) && (l1_3bf < 4)); //lseg_header.skh:211: Array out of bounds
                        if(l2_3c0 == (supernext__ANONYMOUS_s821_3c8[l1_3bf]))/*lseg_header.skh:211*/
                        {
                          int _out_s139_3ce;
                          minseg_history@ANONYMOUS(l1_3bf, ts__ANONYMOUS_s823_3ca, _out_s139_3ce, p_history__ANONYMOUS_s1537_3c7, ts__ANONYMOUS_s823_3ca);
                          _out_3c2 = _out_s139_3ce;
                          return;
                        }
                        else
                        {
                          assert ((l1_3bf >= 0) && (l1_3bf < 4)); //lseg_header.skh:212: Array out of bounds
                          if(0 == (supernext__ANONYMOUS_s821_3c8[l1_3bf]))/*lseg_header.skh:212*/
                          {
                            _out_3c2 = -1;
                            return;
                          }
                          else
                          {
                            bit _pac_sc_s1861;
                            {
                              assert ((l1_3bf >= 0) && (l1_3bf < 4)); //lseg_header.skh:213: Array out of bounds
                              _pac_sc_s1861 = 0 < (supernext__ANONYMOUS_s821_3c8[l1_3bf]);
                              if(_pac_sc_s1861)/*lseg_header.skh:213*/
                              {
                                assert ((l1_3bf >= 0) && (l1_3bf < 4)); //lseg_header.skh:213: Array out of bounds
                                _pac_sc_s1861 = (supernext__ANONYMOUS_s821_3c8[l1_3bf]) < 4;
                              }
                            }
                            if(_pac_sc_s1861)/*lseg_header.skh:213*/
                            {
                              int p1_3cf;
                              int p1_s141_3d0;
                              minseg_history@ANONYMOUS(l1_3bf, ts__ANONYMOUS_s823_3ca, p1_s141_3d0, p_history__ANONYMOUS_s1537_3c7, ts__ANONYMOUS_s823_3ca);
                              p1_3cf = p1_s141_3d0;
                              int p2_3d1;
                              int p2_s143_3d2;
                              int l1_3bf_s1763;
                              assert ((l1_3bf >= 0) && (l1_3bf < 4)); //lseg_header.skh:215: Array out of bounds
                              l1_3bf_s1763 = supernext__ANONYMOUS_s821_3c8[l1_3bf];
                              int bnd_3c1_s1764;
                              bnd_3c1_s1764 = bnd_3c1 - 1;
                              minseg_recursive@ANONYMOUS(l1_3bf_s1763, l2_3c0, bnd_3c1_s1764, p2_s143_3d2, active__ANONYMOUS_s818_3c3, history__ANONYMOUS_s1572_3c4, key__ANONYMOUS_s819_3c5, next__ANONYMOUS_s820_3c6, p_history__ANONYMOUS_s1537_3c7, supernext__ANONYMOUS_s821_3c8, symbolic__ANONYMOUS_s822_3c9, ts__ANONYMOUS_s823_3ca);
                              p2_3d1 = p2_s143_3d2;
                              _out_3c2 = (p1_3cf <= p2_3d1 ? p1_3cf : p2_3d1);
                              return;
                            }
                            else
                            {
                              _out_3c2 = -1;
                              return;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
/*lseg_header.skh:341*/

void p_treeness (int t1_282, int t2_283, ref bit _out_284, ref global bit[4] active__ANONYMOUS_s1639_285, ref global int[4] next__ANONYMOUS_s1640_286, ref global int[4] supernext__ANONYMOUS_s1641_287, ref global bit[4] symbolic__ANONYMOUS_s1642_288)/*lseg_header.skh:341*/
{
  {
    {
      _out_284 = 0;
      bit[4] visited_289;
      {
        for(int __sa1896 = 0; __sa1896 < 4; __sa1896 = __sa1896 + 1)/*Canonical*/
        {
          visited_289[__sa1896] = 0;
        }
      }
      bit _out_s287_28a;
      check_p_treeness@ANONYMOUS(t1_282, t2_283, visited_289, 3, _out_s287_28a, active__ANONYMOUS_s1639_285, next__ANONYMOUS_s1640_286, supernext__ANONYMOUS_s1641_287, symbolic__ANONYMOUS_s1642_288);
      _out_284 = _out_s287_28a;
      return;
    }
  }
}
/*local/test.sk:41*/

void post_cond_list_find_min_rec (int r_246, int x_247, ref int old_min_x_248, ref bit _out_249, ref global bit[4] active__ANONYMOUS_s1447_24a, ref global int[2] intvars__ANONYMOUS_s776_24b, ref global int[3] locvars__ANONYMOUS_s1448_24c, ref global int[4] next__ANONYMOUS_s1449_24d, ref global int[4] supernext__ANONYMOUS_s1450_24e, ref global bit[4] symbolic__ANONYMOUS_s1451_24f)/*local/test.sk:41*/
{
  {
    {
      _out_249 = 0;
      bit _pac_sc_s71_250;
      bit _pac_sc_s71_s73_251;
      tree_inv@ANONYMOUS(x_247, _pac_sc_s71_s73_251, active__ANONYMOUS_s1447_24a, locvars__ANONYMOUS_s1448_24c, next__ANONYMOUS_s1449_24d, supernext__ANONYMOUS_s1450_24e, symbolic__ANONYMOUS_s1451_24f);
      _pac_sc_s71_250 = _pac_sc_s71_s73_251;
      if(_pac_sc_s71_250)/*local/test.sk:42*/
      {
        assert ((r_246 >= 0) && (r_246 < 2)); //local/test.sk:42: Array out of bounds
        _pac_sc_s71_250 = (intvars__ANONYMOUS_s776_24b[r_246]) == old_min_x_248;
      }
      _out_249 = _pac_sc_s71_250;
      return;
    }
  }
}
/*local/test.sk:37*/

void pre_cond_list_find_min_rec (int x_b3, ref bit _out_b4, ref global bit[4] active__ANONYMOUS_s1611_b5, ref global int[3] locvars__ANONYMOUS_s1646_b6, ref global int[4] next__ANONYMOUS_s1612_b7, ref global int[4] supernext__ANONYMOUS_s1613_b8, ref global bit[4] symbolic__ANONYMOUS_s1614_b9)/*local/test.sk:37*/
{
  {
    {
      _out_b4 = 0;
      bit _out_s247_ba;
      tree_inv@ANONYMOUS(x_b3, _out_s247_ba, active__ANONYMOUS_s1611_b5, locvars__ANONYMOUS_s1646_b6, next__ANONYMOUS_s1612_b7, supernext__ANONYMOUS_s1613_b8, symbolic__ANONYMOUS_s1614_b9);
      _out_b4 = _out_s247_ba;
      return;
    }
  }
}
/*lseg_header.skh:1026*/

void ranking_decreases (int rec_1b0, int v_1b1, int v2_1b2, ref bit _out_1b3, ref global bit[4] active__ANONYMOUS_s1387_1b4, ref global bit[4 * 4] history__ANONYMOUS_s1385_1b5, ref global int[4] key__ANONYMOUS_s1388_1b6, ref global int[3] locvars__ANONYMOUS_s884_1b7, ref global int[4] next__ANONYMOUS_s1389_1b8, ref global bit[4 * 4] p_history__ANONYMOUS_s964_1b9, ref global int ranking__ANONYMOUS_s885_1ba, ref global int[4] supernext__ANONYMOUS_s1390_1bb, ref global bit[4] symbolic__ANONYMOUS_s1391_1bc, ref global int ts__ANONYMOUS_s965_1bd)/*lseg_header.skh:1026*/
{
  {
    {
      _out_1b3 = 0;
      assert ((v_1b1 > 0) && (v_1b1 < 3)); //Assert at lseg_header.skh:1027 (-7322363402574130940)
      assert ((v2_1b2 > 0) && (v2_1b2 < 3)); //Assert at lseg_header.skh:1028 (823559748416101550)
      int new_ranking_1be;
      new_ranking_1be = -1;
      if(((rec_1b0 == 1) || (rec_1b0 == 2)) || (rec_1b0 == 3))/*lseg_header.skh:1030*/
      {
        bit _pac_sc_s1808;
        {
          assert ((v_1b1 >= 0) && (v_1b1 < 3)); //lseg_header.skh:1031: Array out of bounds
          _pac_sc_s1808 = (locvars__ANONYMOUS_s884_1b7[v_1b1]) >= 0;
          if(_pac_sc_s1808)/*lseg_header.skh:1031*/
          {
            assert ((v_1b1 >= 0) && (v_1b1 < 3)); //lseg_header.skh:1031: Array out of bounds
            _pac_sc_s1808 = (locvars__ANONYMOUS_s884_1b7[v_1b1]) < 4;
          }
        }
        if(!(_pac_sc_s1808))/*lseg_header.skh:1031*/
        {
          _out_1b3 = ranking__ANONYMOUS_s885_1ba == 0;
          return;
        }
        else
        {
          if(rec_1b0 == 1)/*lseg_header.skh:1033*/
          {
            int new_ranking_s249_1bf;
            int l_26d_s1701;
            assert ((v_1b1 >= 0) && (v_1b1 < 3)); //lseg_header.skh:1033: Array out of bounds
            l_26d_s1701 = locvars__ANONYMOUS_s884_1b7[v_1b1];
            len_comp@ANONYMOUS(l_26d_s1701, new_ranking_s249_1bf, active__ANONYMOUS_s1387_1b4, history__ANONYMOUS_s1385_1b5, next__ANONYMOUS_s1389_1b8, p_history__ANONYMOUS_s964_1b9, supernext__ANONYMOUS_s1390_1bb, symbolic__ANONYMOUS_s1391_1bc, ts__ANONYMOUS_s965_1bd);
            new_ranking_1be = new_ranking_s249_1bf;
          }
          else
          {
            if(rec_1b0 == 2)/*lseg_header.skh:1034*/
            {
              int new_ranking_s251_1c0;
              int l_277_s1702;
              assert ((v_1b1 >= 0) && (v_1b1 < 3)); //lseg_header.skh:1034: Array out of bounds
              l_277_s1702 = locvars__ANONYMOUS_s884_1b7[v_1b1];
              max_comp@ANONYMOUS(l_277_s1702, new_ranking_s251_1c0, active__ANONYMOUS_s1387_1b4, history__ANONYMOUS_s1385_1b5, key__ANONYMOUS_s1388_1b6, next__ANONYMOUS_s1389_1b8, p_history__ANONYMOUS_s964_1b9, supernext__ANONYMOUS_s1390_1bb, symbolic__ANONYMOUS_s1391_1bc, ts__ANONYMOUS_s965_1bd);
              new_ranking_1be = new_ranking_s251_1c0;
            }
            else
            {
              if(rec_1b0 == 3)/*lseg_header.skh:1035*/
              {
                int new_ranking_s253_1c1;
                int l_25a_s1703;
                assert ((v_1b1 >= 0) && (v_1b1 < 3)); //lseg_header.skh:1035: Array out of bounds
                l_25a_s1703 = locvars__ANONYMOUS_s884_1b7[v_1b1];
                min_comp@ANONYMOUS(l_25a_s1703, new_ranking_s253_1c1, active__ANONYMOUS_s1387_1b4, history__ANONYMOUS_s1385_1b5, key__ANONYMOUS_s1388_1b6, next__ANONYMOUS_s1389_1b8, p_history__ANONYMOUS_s964_1b9, supernext__ANONYMOUS_s1390_1bb, symbolic__ANONYMOUS_s1391_1bc, ts__ANONYMOUS_s965_1bd);
                new_ranking_1be = new_ranking_s253_1c1;
              }
            }
          }
        }
      }
      else
      {
        if(((rec_1b0 == 5) || (rec_1b0 == 6)) || (rec_1b0 == 7))/*lseg_header.skh:1037*/
        {
          bit _pac_sc_s1809;
          {
            assert ((v_1b1 >= 0) && (v_1b1 < 3)); //lseg_header.skh:1038: Array out of bounds
            _pac_sc_s1809 = (locvars__ANONYMOUS_s884_1b7[v_1b1]) >= 0;
            if(_pac_sc_s1809)/*lseg_header.skh:1038*/
            {
              assert ((v_1b1 >= 0) && (v_1b1 < 3)); //lseg_header.skh:1038: Array out of bounds
              _pac_sc_s1809 = (locvars__ANONYMOUS_s884_1b7[v_1b1]) < 4;
            }
          }
          if(!(_pac_sc_s1809))/*lseg_header.skh:1038*/
          {
            _out_1b3 = ranking__ANONYMOUS_s885_1ba == 0;
            return;
          }
          else
          {
            bit _pac_sc_s1810;
            {
              assert ((v2_1b2 >= 0) && (v2_1b2 < 3)); //lseg_header.skh:1039: Array out of bounds
              _pac_sc_s1810 = (locvars__ANONYMOUS_s884_1b7[v2_1b2]) >= 0;
              if(_pac_sc_s1810)/*lseg_header.skh:1039*/
              {
                assert ((v2_1b2 >= 0) && (v2_1b2 < 3)); //lseg_header.skh:1039: Array out of bounds
                _pac_sc_s1810 = (locvars__ANONYMOUS_s884_1b7[v2_1b2]) < 4;
              }
            }
            if(!(_pac_sc_s1810))/*lseg_header.skh:1039*/
            {
              _out_1b3 = ranking__ANONYMOUS_s885_1ba == 0;
              return;
            }
            else
            {
              if(rec_1b0 == 5)/*lseg_header.skh:1041*/
              {
                int new_ranking_s255_1c2;
                int l1_28b_s1704;
                assert ((v_1b1 >= 0) && (v_1b1 < 3)); //lseg_header.skh:1041: Array out of bounds
                l1_28b_s1704 = locvars__ANONYMOUS_s884_1b7[v_1b1];
                int l2_28c_s1705;
                assert ((v2_1b2 >= 0) && (v2_1b2 < 3)); //lseg_header.skh:1041: Array out of bounds
                l2_28c_s1705 = locvars__ANONYMOUS_s884_1b7[v2_1b2];
                lenseg_comp@ANONYMOUS(l1_28b_s1704, l2_28c_s1705, new_ranking_s255_1c2, active__ANONYMOUS_s1387_1b4, history__ANONYMOUS_s1385_1b5, next__ANONYMOUS_s1389_1b8, p_history__ANONYMOUS_s964_1b9, supernext__ANONYMOUS_s1390_1bb, symbolic__ANONYMOUS_s1391_1bc, ts__ANONYMOUS_s965_1bd);
                new_ranking_1be = new_ranking_s255_1c2;
              }
              else
              {
                if(rec_1b0 == 6)/*lseg_header.skh:1042*/
                {
                  int new_ranking_s257_1c3;
                  int l1_296_s1706;
                  assert ((v_1b1 >= 0) && (v_1b1 < 3)); //lseg_header.skh:1042: Array out of bounds
                  l1_296_s1706 = locvars__ANONYMOUS_s884_1b7[v_1b1];
                  int l2_297_s1707;
                  assert ((v2_1b2 >= 0) && (v2_1b2 < 3)); //lseg_header.skh:1042: Array out of bounds
                  l2_297_s1707 = locvars__ANONYMOUS_s884_1b7[v2_1b2];
                  maxseg_comp@ANONYMOUS(l1_296_s1706, l2_297_s1707, new_ranking_s257_1c3, active__ANONYMOUS_s1387_1b4, history__ANONYMOUS_s1385_1b5, key__ANONYMOUS_s1388_1b6, next__ANONYMOUS_s1389_1b8, p_history__ANONYMOUS_s964_1b9, supernext__ANONYMOUS_s1390_1bb, symbolic__ANONYMOUS_s1391_1bc, ts__ANONYMOUS_s965_1bd);
                  new_ranking_1be = new_ranking_s257_1c3;
                }
                else
                {
                  if(rec_1b0 == 7)/*lseg_header.skh:1043*/
                  {
                    int new_ranking_s259_1c4;
                    int l1_2a2_s1708;
                    assert ((v_1b1 >= 0) && (v_1b1 < 3)); //lseg_header.skh:1043: Array out of bounds
                    l1_2a2_s1708 = locvars__ANONYMOUS_s884_1b7[v_1b1];
                    int l2_2a3_s1709;
                    assert ((v2_1b2 >= 0) && (v2_1b2 < 3)); //lseg_header.skh:1043: Array out of bounds
                    l2_2a3_s1709 = locvars__ANONYMOUS_s884_1b7[v2_1b2];
                    minseg_comp@ANONYMOUS(l1_2a2_s1708, l2_2a3_s1709, new_ranking_s259_1c4, active__ANONYMOUS_s1387_1b4, history__ANONYMOUS_s1385_1b5, key__ANONYMOUS_s1388_1b6, next__ANONYMOUS_s1389_1b8, p_history__ANONYMOUS_s964_1b9, supernext__ANONYMOUS_s1390_1bb, symbolic__ANONYMOUS_s1391_1bc, ts__ANONYMOUS_s965_1bd);
                    new_ranking_1be = new_ranking_s259_1c4;
                  }
                }
              }
            }
          }
        }
      }
      _out_1b3 = (ranking__ANONYMOUS_s885_1ba > new_ranking_1be) && (new_ranking_1be >= 0);
      return;
    }
  }
}
/*lseg_header.skh:1006*/

void ranking_snapshot (int rec_c8, int v_c9, int v2_ca, ref global bit[4] active__ANONYMOUS_s1434_cb, ref global bit[4 * 4] history__ANONYMOUS_s1528_cc, ref global int[4] key__ANONYMOUS_s1435_cd, ref global int[3] locvars__ANONYMOUS_s916_ce, ref global int[4] next__ANONYMOUS_s1436_cf, ref global bit[4 * 4] p_history__ANONYMOUS_s1529_d0, ref global int ranking__ANONYMOUS_s917_d1, ref global int[4] supernext__ANONYMOUS_s1437_d2, ref global bit[4] symbolic__ANONYMOUS_s1438_d3, ref global int ts__ANONYMOUS_s1439_d4)/*lseg_header.skh:1006*/
{
  {
    {
      assert ((v_c9 > 0) && (v_c9 < 3)); //Assert at lseg_header.skh:1007 (-4471318181764718186)
      assert ((v2_ca > 0) && (v2_ca < 3)); //Assert at lseg_header.skh:1008 (5051257297494625054)
      if(((rec_c8 == 1) || (rec_c8 == 2)) || (rec_c8 == 3))/*lseg_header.skh:1009*/
      {
        bit _pac_sc_s1805;
        {
          assert ((v_c9 >= 0) && (v_c9 < 3)); //lseg_header.skh:1010: Array out of bounds
          _pac_sc_s1805 = (locvars__ANONYMOUS_s916_ce[v_c9]) >= 0;
          if(_pac_sc_s1805)/*lseg_header.skh:1010*/
          {
            assert ((v_c9 >= 0) && (v_c9 < 3)); //lseg_header.skh:1010: Array out of bounds
            _pac_sc_s1805 = (locvars__ANONYMOUS_s916_ce[v_c9]) < 4;
          }
        }
        if(!(_pac_sc_s1805))/*lseg_header.skh:1010*/
        {
          return;
        }
        else
        {
          bit _out_s271_d5;
          int t_265_s1686;
          assert ((v_c9 >= 0) && (v_c9 < 3)); //lseg_header.skh:1011: Array out of bounds
          t_265_s1686 = locvars__ANONYMOUS_s916_ce[v_c9];
          treeness@ANONYMOUS(t_265_s1686, _out_s271_d5, active__ANONYMOUS_s1434_cb, next__ANONYMOUS_s1436_cf, supernext__ANONYMOUS_s1437_d2, symbolic__ANONYMOUS_s1438_d3);
          if(!(_out_s271_d5))/*lseg_header.skh:1011*/
          {
            return;
          }
          else
          {
            if(rec_c8 == 1)/*lseg_header.skh:1012*/
            {
              int ranking_s273_d6;
              int l_26d_s1687;
              assert ((v_c9 >= 0) && (v_c9 < 3)); //lseg_header.skh:1012: Array out of bounds
              l_26d_s1687 = locvars__ANONYMOUS_s916_ce[v_c9];
              len_comp@ANONYMOUS(l_26d_s1687, ranking_s273_d6, active__ANONYMOUS_s1434_cb, history__ANONYMOUS_s1528_cc, next__ANONYMOUS_s1436_cf, p_history__ANONYMOUS_s1529_d0, supernext__ANONYMOUS_s1437_d2, symbolic__ANONYMOUS_s1438_d3, ts__ANONYMOUS_s1439_d4);
              ranking__ANONYMOUS_s917_d1 = ranking_s273_d6;
            }
            else
            {
              if(rec_c8 == 2)/*lseg_header.skh:1013*/
              {
                int ranking_s275_d7;
                int l_277_s1688;
                assert ((v_c9 >= 0) && (v_c9 < 3)); //lseg_header.skh:1013: Array out of bounds
                l_277_s1688 = locvars__ANONYMOUS_s916_ce[v_c9];
                max_comp@ANONYMOUS(l_277_s1688, ranking_s275_d7, active__ANONYMOUS_s1434_cb, history__ANONYMOUS_s1528_cc, key__ANONYMOUS_s1435_cd, next__ANONYMOUS_s1436_cf, p_history__ANONYMOUS_s1529_d0, supernext__ANONYMOUS_s1437_d2, symbolic__ANONYMOUS_s1438_d3, ts__ANONYMOUS_s1439_d4);
                ranking__ANONYMOUS_s917_d1 = ranking_s275_d7;
              }
              else
              {
                if(rec_c8 == 3)/*lseg_header.skh:1014*/
                {
                  int ranking_s277_d8;
                  int l_25a_s1689;
                  assert ((v_c9 >= 0) && (v_c9 < 3)); //lseg_header.skh:1014: Array out of bounds
                  l_25a_s1689 = locvars__ANONYMOUS_s916_ce[v_c9];
                  min_comp@ANONYMOUS(l_25a_s1689, ranking_s277_d8, active__ANONYMOUS_s1434_cb, history__ANONYMOUS_s1528_cc, key__ANONYMOUS_s1435_cd, next__ANONYMOUS_s1436_cf, p_history__ANONYMOUS_s1529_d0, supernext__ANONYMOUS_s1437_d2, symbolic__ANONYMOUS_s1438_d3, ts__ANONYMOUS_s1439_d4);
                  ranking__ANONYMOUS_s917_d1 = ranking_s277_d8;
                }
              }
            }
          }
        }
      }
      else
      {
        if(((rec_c8 == 5) || (rec_c8 == 6)) || (rec_c8 == 7))/*lseg_header.skh:1016*/
        {
          bit _pac_sc_s1806;
          {
            assert ((v_c9 >= 0) && (v_c9 < 3)); //lseg_header.skh:1017: Array out of bounds
            _pac_sc_s1806 = (locvars__ANONYMOUS_s916_ce[v_c9]) >= 0;
            if(_pac_sc_s1806)/*lseg_header.skh:1017*/
            {
              assert ((v_c9 >= 0) && (v_c9 < 3)); //lseg_header.skh:1017: Array out of bounds
              _pac_sc_s1806 = (locvars__ANONYMOUS_s916_ce[v_c9]) < 4;
            }
          }
          if(!(_pac_sc_s1806))/*lseg_header.skh:1017*/
          {
            return;
          }
          else
          {
            bit _pac_sc_s1807;
            {
              assert ((v2_ca >= 0) && (v2_ca < 3)); //lseg_header.skh:1018: Array out of bounds
              _pac_sc_s1807 = (locvars__ANONYMOUS_s916_ce[v2_ca]) >= 0;
              if(_pac_sc_s1807)/*lseg_header.skh:1018*/
              {
                assert ((v2_ca >= 0) && (v2_ca < 3)); //lseg_header.skh:1018: Array out of bounds
                _pac_sc_s1807 = (locvars__ANONYMOUS_s916_ce[v2_ca]) < 4;
              }
            }
            if(!(_pac_sc_s1807))/*lseg_header.skh:1018*/
            {
              return;
            }
            else
            {
              bit _out_s279_d9;
              int t1_282_s1690;
              assert ((v_c9 >= 0) && (v_c9 < 3)); //lseg_header.skh:1019: Array out of bounds
              t1_282_s1690 = locvars__ANONYMOUS_s916_ce[v_c9];
              int t2_283_s1691;
              assert ((v2_ca >= 0) && (v2_ca < 3)); //lseg_header.skh:1019: Array out of bounds
              t2_283_s1691 = locvars__ANONYMOUS_s916_ce[v2_ca];
              p_treeness@ANONYMOUS(t1_282_s1690, t2_283_s1691, _out_s279_d9, active__ANONYMOUS_s1434_cb, next__ANONYMOUS_s1436_cf, supernext__ANONYMOUS_s1437_d2, symbolic__ANONYMOUS_s1438_d3);
              if(!(_out_s279_d9))/*lseg_header.skh:1019*/
              {
                return;
              }
            }
          }
          if(rec_c8 == 5)/*lseg_header.skh:1020*/
          {
            int ranking_s281_da;
            int l1_28b_s1692;
            assert ((v_c9 >= 0) && (v_c9 < 3)); //lseg_header.skh:1020: Array out of bounds
            l1_28b_s1692 = locvars__ANONYMOUS_s916_ce[v_c9];
            int l2_28c_s1693;
            assert ((v2_ca >= 0) && (v2_ca < 3)); //lseg_header.skh:1020: Array out of bounds
            l2_28c_s1693 = locvars__ANONYMOUS_s916_ce[v2_ca];
            lenseg_comp@ANONYMOUS(l1_28b_s1692, l2_28c_s1693, ranking_s281_da, active__ANONYMOUS_s1434_cb, history__ANONYMOUS_s1528_cc, next__ANONYMOUS_s1436_cf, p_history__ANONYMOUS_s1529_d0, supernext__ANONYMOUS_s1437_d2, symbolic__ANONYMOUS_s1438_d3, ts__ANONYMOUS_s1439_d4);
            ranking__ANONYMOUS_s917_d1 = ranking_s281_da;
          }
          else
          {
            if(rec_c8 == 6)/*lseg_header.skh:1021*/
            {
              int ranking_s283_db;
              int l1_296_s1694;
              assert ((v_c9 >= 0) && (v_c9 < 3)); //lseg_header.skh:1021: Array out of bounds
              l1_296_s1694 = locvars__ANONYMOUS_s916_ce[v_c9];
              int l2_297_s1695;
              assert ((v2_ca >= 0) && (v2_ca < 3)); //lseg_header.skh:1021: Array out of bounds
              l2_297_s1695 = locvars__ANONYMOUS_s916_ce[v2_ca];
              maxseg_comp@ANONYMOUS(l1_296_s1694, l2_297_s1695, ranking_s283_db, active__ANONYMOUS_s1434_cb, history__ANONYMOUS_s1528_cc, key__ANONYMOUS_s1435_cd, next__ANONYMOUS_s1436_cf, p_history__ANONYMOUS_s1529_d0, supernext__ANONYMOUS_s1437_d2, symbolic__ANONYMOUS_s1438_d3, ts__ANONYMOUS_s1439_d4);
              ranking__ANONYMOUS_s917_d1 = ranking_s283_db;
            }
            else
            {
              if(rec_c8 == 7)/*lseg_header.skh:1022*/
              {
                int ranking_s285_dc;
                int l1_2a2_s1696;
                assert ((v_c9 >= 0) && (v_c9 < 3)); //lseg_header.skh:1022: Array out of bounds
                l1_2a2_s1696 = locvars__ANONYMOUS_s916_ce[v_c9];
                int l2_2a3_s1697;
                assert ((v2_ca >= 0) && (v2_ca < 3)); //lseg_header.skh:1022: Array out of bounds
                l2_2a3_s1697 = locvars__ANONYMOUS_s916_ce[v2_ca];
                minseg_comp@ANONYMOUS(l1_2a2_s1696, l2_2a3_s1697, ranking_s285_dc, active__ANONYMOUS_s1434_cb, history__ANONYMOUS_s1528_cc, key__ANONYMOUS_s1435_cd, next__ANONYMOUS_s1436_cf, p_history__ANONYMOUS_s1529_d0, supernext__ANONYMOUS_s1437_d2, symbolic__ANONYMOUS_s1438_d3, ts__ANONYMOUS_s1439_d4);
                ranking__ANONYMOUS_s917_d1 = ranking_s285_dc;
              }
            }
          }
        }
      }
    }
  }
}
/*local/test.sk:17*/

void rec_list_find_min_rec (int x_1cc, int recret_1cd, ref int rv_1ce, ref bit[3] new_symbolic_1cf, ref int[3] new_next_1d0, ref int[3] new_supernext_1d1, ref int[3] new_key_1d2, ref global bit[4] active__ANONYMOUS_s1293_1d3, ref global bit error_flag__ANONYMOUS_s1194_1d4, ref global bit[4 * 4] history__ANONYMOUS_s1313_1d5, ref global int[2] intvars__ANONYMOUS_s718_1d6, ref global int[4] key__ANONYMOUS_s1294_1d7, ref global int[3] locvars__ANONYMOUS_s719_1d8, ref global int newer_min__ANONYMOUS_s720_1d9, ref global int newer_sll__ANONYMOUS_s721_1da, ref global int[4] next__ANONYMOUS_s1295_1db, ref global bit[4 * 4] p_history__ANONYMOUS_s1530_1dc, ref global int[4] supernext__ANONYMOUS_s1296_1dd, ref global bit[4] symbolic__ANONYMOUS_s1297_1de, ref global int ts__ANONYMOUS_s1298_1df)/*local/test.sk:17*/
{
  {
    {
      bit _out_s239_1e0;
      pre_cond_list_find_min_rec@ANONYMOUS(x_1cc, _out_s239_1e0, active__ANONYMOUS_s1293_1d3, locvars__ANONYMOUS_s719_1d8, next__ANONYMOUS_s1295_1db, supernext__ANONYMOUS_s1296_1dd, symbolic__ANONYMOUS_s1297_1de);
      assertPost@ANONYMOUS(_out_s239_1e0, error_flag__ANONYMOUS_s1194_1d4);
      snapshot_list_find_min_rec@ANONYMOUS(x_1cc, newer_sll__ANONYMOUS_s721_1da, newer_min__ANONYMOUS_s720_1d9, active__ANONYMOUS_s1293_1d3, history__ANONYMOUS_s1313_1d5, key__ANONYMOUS_s1294_1d7, locvars__ANONYMOUS_s719_1d8, next__ANONYMOUS_s1295_1db, p_history__ANONYMOUS_s1530_1dc, supernext__ANONYMOUS_s1296_1dd, symbolic__ANONYMOUS_s1297_1de, ts__ANONYMOUS_s1298_1df);
      int _out_s241_1e1;
      int r_360_s1710;
      assert ((x_1cc >= 0) && (x_1cc < 3)); //local/test.sk:23: Array out of bounds
      r_360_s1710 = locvars__ANONYMOUS_s719_1d8[x_1cc];
      havoc@ANONYMOUS(r_360_s1710, new_symbolic_1cf, new_next_1d0, new_supernext_1d1, new_key_1d2, _out_s241_1e1, active__ANONYMOUS_s1293_1d3, history__ANONYMOUS_s1313_1d5, key__ANONYMOUS_s1294_1d7, next__ANONYMOUS_s1295_1db, p_history__ANONYMOUS_s1530_1dc, supernext__ANONYMOUS_s1296_1dd, symbolic__ANONYMOUS_s1297_1de, ts__ANONYMOUS_s1298_1df);
      _out_s241_1e1;
      assert ((recret_1cd >= 0) && (recret_1cd < 2)); //local/test.sk:25: Either null pointer or Array out of bounds
      intvars__ANONYMOUS_s718_1d6[recret_1cd] = rv_1ce;
      bit _out_s243_1e2;
      post_cond_list_find_min_rec@ANONYMOUS(recret_1cd, x_1cc, newer_min__ANONYMOUS_s720_1d9, _out_s243_1e2, active__ANONYMOUS_s1293_1d3, intvars__ANONYMOUS_s718_1d6, locvars__ANONYMOUS_s719_1d8, next__ANONYMOUS_s1295_1db, supernext__ANONYMOUS_s1296_1dd, symbolic__ANONYMOUS_s1297_1de);
      assumePre@ANONYMOUS(_out_s243_1e2, error_flag__ANONYMOUS_s1194_1d4);
    }
  }
}
/*aux.skh:102*/

void ret_int (int v_244, ref global int ret__ANONYMOUS_s836_245)/*aux.skh:102*/
{
  {
    {
      assert (v_244 >= 0); //Assert at aux.skh:103 (-5824345294689787477)
      assert (v_244 < 2); //Assert at aux.skh:104 (-2484527381685108503)
      ret__ANONYMOUS_s836_245 = v_244;
    }
  }
}
/*lseg_header.skh:18*/

uninterp void sll (int l, int t, ref bit _out)/*lseg_header.skh:18*/
/*lseg_header.skh:30*/

void sll_comp (int l_3d3, ref bit _out_3d4, ref global bit[4] active__ANONYMOUS_s1585_3d5, ref global bit[4 * 4] history__ANONYMOUS_s1581_3d6, ref global int[4] key__ANONYMOUS_s1586_3d7, ref global int[4] next__ANONYMOUS_s1587_3d8, ref global bit[4 * 4] p_history__ANONYMOUS_s1431_3d9, ref global int[4] supernext__ANONYMOUS_s1588_3da, ref global bit[4] symbolic__ANONYMOUS_s1589_3db, ref global int ts__ANONYMOUS_s1432_3dc)/*lseg_header.skh:30*/
{
  {
    {
      _out_3d4 = 0;
      bit _out_s165_3dd;
      sll_recursive@ANONYMOUS(l_3d3, 3, _out_s165_3dd, active__ANONYMOUS_s1585_3d5, history__ANONYMOUS_s1581_3d6, key__ANONYMOUS_s1586_3d7, next__ANONYMOUS_s1587_3d8, p_history__ANONYMOUS_s1431_3d9, supernext__ANONYMOUS_s1588_3da, symbolic__ANONYMOUS_s1589_3db, ts__ANONYMOUS_s1432_3dc);
      _out_3d4 = _out_s165_3dd;
      return;
    }
  }
}
/*lseg_header.skh:50*/

void sll_history (int l_44a, int ts_0_44b, ref bit _out_44c, ref global bit[4 * 4] history__ANONYMOUS_s746_44d, ref global int ts__ANONYMOUS_s747_44e)/*lseg_header.skh:50*/
{
  {
    {
      _out_44c = 0;
      int ts_44f;
      ts_44f = ts_0_44b;
      bit __sa0_450;
      bit _pac_sc_s1882;
      {
        _pac_sc_s1882 = ts_44f > 0;
        if(_pac_sc_s1882)/*lseg_header.skh:51*/
        {
          assert ((l_44a >= 0) && (l_44a < 4)); //lseg_header.skh:51: Array out of bounds
          assert ((ts_44f >= 0) && (ts_44f < 4)); //lseg_header.skh:51: Array out of bounds
          _pac_sc_s1882 = history__ANONYMOUS_s746_44d[(4 * l_44a) + ts_44f];
        }
      }
      __sa0_450 = _pac_sc_s1882;
      while(__sa0_450)
      {
        int uo_s29_452;
        uo_s29_452 = ts_44f;
        ts_44f = ts_44f - 1;
        uo_s29_452;
        bit _pac_sc_s1883;
        {
          _pac_sc_s1883 = ts_44f > 0;
          if(_pac_sc_s1883)/*lseg_header.skh:51*/
          {
            assert ((l_44a >= 0) && (l_44a < 4)); //lseg_header.skh:51: Array out of bounds
            assert ((ts_44f >= 0) && (ts_44f < 4)); //lseg_header.skh:51: Array out of bounds
            _pac_sc_s1883 = history__ANONYMOUS_s746_44d[(4 * l_44a) + ts_44f];
          }
        }
        __sa0_450 = _pac_sc_s1883;
      }
      bit _out_s186_453;
      sll(l_44a, ts_44f, _out_s186_453);
      _out_44c = _out_s186_453;
      return;
    }
  }
}
/*lseg_header.skh:35*/

void sll_recursive (int l_42a, int bnd_42b, ref bit _out_42c, ref global bit[4] active__ANONYMOUS_s909_42d, ref global bit[4 * 4] history__ANONYMOUS_s1536_42e, ref global int[4] key__ANONYMOUS_s910_42f, ref global int[4] next__ANONYMOUS_s911_430, ref global bit[4 * 4] p_history__ANONYMOUS_s1030_431, ref global int[4] supernext__ANONYMOUS_s912_432, ref global bit[4] symbolic__ANONYMOUS_s913_433, ref global int ts__ANONYMOUS_s914_434)/*lseg_header.skh:35*/
{
  {
    {
      _out_42c = 0;
      if((l_42a < 0) || (l_42a >= 4))/*lseg_header.skh:36*/
      {
        _out_42c = 0;
        return;
      }
      assert ((l_42a >= 0) && (l_42a < 4)); //lseg_header.skh:37: Array out of bounds
      if(!(active__ANONYMOUS_s909_42d[l_42a]))/*lseg_header.skh:37*/
      {
        _out_42c = 0;
        return;
      }
      if(l_42a == 0)/*lseg_header.skh:38*/
      {
        _out_42c = 1;
        return;
      }
      if(bnd_42b < 0)/*lseg_header.skh:39*/
      {
        _out_42c = 0;
        return;
      }
      else
      {
        assert ((l_42a >= 0) && (l_42a < 4)); //lseg_header.skh:41: Array out of bounds
        if(symbolic__ANONYMOUS_s913_433[l_42a])/*lseg_header.skh:41*/
        {
          bit _out_s167_435;
          sll_history@ANONYMOUS(l_42a, ts__ANONYMOUS_s914_434, _out_s167_435, history__ANONYMOUS_s1536_42e, ts__ANONYMOUS_s914_434);
          _out_42c = _out_s167_435;
          return;
        }
        else
        {
          assert ((l_42a >= 0) && (l_42a < 4)); //lseg_header.skh:42: Array out of bounds
          if(0 == (next__ANONYMOUS_s911_430[l_42a]))/*lseg_header.skh:42*/
          {
            _out_42c = 1;
            return;
          }
          else
          {
            bit _pac_sc_s1875;
            {
              assert ((l_42a >= 0) && (l_42a < 4)); //lseg_header.skh:43: Array out of bounds
              _pac_sc_s1875 = 0 < (next__ANONYMOUS_s911_430[l_42a]);
              if(_pac_sc_s1875)/*lseg_header.skh:43*/
              {
                assert ((l_42a >= 0) && (l_42a < 4)); //lseg_header.skh:43: Array out of bounds
                _pac_sc_s1875 = (next__ANONYMOUS_s911_430[l_42a]) < 4;
              }
            }
            if(_pac_sc_s1875)/*lseg_header.skh:43*/
            {
              bit _pac_sc_s168_436;
              bit _pac_sc_s168_s170_437;
              int l_42a_s1765;
              assert ((l_42a >= 0) && (l_42a < 4)); //lseg_header.skh:43: Array out of bounds
              l_42a_s1765 = next__ANONYMOUS_s911_430[l_42a];
              int bnd_42b_s1766;
              bnd_42b_s1766 = bnd_42b - 1;
              sll_recursive@ANONYMOUS(l_42a_s1765, bnd_42b_s1766, _pac_sc_s168_s170_437, active__ANONYMOUS_s909_42d, history__ANONYMOUS_s1536_42e, key__ANONYMOUS_s910_42f, next__ANONYMOUS_s911_430, p_history__ANONYMOUS_s1030_431, supernext__ANONYMOUS_s912_432, symbolic__ANONYMOUS_s913_433, ts__ANONYMOUS_s914_434);
              _pac_sc_s168_436 = _pac_sc_s168_s170_437;
              if(_pac_sc_s168_436)/*lseg_header.skh:43*/
              {
                int _pac_sc_s168_s172_438;
                int l_378_s1767;
                assert ((l_42a >= 0) && (l_42a < 4)); //lseg_header.skh:43: Array out of bounds
                l_378_s1767 = next__ANONYMOUS_s911_430[l_42a];
                int bnd_379_s1768;
                bnd_379_s1768 = bnd_42b - 1;
                min_recursive@ANONYMOUS(l_378_s1767, bnd_379_s1768, _pac_sc_s168_s172_438, active__ANONYMOUS_s909_42d, history__ANONYMOUS_s1536_42e, key__ANONYMOUS_s910_42f, next__ANONYMOUS_s911_430, p_history__ANONYMOUS_s1030_431, supernext__ANONYMOUS_s912_432, symbolic__ANONYMOUS_s913_433, ts__ANONYMOUS_s914_434);
                assert ((l_42a >= 0) && (l_42a < 4)); //lseg_header.skh:43: Array out of bounds
                _pac_sc_s168_436 = (key__ANONYMOUS_s910_42f[l_42a]) <= _pac_sc_s168_s172_438;
              }
              _out_42c = _pac_sc_s168_436;
              return;
            }
            else
            {
              assert ((l_42a >= 0) && (l_42a < 4)); //lseg_header.skh:44: Array out of bounds
              if(0 == (supernext__ANONYMOUS_s912_432[l_42a]))/*lseg_header.skh:44*/
              {
                _out_42c = 1;
                return;
              }
              else
              {
                bit _pac_sc_s1876;
                {
                  assert ((l_42a >= 0) && (l_42a < 4)); //lseg_header.skh:45: Array out of bounds
                  _pac_sc_s1876 = 0 < (supernext__ANONYMOUS_s912_432[l_42a]);
                  if(_pac_sc_s1876)/*lseg_header.skh:45*/
                  {
                    assert ((l_42a >= 0) && (l_42a < 4)); //lseg_header.skh:45: Array out of bounds
                    _pac_sc_s1876 = (supernext__ANONYMOUS_s912_432[l_42a]) < 4;
                  }
                }
                if(_pac_sc_s1876)/*lseg_header.skh:45*/
                {
                  bit _pac_sc_s173_439;
                  bit _pac_sc_s174_43a;
                  bit _pac_sc_s174_s176_43b;
                  sllseg_history@ANONYMOUS(l_42a, ts__ANONYMOUS_s914_434, _pac_sc_s174_s176_43b, p_history__ANONYMOUS_s1030_431, ts__ANONYMOUS_s914_434);
                  _pac_sc_s174_43a = _pac_sc_s174_s176_43b;
                  if(_pac_sc_s174_43a)/*lseg_header.skh:45*/
                  {
                    bit _pac_sc_s174_s178_43c;
                    int l_42a_s1769;
                    assert ((l_42a >= 0) && (l_42a < 4)); //lseg_header.skh:45: Array out of bounds
                    l_42a_s1769 = supernext__ANONYMOUS_s912_432[l_42a];
                    int bnd_42b_s1770;
                    bnd_42b_s1770 = bnd_42b - 1;
                    sll_recursive@ANONYMOUS(l_42a_s1769, bnd_42b_s1770, _pac_sc_s174_s178_43c, active__ANONYMOUS_s909_42d, history__ANONYMOUS_s1536_42e, key__ANONYMOUS_s910_42f, next__ANONYMOUS_s911_430, p_history__ANONYMOUS_s1030_431, supernext__ANONYMOUS_s912_432, symbolic__ANONYMOUS_s913_433, ts__ANONYMOUS_s914_434);
                    _pac_sc_s174_43a = _pac_sc_s174_s178_43c;
                  }
                  _pac_sc_s173_439 = _pac_sc_s174_43a;
                  if(_pac_sc_s173_439)/*lseg_header.skh:45*/
                  {
                    int _pac_sc_s173_s180_43d;
                    maxseg_history@ANONYMOUS(l_42a, ts__ANONYMOUS_s914_434, _pac_sc_s173_s180_43d, p_history__ANONYMOUS_s1030_431, ts__ANONYMOUS_s914_434);
                    int _pac_sc_s173_s182_43e;
                    int l_378_s1771;
                    assert ((l_42a >= 0) && (l_42a < 4)); //lseg_header.skh:45: Array out of bounds
                    l_378_s1771 = supernext__ANONYMOUS_s912_432[l_42a];
                    int bnd_379_s1772;
                    bnd_379_s1772 = bnd_42b - 1;
                    min_recursive@ANONYMOUS(l_378_s1771, bnd_379_s1772, _pac_sc_s173_s182_43e, active__ANONYMOUS_s909_42d, history__ANONYMOUS_s1536_42e, key__ANONYMOUS_s910_42f, next__ANONYMOUS_s911_430, p_history__ANONYMOUS_s1030_431, supernext__ANONYMOUS_s912_432, symbolic__ANONYMOUS_s913_433, ts__ANONYMOUS_s914_434);
                    _pac_sc_s173_439 = _pac_sc_s173_s180_43d <= _pac_sc_s173_s182_43e;
                  }
                  _out_42c = _pac_sc_s173_439;
                  return;
                }
                else
                {
                  _out_42c = 0;
                  return;
                }
              }
            }
          }
        }
      }
    }
  }
}
/*lseg_header.skh:23*/

uninterp void sllseg (int l1, int t, ref bit _out)/*lseg_header.skh:23*/
/*lseg_header.skh:75*/

void sllseg_history (int l1_454, int ts_0_455, ref bit _out_456, ref global bit[4 * 4] p_history__ANONYMOUS_s761_457, ref global int ts__ANONYMOUS_s762_458)/*lseg_header.skh:75*/
{
  {
    {
      _out_456 = 0;
      int ts_459;
      ts_459 = ts_0_455;
      bit __sa1_45a;
      bit _pac_sc_s1884;
      {
        _pac_sc_s1884 = ts_459 > 0;
        if(_pac_sc_s1884)/*lseg_header.skh:76*/
        {
          assert ((l1_454 >= 0) && (l1_454 < 4)); //lseg_header.skh:76: Array out of bounds
          assert ((ts_459 >= 0) && (ts_459 < 4)); //lseg_header.skh:76: Array out of bounds
          _pac_sc_s1884 = p_history__ANONYMOUS_s761_457[(4 * l1_454) + ts_459];
        }
      }
      __sa1_45a = _pac_sc_s1884;
      while(__sa1_45a)
      {
        int uo_s28_45c;
        uo_s28_45c = ts_459;
        ts_459 = ts_459 - 1;
        uo_s28_45c;
        bit _pac_sc_s1885;
        {
          _pac_sc_s1885 = ts_459 > 0;
          if(_pac_sc_s1885)/*lseg_header.skh:76*/
          {
            assert ((l1_454 >= 0) && (l1_454 < 4)); //lseg_header.skh:76: Array out of bounds
            assert ((ts_459 >= 0) && (ts_459 < 4)); //lseg_header.skh:76: Array out of bounds
            _pac_sc_s1885 = p_history__ANONYMOUS_s761_457[(4 * l1_454) + ts_459];
          }
        }
        __sa1_45a = _pac_sc_s1885;
      }
      bit _out_s184_45d;
      sllseg(l1_454, ts_459, _out_s184_45d);
      _out_456 = _out_s184_45d;
      return;
    }
  }
}
/*local/test.sk:33*/

void snapshot_list_find_min_rec (int x_bb, ref int osll_bc, ref int omin_bd, ref global bit[4] active__ANONYMOUS_s1596_be, ref global bit[4 * 4] history__ANONYMOUS_s1551_bf, ref global int[4] key__ANONYMOUS_s1597_c0, ref global int[3] locvars__ANONYMOUS_s831_c1, ref global int[4] next__ANONYMOUS_s1598_c2, ref global bit[4 * 4] p_history__ANONYMOUS_s1599_c3, ref global int[4] supernext__ANONYMOUS_s1600_c4, ref global bit[4] symbolic__ANONYMOUS_s1601_c5, ref global int ts__ANONYMOUS_s1552_c6)/*local/test.sk:33*/
{
  {
    {
      int omin_s245_c7;
      int l_25a_s1685;
      assert ((x_bb >= 0) && (x_bb < 3)); //local/test.sk:34: Array out of bounds
      l_25a_s1685 = locvars__ANONYMOUS_s831_c1[x_bb];
      min_comp@ANONYMOUS(l_25a_s1685, omin_s245_c7, active__ANONYMOUS_s1596_be, history__ANONYMOUS_s1551_bf, key__ANONYMOUS_s1597_c0, next__ANONYMOUS_s1598_c2, p_history__ANONYMOUS_s1599_c3, supernext__ANONYMOUS_s1600_c4, symbolic__ANONYMOUS_s1601_c5, ts__ANONYMOUS_s1552_c6);
      omin_bd = omin_s245_c7;
    }
  }
}
/*local/test.sk:80*/

void statement0 (int locrange_108, int intrange_109, int locrange2_10a, int intrange2_10b, ref global bit[4] active__ANONYMOUS_s985_10c, ref global bit error_flag__ANONYMOUS_s1047_10d, ref global int fake_unfold__ANONYMOUS_s986_10e, ref global bit[4 * 4] history__ANONYMOUS_s1111_10f, ref global int[2] intvars__ANONYMOUS_s987_110, ref global int[4] key__ANONYMOUS_s988_111, ref global int[4] left__ANONYMOUS_s1662_112, ref global int[3] locvars__ANONYMOUS_s989_113, ref global int malloc_budget__ANONYMOUS_s1236_114, ref global int[4] next__ANONYMOUS_s1126_115, ref global bit[4 * 4] p_history__ANONYMOUS_s1248_116, ref global int[4] right__ANONYMOUS_s1663_117, ref global int[4] supernext__ANONYMOUS_s1127_118, ref global bit[4] symbolic__ANONYMOUS_s990_119, ref global int ts__ANONYMOUS_s991_11a)/*local/test.sk:80*/
{
  {
    {
      int locrange_11b;
      locrange_11b = locrange_108;
      int intrange_11c;
      intrange_11c = intrange_109;
      int locrange2_11d;
      locrange2_11d = locrange2_10a;
      int intrange2_11e;
      intrange2_11e = intrange2_10b;
      bit _has_out__11f;
      _has_out__11f = 0;
      int _whichexpr_s42_120;
      _whichexpr_s42_120 = ??/* H__18_391int:3 */;
      assert ((0 <= _whichexpr_s42_120) && (_whichexpr_s42_120 < 8)); //regen H__18
      int st_choice_121;
      st_choice_121 = (_whichexpr_s42_120 == 0 ? 1 : (_whichexpr_s42_120 == 1 ? 5 : (_whichexpr_s42_120 == 2 ? 2 : (_whichexpr_s42_120 == 3 ? 6 : (_whichexpr_s42_120 == 4 ? 0 : (_whichexpr_s42_120 == 5 ? 7 : (_whichexpr_s42_120 == 6 ? 3 : 4)))))));
      int v_122;
      int v_s81_123;
      int r_124;
      r_124 = locrange_11b;
      bit _has_out__125;
      _has_out__125 = 0;
      v_s81_123 = 0;
      int n_126;
      n_126 = ??/* H__0_391_179int:2 */;
      assert ((n_126 >= 0) && (n_126 < r_124)); //Assert at aux.skh:57 (2746813700631303515)
      v_s81_123 = n_126 + 1;
      _has_out__125 = 1;
      v_122 = v_s81_123;
      int anyv_127;
      int anyv_s83_128;
      int r_129;
      r_129 = locrange_11b + locrange2_11d;
      bit _has_out__12a;
      _has_out__12a = 0;
      anyv_s83_128 = 0;
      int n_12b;
      n_12b = ??/* H__0_391_180int:2 */;
      assert ((n_12b >= 0) && (n_12b < r_129)); //Assert at aux.skh:57 (-7552723088003441933)
      anyv_s83_128 = n_12b + 1;
      _has_out__12a = 1;
      anyv_127 = anyv_s83_128;
      if(st_choice_121 == 1)/*lseg_header.skh:803*/
      {
        assert (locrange_11b > 0); //Assert at lseg_header.skh:804 (-4921908065490900035)
        locderef2var@ANONYMOUS(anyv_127, v_122, active__ANONYMOUS_s985_10c, error_flag__ANONYMOUS_s1047_10d, history__ANONYMOUS_s1111_10f, key__ANONYMOUS_s988_111, locvars__ANONYMOUS_s989_113, malloc_budget__ANONYMOUS_s1236_114, next__ANONYMOUS_s1126_115, p_history__ANONYMOUS_s1248_116, supernext__ANONYMOUS_s1127_118, symbolic__ANONYMOUS_s990_119, ts__ANONYMOUS_s991_11a);
      }
      else
      {
        if(st_choice_121 == 5)/*lseg_header.skh:807*/
        {
          assert (locrange_11b > 0); //Assert at lseg_header.skh:808 (-8427253600761619365)
          int _out_s85_12c;
          int r_12d;
          r_12d = (locrange_11b + locrange2_11d) + 1;
          bit _has_out__12e;
          _has_out__12e = 0;
          _out_s85_12c = 0;
          _out_s85_12c = ??/* H__1_391_182int:3 */;
          assert ((_out_s85_12c >= 0) && (_out_s85_12c < r_12d)); //Assert at aux.skh:63 (3631387498543592694)
          _has_out__12e = 1;
          locVarAssign@ANONYMOUS(v_122, _out_s85_12c, locvars__ANONYMOUS_s989_113);
        }
        else
        {
          if(st_choice_121 == 2)/*lseg_header.skh:811*/
          {
            assert ((locrange_11b + locrange2_11d) > 0); //Assert at lseg_header.skh:812 (-4163682984177035895)
            assert (intrange_11c > 0); //Assert at lseg_header.skh:813 (7258760066359344892)
            int _out_s87_12f;
            int r_130;
            r_130 = intrange_11c;
            bit _has_out__131;
            _has_out__131 = 0;
            _out_s87_12f = 0;
            _out_s87_12f = ??/* H__1_391_184int:3 */;
            assert ((_out_s87_12f >= 0) && (_out_s87_12f < r_130)); //Assert at aux.skh:63 (3631387498543592694)
            _has_out__131 = 1;
            intderef2var@ANONYMOUS(anyv_127, _out_s87_12f, active__ANONYMOUS_s985_10c, error_flag__ANONYMOUS_s1047_10d, history__ANONYMOUS_s1111_10f, intvars__ANONYMOUS_s987_110, key__ANONYMOUS_s988_111, locvars__ANONYMOUS_s989_113, next__ANONYMOUS_s1126_115, p_history__ANONYMOUS_s1248_116, supernext__ANONYMOUS_s1127_118, symbolic__ANONYMOUS_s990_119, ts__ANONYMOUS_s991_11a);
          }
          else
          {
            if(st_choice_121 == 6)/*lseg_header.skh:816*/
            {
              assert (intrange_11c > 0); //Assert at lseg_header.skh:817 (6622654619910288992)
              int _out_s89_132;
              int r_133;
              r_133 = intrange_11c;
              bit _has_out__134;
              _has_out__134 = 0;
              _out_s89_132 = 0;
              _out_s89_132 = ??/* H__1_391_186int:3 */;
              assert ((_out_s89_132 >= 0) && (_out_s89_132 < r_133)); //Assert at aux.skh:63 (3631387498543592694)
              _has_out__134 = 1;
              int _out_s91_135;
              int r_136;
              r_136 = intrange_11c + intrange2_11e;
              bit _has_out__137;
              _has_out__137 = 0;
              _out_s91_135 = 0;
              _out_s91_135 = ??/* H__1_391_187int:3 */;
              assert ((_out_s91_135 >= 0) && (_out_s91_135 < r_136)); //Assert at aux.skh:63 (3631387498543592694)
              _has_out__137 = 1;
              int c3_319_s1698;
              c3_319_s1698 = ??/* H__8_391int:3 */;
              intVarAssign@ANONYMOUS(_out_s89_132, _out_s91_135, c3_319_s1698, intvars__ANONYMOUS_s987_110);
            }
            else
            {
              if(st_choice_121 == 0)/*lseg_header.skh:820*/
              {
                assert (locrange_11b > 0); //Assert at lseg_header.skh:821 (2952026120196297335)
                malloc@ANONYMOUS(v_122, active__ANONYMOUS_s985_10c, error_flag__ANONYMOUS_s1047_10d, key__ANONYMOUS_s988_111, locvars__ANONYMOUS_s989_113, malloc_budget__ANONYMOUS_s1236_114, next__ANONYMOUS_s1126_115, symbolic__ANONYMOUS_s990_119);
              }
              else
              {
                if(st_choice_121 == 7)/*lseg_header.skh:824*/
                {
                  assert ((locrange_11b + locrange2_11d) > 0); //Assert at lseg_header.skh:825 (4534254574332103990)
                  free@ANONYMOUS(anyv_127, active__ANONYMOUS_s985_10c, error_flag__ANONYMOUS_s1047_10d, history__ANONYMOUS_s1111_10f, locvars__ANONYMOUS_s989_113, malloc_budget__ANONYMOUS_s1236_114, next__ANONYMOUS_s1126_115, p_history__ANONYMOUS_s1248_116, symbolic__ANONYMOUS_s990_119, ts__ANONYMOUS_s991_11a);
                }
                else
                {
                  if(st_choice_121 == 3)/*lseg_header.skh:828*/
                  {
                    assert ((locrange_11b + locrange2_11d) > 0); //Assert at lseg_header.skh:829 (-5676468828782666488)
                    int _out_s93_138;
                    int r_139;
                    r_139 = (locrange_11b + locrange2_11d) + 1;
                    bit _has_out__13a;
                    _has_out__13a = 0;
                    _out_s93_138 = 0;
                    _out_s93_138 = ??/* H__1_391_191int:3 */;
                    assert ((_out_s93_138 >= 0) && (_out_s93_138 < r_139)); //Assert at aux.skh:63 (3631387498543592694)
                    _has_out__13a = 1;
                    locMutate@ANONYMOUS(anyv_127, _out_s93_138, 0, active__ANONYMOUS_s985_10c, error_flag__ANONYMOUS_s1047_10d, fake_unfold__ANONYMOUS_s986_10e, history__ANONYMOUS_s1111_10f, left__ANONYMOUS_s1662_112, locvars__ANONYMOUS_s989_113, next__ANONYMOUS_s1126_115, p_history__ANONYMOUS_s1248_116, right__ANONYMOUS_s1663_117, symbolic__ANONYMOUS_s990_119, ts__ANONYMOUS_s991_11a);
                  }
                  else
                  {
                    if(st_choice_121 == 4)/*lseg_header.skh:832*/
                    {
                      assert ((locrange_11b + locrange2_11d) > 0); //Assert at lseg_header.skh:833 (8109745528824025756)
                      assert ((intrange_11c + intrange2_11e) > 0); //Assert at lseg_header.skh:834 (-6775863090455127960)
                      int _out_s95_13b;
                      int r_13c;
                      r_13c = intrange_11c + intrange2_11e;
                      bit _has_out__13d;
                      _has_out__13d = 0;
                      _out_s95_13b = 0;
                      _out_s95_13b = ??/* H__1_391_193int:3 */;
                      assert ((_out_s95_13b >= 0) && (_out_s95_13b < r_13c)); //Assert at aux.skh:63 (3631387498543592694)
                      _has_out__13d = 1;
                      intMutate@ANONYMOUS(anyv_127, _out_s95_13b, active__ANONYMOUS_s985_10c, error_flag__ANONYMOUS_s1047_10d, fake_unfold__ANONYMOUS_s986_10e, history__ANONYMOUS_s1111_10f, intvars__ANONYMOUS_s987_110, key__ANONYMOUS_s988_111, locvars__ANONYMOUS_s989_113, next__ANONYMOUS_s1126_115, p_history__ANONYMOUS_s1248_116, symbolic__ANONYMOUS_s990_119, ts__ANONYMOUS_s991_11a);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
/*local/test.sk:83*/

void statement1 (int locrange_13e, int intrange_13f, int locrange2_140, int intrange2_141, ref global bit[4] active__ANONYMOUS_s1072_142, ref global bit error_flag__ANONYMOUS_s1135_143, ref global int fake_unfold__ANONYMOUS_s1559_144, ref global bit[4 * 4] history__ANONYMOUS_s950_145, ref global int[2] intvars__ANONYMOUS_s1408_146, ref global int[4] key__ANONYMOUS_s1073_147, ref global int[4] left__ANONYMOUS_s1668_148, ref global int[3] locvars__ANONYMOUS_s1074_149, ref global int malloc_budget__ANONYMOUS_s1075_14a, ref global int[4] next__ANONYMOUS_s1076_14b, ref global bit[4 * 4] p_history__ANONYMOUS_s1136_14c, ref global int[4] right__ANONYMOUS_s1669_14d, ref global int[4] supernext__ANONYMOUS_s1137_14e, ref global bit[4] symbolic__ANONYMOUS_s1077_14f, ref global int ts__ANONYMOUS_s951_150)/*local/test.sk:83*/
{
  {
    {
      int locrange_151;
      locrange_151 = locrange_13e;
      int intrange_152;
      intrange_152 = intrange_13f;
      int locrange2_153;
      locrange2_153 = locrange2_140;
      int intrange2_154;
      intrange2_154 = intrange2_141;
      bit _has_out__155;
      _has_out__155 = 0;
      int _whichexpr_s42_156;
      _whichexpr_s42_156 = ??/* H__18_392int:3 */;
      assert ((0 <= _whichexpr_s42_156) && (_whichexpr_s42_156 < 8)); //regen H__18
      int st_choice_157;
      st_choice_157 = (_whichexpr_s42_156 == 0 ? 1 : (_whichexpr_s42_156 == 1 ? 5 : (_whichexpr_s42_156 == 2 ? 2 : (_whichexpr_s42_156 == 3 ? 6 : (_whichexpr_s42_156 == 4 ? 0 : (_whichexpr_s42_156 == 5 ? 7 : (_whichexpr_s42_156 == 6 ? 3 : 4)))))));
      int v_158;
      int v_s81_159;
      int r_15a;
      r_15a = locrange_151;
      bit _has_out__15b;
      _has_out__15b = 0;
      v_s81_159 = 0;
      int n_15c;
      n_15c = ??/* H__0_392_179int:2 */;
      assert ((n_15c >= 0) && (n_15c < r_15a)); //Assert at aux.skh:57 (-9041517819437231075)
      v_s81_159 = n_15c + 1;
      _has_out__15b = 1;
      v_158 = v_s81_159;
      int anyv_15d;
      int anyv_s83_15e;
      int r_15f;
      r_15f = locrange_151 + locrange2_153;
      bit _has_out__160;
      _has_out__160 = 0;
      anyv_s83_15e = 0;
      int n_161;
      n_161 = ??/* H__0_392_180int:2 */;
      assert ((n_161 >= 0) && (n_161 < r_15f)); //Assert at aux.skh:57 (515305813211044434)
      anyv_s83_15e = n_161 + 1;
      _has_out__160 = 1;
      anyv_15d = anyv_s83_15e;
      if(st_choice_157 == 1)/*lseg_header.skh:803*/
      {
        assert (locrange_151 > 0); //Assert at lseg_header.skh:804 (4860661667635889964)
        locderef2var@ANONYMOUS(anyv_15d, v_158, active__ANONYMOUS_s1072_142, error_flag__ANONYMOUS_s1135_143, history__ANONYMOUS_s950_145, key__ANONYMOUS_s1073_147, locvars__ANONYMOUS_s1074_149, malloc_budget__ANONYMOUS_s1075_14a, next__ANONYMOUS_s1076_14b, p_history__ANONYMOUS_s1136_14c, supernext__ANONYMOUS_s1137_14e, symbolic__ANONYMOUS_s1077_14f, ts__ANONYMOUS_s951_150);
      }
      else
      {
        if(st_choice_157 == 5)/*lseg_header.skh:807*/
        {
          assert (locrange_151 > 0); //Assert at lseg_header.skh:808 (3261233453423210165)
          int _out_s85_162;
          int r_163;
          r_163 = (locrange_151 + locrange2_153) + 1;
          bit _has_out__164;
          _has_out__164 = 0;
          _out_s85_162 = 0;
          _out_s85_162 = ??/* H__1_392_182int:3 */;
          assert ((_out_s85_162 >= 0) && (_out_s85_162 < r_163)); //Assert at aux.skh:63 (3631387498543592694)
          _has_out__164 = 1;
          locVarAssign@ANONYMOUS(v_158, _out_s85_162, locvars__ANONYMOUS_s1074_149);
        }
        else
        {
          if(st_choice_157 == 2)/*lseg_header.skh:811*/
          {
            assert ((locrange_151 + locrange2_153) > 0); //Assert at lseg_header.skh:812 (4012877258406552275)
            assert (intrange_152 > 0); //Assert at lseg_header.skh:813 (-901259534781076769)
            int _out_s87_165;
            int r_166;
            r_166 = intrange_152;
            bit _has_out__167;
            _has_out__167 = 0;
            _out_s87_165 = 0;
            _out_s87_165 = ??/* H__1_392_184int:3 */;
            assert ((_out_s87_165 >= 0) && (_out_s87_165 < r_166)); //Assert at aux.skh:63 (3631387498543592694)
            _has_out__167 = 1;
            intderef2var@ANONYMOUS(anyv_15d, _out_s87_165, active__ANONYMOUS_s1072_142, error_flag__ANONYMOUS_s1135_143, history__ANONYMOUS_s950_145, intvars__ANONYMOUS_s1408_146, key__ANONYMOUS_s1073_147, locvars__ANONYMOUS_s1074_149, next__ANONYMOUS_s1076_14b, p_history__ANONYMOUS_s1136_14c, supernext__ANONYMOUS_s1137_14e, symbolic__ANONYMOUS_s1077_14f, ts__ANONYMOUS_s951_150);
          }
          else
          {
            if(st_choice_157 == 6)/*lseg_header.skh:816*/
            {
              assert (intrange_152 > 0); //Assert at lseg_header.skh:817 (1047396889142739433)
              int _out_s89_168;
              int r_169;
              r_169 = intrange_152;
              bit _has_out__16a;
              _has_out__16a = 0;
              _out_s89_168 = 0;
              _out_s89_168 = ??/* H__1_392_186int:3 */;
              assert ((_out_s89_168 >= 0) && (_out_s89_168 < r_169)); //Assert at aux.skh:63 (3631387498543592694)
              _has_out__16a = 1;
              int _out_s91_16b;
              int r_16c;
              r_16c = intrange_152 + intrange2_154;
              bit _has_out__16d;
              _has_out__16d = 0;
              _out_s91_16b = 0;
              _out_s91_16b = ??/* H__1_392_187int:3 */;
              assert ((_out_s91_16b >= 0) && (_out_s91_16b < r_16c)); //Assert at aux.skh:63 (3631387498543592694)
              _has_out__16d = 1;
              int c3_319_s1699;
              c3_319_s1699 = ??/* H__8_392int:3 */;
              intVarAssign@ANONYMOUS(_out_s89_168, _out_s91_16b, c3_319_s1699, intvars__ANONYMOUS_s1408_146);
            }
            else
            {
              if(st_choice_157 == 0)/*lseg_header.skh:820*/
              {
                assert (locrange_151 > 0); //Assert at lseg_header.skh:821 (-8449202935727939083)
                malloc@ANONYMOUS(v_158, active__ANONYMOUS_s1072_142, error_flag__ANONYMOUS_s1135_143, key__ANONYMOUS_s1073_147, locvars__ANONYMOUS_s1074_149, malloc_budget__ANONYMOUS_s1075_14a, next__ANONYMOUS_s1076_14b, symbolic__ANONYMOUS_s1077_14f);
              }
              else
              {
                if(st_choice_157 == 7)/*lseg_header.skh:824*/
                {
                  assert ((locrange_151 + locrange2_153) > 0); //Assert at lseg_header.skh:825 (-6576705173417033893)
                  free@ANONYMOUS(anyv_15d, active__ANONYMOUS_s1072_142, error_flag__ANONYMOUS_s1135_143, history__ANONYMOUS_s950_145, locvars__ANONYMOUS_s1074_149, malloc_budget__ANONYMOUS_s1075_14a, next__ANONYMOUS_s1076_14b, p_history__ANONYMOUS_s1136_14c, symbolic__ANONYMOUS_s1077_14f, ts__ANONYMOUS_s951_150);
                }
                else
                {
                  if(st_choice_157 == 3)/*lseg_header.skh:828*/
                  {
                    assert ((locrange_151 + locrange2_153) > 0); //Assert at lseg_header.skh:829 (-7541415699894495054)
                    int _out_s93_16e;
                    int r_16f;
                    r_16f = (locrange_151 + locrange2_153) + 1;
                    bit _has_out__170;
                    _has_out__170 = 0;
                    _out_s93_16e = 0;
                    _out_s93_16e = ??/* H__1_392_191int:3 */;
                    assert ((_out_s93_16e >= 0) && (_out_s93_16e < r_16f)); //Assert at aux.skh:63 (3631387498543592694)
                    _has_out__170 = 1;
                    locMutate@ANONYMOUS(anyv_15d, _out_s93_16e, 0, active__ANONYMOUS_s1072_142, error_flag__ANONYMOUS_s1135_143, fake_unfold__ANONYMOUS_s1559_144, history__ANONYMOUS_s950_145, left__ANONYMOUS_s1668_148, locvars__ANONYMOUS_s1074_149, next__ANONYMOUS_s1076_14b, p_history__ANONYMOUS_s1136_14c, right__ANONYMOUS_s1669_14d, symbolic__ANONYMOUS_s1077_14f, ts__ANONYMOUS_s951_150);
                  }
                  else
                  {
                    if(st_choice_157 == 4)/*lseg_header.skh:832*/
                    {
                      assert ((locrange_151 + locrange2_153) > 0); //Assert at lseg_header.skh:833 (7220400617914180320)
                      assert ((intrange_152 + intrange2_154) > 0); //Assert at lseg_header.skh:834 (336496982051788990)
                      int _out_s95_171;
                      int r_172;
                      r_172 = intrange_152 + intrange2_154;
                      bit _has_out__173;
                      _has_out__173 = 0;
                      _out_s95_171 = 0;
                      _out_s95_171 = ??/* H__1_392_193int:3 */;
                      assert ((_out_s95_171 >= 0) && (_out_s95_171 < r_172)); //Assert at aux.skh:63 (3631387498543592694)
                      _has_out__173 = 1;
                      intMutate@ANONYMOUS(anyv_15d, _out_s95_171, active__ANONYMOUS_s1072_142, error_flag__ANONYMOUS_s1135_143, fake_unfold__ANONYMOUS_s1559_144, history__ANONYMOUS_s950_145, intvars__ANONYMOUS_s1408_146, key__ANONYMOUS_s1073_147, locvars__ANONYMOUS_s1074_149, next__ANONYMOUS_s1076_14b, p_history__ANONYMOUS_s1136_14c, symbolic__ANONYMOUS_s1077_14f, ts__ANONYMOUS_s951_150);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
/*local/test.sk:86*/

void statement2 (int locrange_174, int intrange_175, int locrange2_176, int intrange2_177, ref global bit[4] active__ANONYMOUS_s1117_178, ref global bit error_flag__ANONYMOUS_s966_179, ref global int fake_unfold__ANONYMOUS_s1118_17a, ref global bit[4 * 4] history__ANONYMOUS_s1472_17b, ref global int[2] intvars__ANONYMOUS_s1119_17c, ref global int[4] key__ANONYMOUS_s1120_17d, ref global int[4] left__ANONYMOUS_s1216_17e, ref global int[3] locvars__ANONYMOUS_s1121_17f, ref global int malloc_budget__ANONYMOUS_s1377_180, ref global int[4] next__ANONYMOUS_s1217_181, ref global bit[4 * 4] p_history__ANONYMOUS_s1017_182, ref global int[4] right__ANONYMOUS_s1218_183, ref global int[4] supernext__ANONYMOUS_s1473_184, ref global bit[4] symbolic__ANONYMOUS_s1122_185, ref global int ts__ANONYMOUS_s1018_186)/*local/test.sk:86*/
{
  {
    {
      int locrange_187;
      locrange_187 = locrange_174;
      int intrange_188;
      intrange_188 = intrange_175;
      int locrange2_189;
      locrange2_189 = locrange2_176;
      int intrange2_18a;
      intrange2_18a = intrange2_177;
      bit _has_out__18b;
      _has_out__18b = 0;
      int _whichexpr_s42_18c;
      _whichexpr_s42_18c = ??/* H__18_393int:3 */;
      assert ((0 <= _whichexpr_s42_18c) && (_whichexpr_s42_18c < 8)); //regen H__18
      int st_choice_18d;
      st_choice_18d = (_whichexpr_s42_18c == 0 ? 1 : (_whichexpr_s42_18c == 1 ? 5 : (_whichexpr_s42_18c == 2 ? 2 : (_whichexpr_s42_18c == 3 ? 6 : (_whichexpr_s42_18c == 4 ? 0 : (_whichexpr_s42_18c == 5 ? 7 : (_whichexpr_s42_18c == 6 ? 3 : 4)))))));
      int v_18e;
      int v_s81_18f;
      int r_190;
      r_190 = locrange_187;
      bit _has_out__191;
      _has_out__191 = 0;
      v_s81_18f = 0;
      int n_192;
      n_192 = ??/* H__0_393_179int:2 */;
      assert ((n_192 >= 0) && (n_192 < r_190)); //Assert at aux.skh:57 (-3865886931306761597)
      v_s81_18f = n_192 + 1;
      _has_out__191 = 1;
      v_18e = v_s81_18f;
      int anyv_193;
      int anyv_s83_194;
      int r_195;
      r_195 = locrange_187 + locrange2_189;
      bit _has_out__196;
      _has_out__196 = 0;
      anyv_s83_194 = 0;
      int n_197;
      n_197 = ??/* H__0_393_180int:2 */;
      assert ((n_197 >= 0) && (n_197 < r_195)); //Assert at aux.skh:57 (2354121294458824250)
      anyv_s83_194 = n_197 + 1;
      _has_out__196 = 1;
      anyv_193 = anyv_s83_194;
      if(st_choice_18d == 1)/*lseg_header.skh:803*/
      {
        assert (locrange_187 > 0); //Assert at lseg_header.skh:804 (2712415309842092038)
        locderef2var@ANONYMOUS(anyv_193, v_18e, active__ANONYMOUS_s1117_178, error_flag__ANONYMOUS_s966_179, history__ANONYMOUS_s1472_17b, key__ANONYMOUS_s1120_17d, locvars__ANONYMOUS_s1121_17f, malloc_budget__ANONYMOUS_s1377_180, next__ANONYMOUS_s1217_181, p_history__ANONYMOUS_s1017_182, supernext__ANONYMOUS_s1473_184, symbolic__ANONYMOUS_s1122_185, ts__ANONYMOUS_s1018_186);
      }
      else
      {
        if(st_choice_18d == 5)/*lseg_header.skh:807*/
        {
          assert (locrange_187 > 0); //Assert at lseg_header.skh:808 (8365389424849415405)
          int _out_s85_198;
          int r_199;
          r_199 = (locrange_187 + locrange2_189) + 1;
          bit _has_out__19a;
          _has_out__19a = 0;
          _out_s85_198 = 0;
          _out_s85_198 = ??/* H__1_393_182int:3 */;
          assert ((_out_s85_198 >= 0) && (_out_s85_198 < r_199)); //Assert at aux.skh:63 (3631387498543592694)
          _has_out__19a = 1;
          locVarAssign@ANONYMOUS(v_18e, _out_s85_198, locvars__ANONYMOUS_s1121_17f);
        }
        else
        {
          if(st_choice_18d == 2)/*lseg_header.skh:811*/
          {
            assert ((locrange_187 + locrange2_189) > 0); //Assert at lseg_header.skh:812 (-901705258287165906)
            assert (intrange_188 > 0); //Assert at lseg_header.skh:813 (-4255623378984686110)
            int _out_s87_19b;
            int r_19c;
            r_19c = intrange_188;
            bit _has_out__19d;
            _has_out__19d = 0;
            _out_s87_19b = 0;
            _out_s87_19b = ??/* H__1_393_184int:3 */;
            assert ((_out_s87_19b >= 0) && (_out_s87_19b < r_19c)); //Assert at aux.skh:63 (3631387498543592694)
            _has_out__19d = 1;
            intderef2var@ANONYMOUS(anyv_193, _out_s87_19b, active__ANONYMOUS_s1117_178, error_flag__ANONYMOUS_s966_179, history__ANONYMOUS_s1472_17b, intvars__ANONYMOUS_s1119_17c, key__ANONYMOUS_s1120_17d, locvars__ANONYMOUS_s1121_17f, next__ANONYMOUS_s1217_181, p_history__ANONYMOUS_s1017_182, supernext__ANONYMOUS_s1473_184, symbolic__ANONYMOUS_s1122_185, ts__ANONYMOUS_s1018_186);
          }
          else
          {
            if(st_choice_18d == 6)/*lseg_header.skh:816*/
            {
              assert (intrange_188 > 0); //Assert at lseg_header.skh:817 (7737823245819442924)
              int _out_s89_19e;
              int r_19f;
              r_19f = intrange_188;
              bit _has_out__1a0;
              _has_out__1a0 = 0;
              _out_s89_19e = 0;
              _out_s89_19e = ??/* H__1_393_186int:3 */;
              assert ((_out_s89_19e >= 0) && (_out_s89_19e < r_19f)); //Assert at aux.skh:63 (3631387498543592694)
              _has_out__1a0 = 1;
              int _out_s91_1a1;
              int r_1a2;
              r_1a2 = intrange_188 + intrange2_18a;
              bit _has_out__1a3;
              _has_out__1a3 = 0;
              _out_s91_1a1 = 0;
              _out_s91_1a1 = ??/* H__1_393_187int:3 */;
              assert ((_out_s91_1a1 >= 0) && (_out_s91_1a1 < r_1a2)); //Assert at aux.skh:63 (3631387498543592694)
              _has_out__1a3 = 1;
              int c3_319_s1700;
              c3_319_s1700 = ??/* H__8_393int:3 */;
              intVarAssign@ANONYMOUS(_out_s89_19e, _out_s91_1a1, c3_319_s1700, intvars__ANONYMOUS_s1119_17c);
            }
            else
            {
              if(st_choice_18d == 0)/*lseg_header.skh:820*/
              {
                assert (locrange_187 > 0); //Assert at lseg_header.skh:821 (5235496313980286523)
                malloc@ANONYMOUS(v_18e, active__ANONYMOUS_s1117_178, error_flag__ANONYMOUS_s966_179, key__ANONYMOUS_s1120_17d, locvars__ANONYMOUS_s1121_17f, malloc_budget__ANONYMOUS_s1377_180, next__ANONYMOUS_s1217_181, symbolic__ANONYMOUS_s1122_185);
              }
              else
              {
                if(st_choice_18d == 7)/*lseg_header.skh:824*/
                {
                  assert ((locrange_187 + locrange2_189) > 0); //Assert at lseg_header.skh:825 (4646163169457004244)
                  free@ANONYMOUS(anyv_193, active__ANONYMOUS_s1117_178, error_flag__ANONYMOUS_s966_179, history__ANONYMOUS_s1472_17b, locvars__ANONYMOUS_s1121_17f, malloc_budget__ANONYMOUS_s1377_180, next__ANONYMOUS_s1217_181, p_history__ANONYMOUS_s1017_182, symbolic__ANONYMOUS_s1122_185, ts__ANONYMOUS_s1018_186);
                }
                else
                {
                  if(st_choice_18d == 3)/*lseg_header.skh:828*/
                  {
                    assert ((locrange_187 + locrange2_189) > 0); //Assert at lseg_header.skh:829 (-3616828032664064971)
                    int _out_s93_1a4;
                    int r_1a5;
                    r_1a5 = (locrange_187 + locrange2_189) + 1;
                    bit _has_out__1a6;
                    _has_out__1a6 = 0;
                    _out_s93_1a4 = 0;
                    _out_s93_1a4 = ??/* H__1_393_191int:3 */;
                    assert ((_out_s93_1a4 >= 0) && (_out_s93_1a4 < r_1a5)); //Assert at aux.skh:63 (3631387498543592694)
                    _has_out__1a6 = 1;
                    locMutate@ANONYMOUS(anyv_193, _out_s93_1a4, 0, active__ANONYMOUS_s1117_178, error_flag__ANONYMOUS_s966_179, fake_unfold__ANONYMOUS_s1118_17a, history__ANONYMOUS_s1472_17b, left__ANONYMOUS_s1216_17e, locvars__ANONYMOUS_s1121_17f, next__ANONYMOUS_s1217_181, p_history__ANONYMOUS_s1017_182, right__ANONYMOUS_s1218_183, symbolic__ANONYMOUS_s1122_185, ts__ANONYMOUS_s1018_186);
                  }
                  else
                  {
                    if(st_choice_18d == 4)/*lseg_header.skh:832*/
                    {
                      assert ((locrange_187 + locrange2_189) > 0); //Assert at lseg_header.skh:833 (7490487573772212952)
                      assert ((intrange_188 + intrange2_18a) > 0); //Assert at lseg_header.skh:834 (-7338267140448777513)
                      int _out_s95_1a7;
                      int r_1a8;
                      r_1a8 = intrange_188 + intrange2_18a;
                      bit _has_out__1a9;
                      _has_out__1a9 = 0;
                      _out_s95_1a7 = 0;
                      _out_s95_1a7 = ??/* H__1_393_193int:3 */;
                      assert ((_out_s95_1a7 >= 0) && (_out_s95_1a7 < r_1a8)); //Assert at aux.skh:63 (3631387498543592694)
                      _has_out__1a9 = 1;
                      intMutate@ANONYMOUS(anyv_193, _out_s95_1a7, active__ANONYMOUS_s1117_178, error_flag__ANONYMOUS_s966_179, fake_unfold__ANONYMOUS_s1118_17a, history__ANONYMOUS_s1472_17b, intvars__ANONYMOUS_s1119_17c, key__ANONYMOUS_s1120_17d, locvars__ANONYMOUS_s1121_17f, next__ANONYMOUS_s1217_181, p_history__ANONYMOUS_s1017_182, symbolic__ANONYMOUS_s1122_185, ts__ANONYMOUS_s1018_186);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
/*local/test.sk:89*/

void statement3 (int locrange_20e, int intrange_20f, int locrange2_210, int intrange2_211, ref global bit[4] active__ANONYMOUS_s954_212, ref global bit error_flag__ANONYMOUS_s1523_213, ref global int fake_unfold__ANONYMOUS_s1531_214, ref global bit[4 * 4] history__ANONYMOUS_s1215_215, ref global int[2] intvars__ANONYMOUS_s1372_216, ref global int[4] key__ANONYMOUS_s1023_217, ref global int[4] left__ANONYMOUS_s1655_218, ref global int[3] locvars__ANONYMOUS_s955_219, ref global int malloc_budget__ANONYMOUS_s956_21a, ref global int[4] next__ANONYMOUS_s957_21b, ref global bit[4 * 4] p_history__ANONYMOUS_s1309_21c, ref global int[4] right__ANONYMOUS_s1656_21d, ref global int[4] supernext__ANONYMOUS_s1373_21e, ref global bit[4] symbolic__ANONYMOUS_s958_21f, ref global int ts__ANONYMOUS_s959_220)/*local/test.sk:89*/
{
  {
    {
      int locrange_221;
      locrange_221 = locrange_20e;
      int intrange_222;
      intrange_222 = intrange_20f;
      int locrange2_223;
      locrange2_223 = locrange2_210;
      int intrange2_224;
      intrange2_224 = intrange2_211;
      bit _has_out__225;
      _has_out__225 = 0;
      int _whichexpr_s42_226;
      _whichexpr_s42_226 = ??/* H__18_394int:3 */;
      assert ((0 <= _whichexpr_s42_226) && (_whichexpr_s42_226 < 8)); //regen H__18
      int st_choice_227;
      st_choice_227 = (_whichexpr_s42_226 == 0 ? 1 : (_whichexpr_s42_226 == 1 ? 5 : (_whichexpr_s42_226 == 2 ? 2 : (_whichexpr_s42_226 == 3 ? 6 : (_whichexpr_s42_226 == 4 ? 0 : (_whichexpr_s42_226 == 5 ? 7 : (_whichexpr_s42_226 == 6 ? 3 : 4)))))));
      int v_228;
      int v_s81_229;
      int r_22a;
      r_22a = locrange_221;
      bit _has_out__22b;
      _has_out__22b = 0;
      v_s81_229 = 0;
      int n_22c;
      n_22c = ??/* H__0_394_179int:2 */;
      assert ((n_22c >= 0) && (n_22c < r_22a)); //Assert at aux.skh:57 (4332173941210663395)
      v_s81_229 = n_22c + 1;
      _has_out__22b = 1;
      v_228 = v_s81_229;
      int anyv_22d;
      int anyv_s83_22e;
      int r_22f;
      r_22f = locrange_221 + locrange2_223;
      bit _has_out__230;
      _has_out__230 = 0;
      anyv_s83_22e = 0;
      int n_231;
      n_231 = ??/* H__0_394_180int:2 */;
      assert ((n_231 >= 0) && (n_231 < r_22f)); //Assert at aux.skh:57 (431815843211076879)
      anyv_s83_22e = n_231 + 1;
      _has_out__230 = 1;
      anyv_22d = anyv_s83_22e;
      if(st_choice_227 == 1)/*lseg_header.skh:803*/
      {
        assert (locrange_221 > 0); //Assert at lseg_header.skh:804 (4103538704068415081)
        locderef2var@ANONYMOUS(anyv_22d, v_228, active__ANONYMOUS_s954_212, error_flag__ANONYMOUS_s1523_213, history__ANONYMOUS_s1215_215, key__ANONYMOUS_s1023_217, locvars__ANONYMOUS_s955_219, malloc_budget__ANONYMOUS_s956_21a, next__ANONYMOUS_s957_21b, p_history__ANONYMOUS_s1309_21c, supernext__ANONYMOUS_s1373_21e, symbolic__ANONYMOUS_s958_21f, ts__ANONYMOUS_s959_220);
      }
      else
      {
        if(st_choice_227 == 5)/*lseg_header.skh:807*/
        {
          assert (locrange_221 > 0); //Assert at lseg_header.skh:808 (8855264940155899047)
          int _out_s85_232;
          int r_233;
          r_233 = (locrange_221 + locrange2_223) + 1;
          bit _has_out__234;
          _has_out__234 = 0;
          _out_s85_232 = 0;
          _out_s85_232 = ??/* H__1_394_182int:3 */;
          assert ((_out_s85_232 >= 0) && (_out_s85_232 < r_233)); //Assert at aux.skh:63 (3631387498543592694)
          _has_out__234 = 1;
          locVarAssign@ANONYMOUS(v_228, _out_s85_232, locvars__ANONYMOUS_s955_219);
        }
        else
        {
          if(st_choice_227 == 2)/*lseg_header.skh:811*/
          {
            assert ((locrange_221 + locrange2_223) > 0); //Assert at lseg_header.skh:812 (3144836240677861641)
            assert (intrange_222 > 0); //Assert at lseg_header.skh:813 (-7317667516237601832)
            int _out_s87_235;
            int r_236;
            r_236 = intrange_222;
            bit _has_out__237;
            _has_out__237 = 0;
            _out_s87_235 = 0;
            _out_s87_235 = ??/* H__1_394_184int:3 */;
            assert ((_out_s87_235 >= 0) && (_out_s87_235 < r_236)); //Assert at aux.skh:63 (3631387498543592694)
            _has_out__237 = 1;
            intderef2var@ANONYMOUS(anyv_22d, _out_s87_235, active__ANONYMOUS_s954_212, error_flag__ANONYMOUS_s1523_213, history__ANONYMOUS_s1215_215, intvars__ANONYMOUS_s1372_216, key__ANONYMOUS_s1023_217, locvars__ANONYMOUS_s955_219, next__ANONYMOUS_s957_21b, p_history__ANONYMOUS_s1309_21c, supernext__ANONYMOUS_s1373_21e, symbolic__ANONYMOUS_s958_21f, ts__ANONYMOUS_s959_220);
          }
          else
          {
            if(st_choice_227 == 6)/*lseg_header.skh:816*/
            {
              assert (intrange_222 > 0); //Assert at lseg_header.skh:817 (-7450162368996583637)
              int _out_s89_238;
              int r_239;
              r_239 = intrange_222;
              bit _has_out__23a;
              _has_out__23a = 0;
              _out_s89_238 = 0;
              _out_s89_238 = ??/* H__1_394_186int:3 */;
              assert ((_out_s89_238 >= 0) && (_out_s89_238 < r_239)); //Assert at aux.skh:63 (3631387498543592694)
              _has_out__23a = 1;
              int _out_s91_23b;
              int r_23c;
              r_23c = intrange_222 + intrange2_224;
              bit _has_out__23d;
              _has_out__23d = 0;
              _out_s91_23b = 0;
              _out_s91_23b = ??/* H__1_394_187int:3 */;
              assert ((_out_s91_23b >= 0) && (_out_s91_23b < r_23c)); //Assert at aux.skh:63 (3631387498543592694)
              _has_out__23d = 1;
              int c3_319_s1711;
              c3_319_s1711 = ??/* H__8_394int:3 */;
              intVarAssign@ANONYMOUS(_out_s89_238, _out_s91_23b, c3_319_s1711, intvars__ANONYMOUS_s1372_216);
            }
            else
            {
              if(st_choice_227 == 0)/*lseg_header.skh:820*/
              {
                assert (locrange_221 > 0); //Assert at lseg_header.skh:821 (8238554880481567953)
                malloc@ANONYMOUS(v_228, active__ANONYMOUS_s954_212, error_flag__ANONYMOUS_s1523_213, key__ANONYMOUS_s1023_217, locvars__ANONYMOUS_s955_219, malloc_budget__ANONYMOUS_s956_21a, next__ANONYMOUS_s957_21b, symbolic__ANONYMOUS_s958_21f);
              }
              else
              {
                if(st_choice_227 == 7)/*lseg_header.skh:824*/
                {
                  assert ((locrange_221 + locrange2_223) > 0); //Assert at lseg_header.skh:825 (4032498036882944808)
                  free@ANONYMOUS(anyv_22d, active__ANONYMOUS_s954_212, error_flag__ANONYMOUS_s1523_213, history__ANONYMOUS_s1215_215, locvars__ANONYMOUS_s955_219, malloc_budget__ANONYMOUS_s956_21a, next__ANONYMOUS_s957_21b, p_history__ANONYMOUS_s1309_21c, symbolic__ANONYMOUS_s958_21f, ts__ANONYMOUS_s959_220);
                }
                else
                {
                  if(st_choice_227 == 3)/*lseg_header.skh:828*/
                  {
                    assert ((locrange_221 + locrange2_223) > 0); //Assert at lseg_header.skh:829 (866867087739537970)
                    int _out_s93_23e;
                    int r_23f;
                    r_23f = (locrange_221 + locrange2_223) + 1;
                    bit _has_out__240;
                    _has_out__240 = 0;
                    _out_s93_23e = 0;
                    _out_s93_23e = ??/* H__1_394_191int:3 */;
                    assert ((_out_s93_23e >= 0) && (_out_s93_23e < r_23f)); //Assert at aux.skh:63 (3631387498543592694)
                    _has_out__240 = 1;
                    locMutate@ANONYMOUS(anyv_22d, _out_s93_23e, 0, active__ANONYMOUS_s954_212, error_flag__ANONYMOUS_s1523_213, fake_unfold__ANONYMOUS_s1531_214, history__ANONYMOUS_s1215_215, left__ANONYMOUS_s1655_218, locvars__ANONYMOUS_s955_219, next__ANONYMOUS_s957_21b, p_history__ANONYMOUS_s1309_21c, right__ANONYMOUS_s1656_21d, symbolic__ANONYMOUS_s958_21f, ts__ANONYMOUS_s959_220);
                  }
                  else
                  {
                    if(st_choice_227 == 4)/*lseg_header.skh:832*/
                    {
                      assert ((locrange_221 + locrange2_223) > 0); //Assert at lseg_header.skh:833 (5369522575760457191)
                      assert ((intrange_222 + intrange2_224) > 0); //Assert at lseg_header.skh:834 (-8278021979159323751)
                      int _out_s95_241;
                      int r_242;
                      r_242 = intrange_222 + intrange2_224;
                      bit _has_out__243;
                      _has_out__243 = 0;
                      _out_s95_241 = 0;
                      _out_s95_241 = ??/* H__1_394_193int:3 */;
                      assert ((_out_s95_241 >= 0) && (_out_s95_241 < r_242)); //Assert at aux.skh:63 (3631387498543592694)
                      _has_out__243 = 1;
                      intMutate@ANONYMOUS(anyv_22d, _out_s95_241, active__ANONYMOUS_s954_212, error_flag__ANONYMOUS_s1523_213, fake_unfold__ANONYMOUS_s1531_214, history__ANONYMOUS_s1215_215, intvars__ANONYMOUS_s1372_216, key__ANONYMOUS_s1023_217, locvars__ANONYMOUS_s955_219, next__ANONYMOUS_s957_21b, p_history__ANONYMOUS_s1309_21c, symbolic__ANONYMOUS_s958_21f, ts__ANONYMOUS_s959_220);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
/*lseg_header.skh:1049*/

void tree_inv (int v_252, ref bit _out_253, ref global bit[4] active__ANONYMOUS_s1138_254, ref global int[3] locvars__ANONYMOUS_s715_255, ref global int[4] next__ANONYMOUS_s1139_256, ref global int[4] supernext__ANONYMOUS_s1140_257, ref global bit[4] symbolic__ANONYMOUS_s1141_258)/*lseg_header.skh:1049*/
{
  {
    {
      _out_253 = 0;
      assert ((v_252 > 0) && (v_252 < 3)); //Assert at lseg_header.skh:1050 (-8230080726166629516)
      bit _pac_sc_s1811;
      {
        assert ((v_252 >= 0) && (v_252 < 3)); //lseg_header.skh:1051: Array out of bounds
        _pac_sc_s1811 = (locvars__ANONYMOUS_s715_255[v_252]) >= 0;
        if(_pac_sc_s1811)/*lseg_header.skh:1051*/
        {
          assert ((v_252 >= 0) && (v_252 < 3)); //lseg_header.skh:1051: Array out of bounds
          _pac_sc_s1811 = (locvars__ANONYMOUS_s715_255[v_252]) < 4;
        }
      }
      if(!(_pac_sc_s1811))/*lseg_header.skh:1051*/
      {
        _out_253 = 0;
        return;
      }
      else
      {
        bit _out_s75_259;
        int t_265_s1712;
        assert ((v_252 >= 0) && (v_252 < 3)); //lseg_header.skh:1052: Array out of bounds
        t_265_s1712 = locvars__ANONYMOUS_s715_255[v_252];
        treeness@ANONYMOUS(t_265_s1712, _out_s75_259, active__ANONYMOUS_s1138_254, next__ANONYMOUS_s1139_256, supernext__ANONYMOUS_s1140_257, symbolic__ANONYMOUS_s1141_258);
        _out_253 = _out_s75_259;
        return;
      }
    }
  }
}
/*lseg_header.skh:306*/

void treeness (int t_265, ref bit _out_266, ref global bit[4] active__ANONYMOUS_s1590_267, ref global int[4] next__ANONYMOUS_s1591_268, ref global int[4] supernext__ANONYMOUS_s1592_269, ref global bit[4] symbolic__ANONYMOUS_s1593_26a)/*lseg_header.skh:306*/
{
  {
    {
      _out_266 = 0;
      bit[4] visited_26b;
      {
        for(int __sa1895 = 0; __sa1895 < 4; __sa1895 = __sa1895 + 1)/*Canonical*/
        {
          visited_26b[__sa1895] = 0;
        }
      }
      bit _out_s77_26c;
      check_p_treeness@ANONYMOUS(t_265, 0, visited_26b, 3, _out_s77_26c, active__ANONYMOUS_s1590_267, next__ANONYMOUS_s1591_268, supernext__ANONYMOUS_s1592_269, symbolic__ANONYMOUS_s1593_26a);
      _out_266 = _out_s77_26c;
      return;
    }
  }
}
/*lseg_header.skh:395*/

void update_reach (ref bit updated_43f, ref bit[4] reach_440, int stop_441, ref global bit[4] active__ANONYMOUS_s764_442, ref global int[4] next__ANONYMOUS_s765_443, ref global int[4] supernext__ANONYMOUS_s766_444, ref global bit[4] symbolic__ANONYMOUS_s767_445)/*lseg_header.skh:395*/
{
  {
    {
      int i_446;
      if(1 < 4)/*lseg_header.skh:396*/
      {
      }
      for(i_446 = 1; i_446 < 4; i_446 = i_446 + 1)/*Canonical*/
      {
        bit _pac_sc_s1877;
        {
          bit _pac_sc_s1878;
          {
            bit _pac_sc_s1879;
            {
              _pac_sc_s1879 = reach_440[i_446];
              if(_pac_sc_s1879)/*lseg_header.skh:397*/
              {
                assert ((i_446 >= 0) && (i_446 < 4)); //lseg_header.skh:397: Array out of bounds
                _pac_sc_s1879 = active__ANONYMOUS_s764_442[i_446];
              }
            }
            _pac_sc_s1878 = _pac_sc_s1879;
            if(_pac_sc_s1878)/*lseg_header.skh:397*/
            {
              assert ((i_446 >= 0) && (i_446 < 4)); //lseg_header.skh:397: Array out of bounds
              _pac_sc_s1878 = !(symbolic__ANONYMOUS_s767_445[i_446]);
            }
          }
          _pac_sc_s1877 = _pac_sc_s1878;
          if(_pac_sc_s1877)/*lseg_header.skh:397*/
          {
            _pac_sc_s1877 = i_446 != stop_441;
          }
        }
        if(_pac_sc_s1877)/*lseg_header.skh:397*/
        {
          int n_449;
          assert ((i_446 >= 0) && (i_446 < 4)); //lseg_header.skh:398: Array out of bounds
          n_449 = next__ANONYMOUS_s765_443[i_446];
          if(!((n_449 >= 0) && (n_449 < 4)))/*lseg_header.skh:399*/
          {
            assert ((i_446 >= 0) && (i_446 < 4)); //lseg_header.skh:399: Array out of bounds
            n_449 = supernext__ANONYMOUS_s766_444[i_446];
          }
          if(!((n_449 >= 0) && (n_449 < 4)))/*lseg_header.skh:400*/
          {
            n_449 = -1;
          }
          bit _pac_sc_s1880;
          {
            bit _pac_sc_s1881;
            {
              _pac_sc_s1881 = n_449 > 0;
              if(_pac_sc_s1881)/*lseg_header.skh:401*/
              {
                assert ((n_449 >= 0) && (n_449 < 4)); //lseg_header.skh:401: Array out of bounds
                _pac_sc_s1881 = active__ANONYMOUS_s764_442[n_449];
              }
            }
            _pac_sc_s1880 = _pac_sc_s1881;
            if(_pac_sc_s1880)/*lseg_header.skh:401*/
            {
              assert ((n_449 >= 0) && (n_449 < 4)); //lseg_header.skh:401: Array out of bounds
              _pac_sc_s1880 = !(reach_440[n_449]);
            }
          }
          if(_pac_sc_s1880)/*lseg_header.skh:401*/
          {
            assert ((n_449 >= 0) && (n_449 < 4)); //lseg_header.skh:402: Either null pointer or Array out of bounds
            reach_440[n_449] = 1;
            updated_43f = 1;
          }
        }
      }
    }
  }
}
/* END PACKAGE ANONYMOUS*/
------------------------------

[SATBackend] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[SATBackend] MAX LOOP UNROLLING = 3
[SATBackend] MAX FUNC INLINING  = 7
estimated size of list_find_min_rec__Wrapper
stmt cnt: 0
callee glblInit_ts__ANONYMOUS_s1683 : 1
callee glblInit_ret__ANONYMOUS_s1681 : 1
callee glblInit_ranking__ANONYMOUS_s1679 : 1
callee glblInit_malloc_budget__ANONYMOUS_s1677 : 1
callee glblInit_fake_unfold_to__ANONYMOUS_s1675 : 1
callee glblInit_fake_unfold__ANONYMOUS_s1673 : 1
callee glblInit_error_flag__ANONYMOUS_s1671 : 1
callee list_find_min_rec0 : 74

[SATBackend] After prog.accept(partialEval)
[SATBackend] OFILE = null
    [0;32m[1491836613.7570 - DEBUG] executing /home/waghon/tools/sketch-1.7.2/sketch-backend/src/SketchSolver/cegis --bnd-inbits 3 --boundmode CALLNAME --verbosity 10 --print-version -simiters 4 --assumebcheck --bnd-inline-amnt 7 -angelictupledepth 1 -srctupledepth 2 -sprandbias 1 -o /home/waghon/.sketch/tmp/test.sk/solution0-0 /home/waghon/.sketch/tmp/test.sk/input0.tmp[0m
[SATBackend] Launching: /home/waghon/tools/sketch-1.7.2/sketch-backend/src/SketchSolver/cegis --bnd-inbits 3 --boundmode CALLNAME --verbosity 10 --print-version -simiters 4 --assumebcheck --bnd-inline-amnt 7 -angelictupledepth 1 -srctupledepth 2 -sprandbias 1 -o /home/waghon/.sketch/tmp/test.sk/solution0-0 /home/waghon/.sketch/tmp/test.sk/input0.tmp 
starting command line: [/home/waghon/tools/sketch-1.7.2/sketch-backend/src/SketchSolver/cegis, --bnd-inbits, 3, --boundmode, CALLNAME, --verbosity, 10, --print-version, -simiters, 4, --assumebcheck, --bnd-inline-amnt, 7, -angelictupledepth, 1, -srctupledepth, 2, -sprandbias, 1, -o, /home/waghon/.sketch/tmp/test.sk/solution0-0, /home/waghon/.sketch/tmp/test.sk/input0.tmp]
Overriding inputs with 3
boundmode = CALLNAME
assuming  bounds checks
SOLVER RAND SEED = 1491836613
 optimization level = 6
Reading SKETCH Program in File /home/waghon/.sketch/tmp/test.sk/input0.tmp
CREATING list_find_min_rec__Wrapper
size = 49
after ba size = 49
CREATING list_find_min_rec__WrapperNospec
size = 32
after ba size = 32
CREATING glblInit_error_flag__ANONYMOUS_s1671
size = 3
after ba size = 3
CREATING glblInit_fake_unfold__ANONYMOUS_s1673
size = 3
after ba size = 3
CREATING glblInit_fake_unfold_to__ANONYMOUS_s1675
size = 3
after ba size = 3
CREATING glblInit_malloc_budget__ANONYMOUS_s1677
size = 3
after ba size = 3
CREATING glblInit_ranking__ANONYMOUS_s1679
size = 3
after ba size = 3
CREATING glblInit_ret__ANONYMOUS_s1681
size = 3
after ba size = 3
CREATING glblInit_ts__ANONYMOUS_s1683
size = 3
after ba size = 3
CREATING list_find_min_rec0
size = 1045
after ba size = 1045
CREATING init
size = 61
after ba size = 61
CREATING basic_assumptions
size = 49
after ba size = 49
CREATING basic_axioms
size = 85
after ba size = 85
CREATING pre_cond_list_find_min_rec
size = 44
after ba size = 44
CREATING snapshot_list_find_min_rec
size = 127
after ba size = 127
CREATING ranking_snapshot
size = 1572
after ba size = 1572
CREATING basic_cond0
size = 309
after ba size = 309
CREATING statement0
size = 1057
after ba size = 1057
CREATING statement1
size = 1057
after ba size = 1057
CREATING statement2
size = 1057
after ba size = 1057
CREATING loc_id0
size = 15
after ba size = 15
CREATING ranking_decreases
size = 1229
after ba size = 1229
CREATING assertPost
size = 9
after ba size = 9
CREATING int_id0
size = 13
after ba size = 13
CREATING rec_list_find_min_rec
size = 272
after ba size = 272
CREATING basic_cond1
size = 309
after ba size = 309
CREATING statement3
size = 1057
after ba size = 1057
CREATING ret_int
size = 15
after ba size = 15
CREATING post_cond_list_find_min_rec
size = 61
after ba size = 61
CREATING tree_inv
size = 87
after ba size = 87
CREATING min_comp
size = 113
after ba size = 113
CREATING treeness
size = 40
after ba size = 40
CREATING len_comp
size = 106
after ba size = 106
CREATING max_comp
size = 113
after ba size = 113
CREATING p_treeness
size = 41
after ba size = 41
CREATING lenseg_comp
size = 106
after ba size = 106
CREATING maxseg_comp
size = 114
after ba size = 114
CREATING minseg_comp
size = 114
after ba size = 114
CREATING locvar_eq
size = 36
after ba size = 36
CREATING intderef_lt_var
size = 924
after ba size = 924
CREATING locderef2var
size = 1083
after ba size = 1083
CREATING locVarAssign
size = 37
after ba size = 37
CREATING intderef2var
size = 879
after ba size = 879
CREATING intVarAssign
size = 91
after ba size = 91
CREATING malloc
size = 111
after ba size = 111
CREATING free
size = 246
after ba size = 246
CREATING locMutate
size = 309
after ba size = 309
CREATING intMutate
size = 228
after ba size = 228
CREATING havoc
size = 221
after ba size = 221
CREATING assumePre
size = 6
after ba size = 6
CREATING min_recursive
size = 114
after ba size = 114
CREATING check_p_treeness
size = 213
after ba size = 213
CREATING len_recursive
size = 619
after ba size = 619
CREATING max_recursive
size = 114
after ba size = 114
CREATING maxseg_recursive
size = 672
after ba size = 672
CREATING minseg_recursive
size = 663
after ba size = 663
CREATING sll_comp
size = 113
after ba size = 113
CREATING connect_defs
size = 407
after ba size = 407
CREATING compute_reach
size = 210
after ba size = 210
CREATING len_history
size = 127
after ba size = 127
CREATING lenseg_history
size = 127
after ba size = 127
CREATING max_history
size = 127
after ba size = 127
CREATING maxseg_history
size = 127
after ba size = 127
CREATING min_history
size = 127
after ba size = 127
CREATING minseg_history
size = 127
after ba size = 127
CREATING sll_recursive
size = 917
after ba size = 917
CREATING update_reach
size = 186
after ba size = 186
CREATING sll_history
size = 127
after ba size = 127
CREATING sllseg_history
size = 127
after ba size = 127
End of File
* before  EVERYTHING: list_find_min_rec__WrapperNospec::SPEC nodes = 32	 list_find_min_rec__Wrapper::SKETCH nodes = 49
 INBITS = 3
 CBITS  = 5
 input_ints = 23 	 input_bits = 9
 Inlining amount = 7
 Inlining functions in the sketch.
inlined 8 new size =742
inlined 20 new size =3638
inlined 50 new size =7519
inlined 154 new size =9174
inlined 40 new size =17111
inlined 75 new size =30500
inlined 107 new size =46429
inlined 125 new size =61667
inlined 136 new size =66170
inlined 101 new size =26332
inlined 0 new size =26158
END OF STEP 0
 Inlining functions in the spec.
inlined 0 new size =32
END OF STEP 0
Bailing out
after Creating Miter: Problem nodes = 21747
* Final Problem size: Problem nodes = 21747
  # OF CONTROLS:    52
 control_ints = 48 	 control_bits = 4
inputSize = 692	ctrlSize = 137
Random seeds = 1
!+ 00010010000000011111000100010000000000010000000000000000000000100000000000001010100001000001000110000000000010100101101010000000101010100
!+ H__0_395_175:0
H__4_395_176:0
H__1_395_176_165:1
H__1_395_176_168:1
H__18_391:0
H__6_395:0
H__0_391_179:0
H__0_391_180:3
H__1_391_182:7
H__1_391_184:0
H__1_391_186:1
H__1_391_187:2
H__8_391:0
H__1_391_191:0
H__1_391_193:0
H__18_392:2
H__0_392_179:0
H__0_392_180:0
H__1_392_182:0
H__1_392_184:0
H__1_392_186:0
H__1_392_187:0
H__8_392:0
H__1_392_191:4
H__1_392_193:0
H__18_393:0
H__0_393_179:0
H__0_393_180:0
H__1_393_182:0
H__1_393_184:5
H__1_393_186:2
H__1_393_187:0
H__8_393:1
H__1_393_191:0
H__1_393_193:1
H__0_397:2
H__1_398:1
H__0_396_175:0
H__4_396_176:0
H__1_396_176_165:0
H__1_396_176_168:0
H__18_394:5
H__6_396:0
H__0_394_179:2
H__0_394_180:2
H__1_394_182:5
H__1_394_184:2
H__1_394_186:0
H__1_394_187:0
H__8_394:5
H__1_394_191:2
H__1_394_193:1

BEG CHECK
 * After optims it became = 3554 was 21747
 TESTING HYPOTHESIS ITER 1
h = 78  hasserts.size()= 0
daglist_find_min_rec__WrapperNospec{
0= (1)
1= (0)
2= len#0[(1)]((0), (0), )
3= 2[0]
4= min#0[(1)]((0), (0), )
5= 4[0]
6= (7)
7= 5 == (7) 
8= 3==0 ? 7:(0)
9= 8 ! 
10= ASSERT (!8) : 
}
SLICE SIZE = 11
c# %assign: 7 clauses: 26 learn: 0 restart: 0 decision: 0 propagated: 1
 FOUND CONST: 78= 74==0 ? 77:(0) = 0
 reduced size from 3554 to 3496
 UNSAT ASSUMPTION Assume at local/test.sk:51
CONTROL: growing l=2 inputs to size 3
 TESTING HYPOTHESIS ITER 1
h = 71  hasserts.size()= 0
SLICE SIZE = 71
c# %assign: 24 clauses: 783 learn: 31 restart: 1 decision: 607 propagated: 1254
 TESTING HYPOTHESIS ITER 1
h = 80  hasserts.size()= 0
SLICE SIZE = 83
c# %assign: 32 clauses: 786 learn: 31 restart: 1 decision: 607 propagated: 1302
Simulation found a cex by solver checking:  0.03 ms 
END CHECK
********  0	ftime= 0	ctime= 0.094

!% llocvars_22_2a_idx_0_0:4
llocvars_22_2a_idx_1_0:0
lintvars_23_2b_idx_0_0:2
lintvars_23_2b_idx_1_0:1
lnext_24_2c_idx_0_0:4
lnext_24_2c_idx_1_0:0
lnext_24_2c_idx_2_0:1
lsupernext_25_2d_idx_0_0:2
lsupernext_25_2d_idx_1_0:3
lsupernext_25_2d_idx_2_0:2
lkey_26_2e_idx_0_0:0
lkey_26_2e_idx_1_0:0
lkey_26_2e_idx_2_0:1
lsymbolic_27_2f_idx_0_0:0
lsymbolic_27_2f_idx_1_0:0
lsymbolic_27_2f_idx_2_0:1
lactive_28_30_idx_0_0:0
lactive_28_30_idx_1_0:0
lactive_28_30_idx_2_0:0
ret_value_29_31_0:0
new_symbolic_2a_32_idx_0_0:0
new_symbolic_2a_32_idx_1_0:0
new_symbolic_2a_32_idx_2_0:0
new_next_2b_33_idx_0_0:0
new_next_2b_33_idx_1_0:6
new_next_2b_33_idx_2_0:2
new_supernext_2c_34_idx_0_0:0
new_supernext_2c_34_idx_1_0:0
new_supernext_2c_34_idx_2_0:0
new_key_2d_35_idx_0_0:0
new_key_2d_35_idx_1_0:0
new_key_2d_35_idx_2_0:1
len_242_0:0
min_243_0:7
max_244_0:0
len_245_0:4
min_246_0:2
max_247_0:6
minseg_248_0:0
maxseg_249_0:4
len_250_0:2
min_251_0:1
max_252_0:4
minseg_253_0:0
maxseg_254_0:4
len_255_0:2
min_256_0:0
max_257_0:0
minseg_258_0:0
maxseg_259_0:0
min_678_0:4
minseg_679_0:4
min_821_0:0
minseg_822_0:6
min_1008_0:1
minseg_1009_0:0
min_1225_0:0
minseg_1226_0:0
len_603_0:0
lenseg_604_0:0
len_684_0:0
lenseg_685_0:2
len_827_0:4
lenseg_828_0:4
len_1014_0:0
lenseg_1015_0:0
sll_332_0:0
sllseg_690_0:0
sll_832_0:0
sllseg_833_0:1
sll_1019_0:0
sllseg_1020_0:0
sll_1230_0:0
sllseg_1231_0:1
maxseg_1237_0:0
maxseg_1026_0:6
min_1463_0:5
minseg_1464_0:1
maxseg_839_0:2
min_1242_0:2
minseg_1243_0:1
min_1468_0:0
minseg_1469_0:0
maxseg_696_0:0
min_1031_0:2
minseg_1032_0:0
min_1247_0:1
minseg_1248_0:1
min_1473_0:0
minseg_1474_0:2
len_335_0:2
lenseg_699_0:2
len_844_0:0
lenseg_845_0:5
len_1036_0:4
lenseg_1037_0:3
len_1252_0:2
lenseg_1253_0:2
min_338_0:3
minseg_850_0:0
min_1041_0:0
minseg_1042_0:1
min_1257_0:0
minseg_1258_0:0
min_1478_0:0
minseg_1479_0:0
max_341_0:4
max_1046_0:5
maxseg_1047_0:4
max_1262_0:0
maxseg_1263_0:5
max_1483_0:0
maxseg_1484_0:3
sll_350_0:0
sllseg_710_0:0
sll_859_0:1
sllseg_860_0:0
sll_1051_0:0
sllseg_1052_0:0
sll_1267_0:1
sllseg_1268_0:1
maxseg_1274_0:2
maxseg_1058_0:2
min_1491_0:7
minseg_1492_0:1
maxseg_866_0:0
min_1279_0:0
minseg_1280_0:1
min_1496_0:1
minseg_1497_0:0
maxseg_716_0:5
min_1063_0:5
minseg_1064_0:4
min_1284_0:5
minseg_1285_0:1
min_1501_0:0
minseg_1502_0:4
len_353_0:0
lenseg_719_0:4
len_871_0:0
lenseg_872_0:0
len_1068_0:2
lenseg_1069_0:0
len_1289_0:4
lenseg_1290_0:0
min_356_0:4
minseg_877_0:1
min_1073_0:1
minseg_1074_0:1
min_1294_0:7
minseg_1295_0:4
min_1506_0:4
minseg_1507_0:0
max_359_0:2
max_1078_0:0
maxseg_1079_0:6
max_1299_0:2
maxseg_1300_0:1
max_1511_0:0
maxseg_1512_0:1
sll_397_0:1
sll_729_0:1
sllseg_730_0:1
sll_886_0:1
sllseg_887_0:0
sll_1083_0:0
sllseg_1084_0:1
sll_1304_0:0
sllseg_1305_0:0
maxseg_1311_0:2
maxseg_1090_0:1
min_1519_0:0
minseg_1520_0:6
maxseg_893_0:2
min_1316_0:1
minseg_1317_0:1
min_1524_0:0
minseg_1525_0:3
maxseg_736_0:6
min_1095_0:1
minseg_1096_0:6
min_1321_0:1
minseg_1322_0:1
min_1529_0:1
minseg_1530_0:0
len_400_0:4
len_738_0:0
lenseg_739_0:0
len_898_0:4
lenseg_899_0:0
len_1100_0:0
lenseg_1101_0:0
len_1326_0:4
lenseg_1327_0:0
min_403_0:2
min_903_0:4
minseg_904_0:0
min_1105_0:0
minseg_1106_0:2
min_1331_0:0
minseg_1332_0:3
min_1534_0:1
minseg_1535_0:6
max_406_0:0
max_908_0:2
max_1110_0:0
maxseg_1111_0:2
max_1336_0:1
maxseg_1337_0:0
max_1539_0:3
maxseg_1540_0:3
sll_444_0:0
sllseg_750_0:1
sll_913_0:0
sllseg_914_0:0
sll_1115_0:0
sllseg_1116_0:0
sll_1341_0:0
sllseg_1342_0:0
maxseg_1348_0:0
maxseg_1122_0:0
min_1547_0:5
minseg_1548_0:0
maxseg_920_0:0
min_1353_0:0
minseg_1354_0:0
min_1552_0:2
minseg_1553_0:4
maxseg_756_0:3
min_1127_0:0
minseg_1128_0:0
min_1358_0:3
minseg_1359_0:5
min_1557_0:2
minseg_1558_0:1
len_447_0:3
lenseg_759_0:0
len_925_0:0
lenseg_926_0:0
len_1132_0:0
lenseg_1133_0:4
len_1363_0:4
lenseg_1364_0:0
min_450_0:2
minseg_931_0:3
min_1137_0:2
minseg_1138_0:2
min_1368_0:0
minseg_1369_0:1
min_1562_0:1
minseg_1563_0:4
max_453_0:0
max_1142_0:0
maxseg_1143_0:2
max_1373_0:2
maxseg_1374_0:1
max_1567_0:1
maxseg_1568_0:0
len_648_0:0
lenseg_649_0:0
len_769_0:2
lenseg_770_0:0
len_940_0:3
lenseg_941_0:0
len_1147_0:2
lenseg_1148_0:1
min_946_0:4
minseg_947_0:1
min_1153_0:2
minseg_1154_0:1
min_1379_0:0
minseg_1380_0:5
min_1573_0:4
minseg_1574_0:4
sll_498_0:0
sll_779_0:0
sllseg_780_0:1
sll_952_0:0
sllseg_953_0:0
sll_1159_0:0
sllseg_1160_0:0
sll_1385_0:0
sllseg_1386_0:0
maxseg_1392_0:0
maxseg_1166_0:2
min_1582_0:1
minseg_1583_0:0
maxseg_959_0:0
min_1397_0:0
minseg_1398_0:0
min_1587_0:0
minseg_1588_0:0
maxseg_786_0:1
min_1171_0:6
minseg_1172_0:5
min_1402_0:0
minseg_1403_0:4
min_1592_0:0
minseg_1593_0:4
len_501_0:5
len_788_0:0
lenseg_789_0:1
len_964_0:4
lenseg_965_0:6
len_1176_0:2
lenseg_1177_0:5
len_1407_0:0
lenseg_1408_0:2
min_504_0:1
min_969_0:6
minseg_970_0:4
min_1181_0:0
minseg_1182_0:4
min_1412_0:4
minseg_1413_0:0
min_1597_0:0
minseg_1598_0:2
max_507_0:0
max_974_0:1
max_1186_0:0
maxseg_1187_0:3
max_1417_0:1
maxseg_1418_0:0
max_1602_0:6
maxseg_1603_0:0
sll_516_0:0
sll_799_0:1
sllseg_800_0:0
sll_979_0:0
sllseg_980_0:0
sll_1191_0:0
sllseg_1192_0:1
sll_1422_0:1
sllseg_1423_0:0
maxseg_1429_0:0
maxseg_1198_0:6
min_1610_0:7
minseg_1611_0:2
maxseg_986_0:0
min_1434_0:2
minseg_1435_0:0
min_1615_0:0
minseg_1616_0:1
maxseg_806_0:0
min_1203_0:3
minseg_1204_0:0
min_1439_0:4
minseg_1440_0:4
min_1620_0:2
minseg_1621_0:1
len_519_0:0
len_808_0:0
lenseg_809_0:0
len_991_0:4
lenseg_992_0:4
len_1208_0:3
lenseg_1209_0:0
len_1444_0:0
lenseg_1445_0:1
min_522_0:4
min_996_0:0
minseg_997_0:2
min_1213_0:4
minseg_1214_0:1
min_1449_0:0
minseg_1450_0:0
min_1625_0:4
minseg_1626_0:4
max_525_0:1
max_1001_0:2
max_1218_0:0
maxseg_1219_0:5
max_1454_0:0
maxseg_1455_0:1
max_1630_0:0
maxseg_1631_0:2

BEG FIND
Level 1  intsize = 3
 * After optims it became = 36663 was 21747
 * After all optims it became = 22288
 finder  hits = 2871	 bstoreObjs=39109	 sstorePages=53
hitcount 	0	36693	4
hitcount 	1	2172	4
hitcount 	2	92	3
hitcount 	3	125	4
hitcount 	4	13	1
hitcount 	5	2	5
hitcount 	6	6	2
hitcount 	7	6	4
bucketsPerDepth 	6	35
bucketsPerDepth 	7	146
bucketsPerDepth 	8	290
bucketsPerDepth 	9	245
bucketsPerDepth 	10	168
bucketsPerDepth 	11	85
bucketsPerDepth 	12	37
bucketsPerDepth 	13	16
bucketsPerDepth 	16	1
bucketsPerDepth 	18	1
* TIME TO ADD INPUT :  0.133 ms 
f# %assign: 3 clauses: 188639 learn: 108 restart: 2 decision: 1848 propagated: 399044
END FIND
!+ 00001001001100000100010000000010000100010000000000000000011010010011001001000010000000000011010001000010010011000100000100000001111100001
!+ H__0_395_175:0
H__4_395_176:0
H__1_395_176_165:2
H__1_395_176_168:2
H__18_391:6
H__6_395:0
H__0_391_179:0
H__0_391_180:0
H__1_391_182:1
H__1_391_184:2
H__1_391_186:0
H__1_391_187:0
H__8_391:2
H__1_391_191:0
H__1_391_193:1
H__18_392:2
H__0_392_179:0
H__0_392_180:0
H__1_392_182:0
H__1_392_184:0
H__1_392_186:0
H__1_392_187:0
H__8_392:3
H__1_392_191:1
H__1_392_193:1
H__18_393:3
H__0_393_179:2
H__0_393_180:0
H__1_393_182:1
H__1_393_184:4
H__1_393_186:0
H__1_393_187:0
H__8_393:0
H__1_393_191:4
H__1_393_193:5
H__0_397:0
H__1_398:2
H__0_396_175:0
H__4_396_176:0
H__1_396_176_165:1
H__1_396_176_168:1
H__18_394:3
H__6_396:0
H__0_394_179:2
H__0_394_180:0
H__1_394_182:0
H__1_394_184:1
H__1_394_186:0
H__1_394_187:4
H__8_394:7
H__1_394_191:1
H__1_394_193:4

BEG CHECK
 * After optims it became = 5824 was 21747
 TESTING HYPOTHESIS ITER 1
h = 80  hasserts.size()= 0
SLICE SIZE = 83
c# %assign: 32 clauses: 786 learn: 31 restart: 1 decision: 607 propagated: 1302
 TESTING HYPOTHESIS ITER 1
h = 85  hasserts.size()= 1
SLICE SIZE = 89
c# %assign: 32 clauses: 820 learn: 37 restart: 1 decision: 815 propagated: 1980
Simulation found a cex by solver checking:  0.029 ms 
END CHECK
********  1	ftime= 0.222	ctime= 0.055

!% llocvars_22_2a_idx_0_0:0
llocvars_22_2a_idx_1_0:0
lintvars_23_2b_idx_0_0:0
lintvars_23_2b_idx_1_0:1
lnext_24_2c_idx_0_0:0
lnext_24_2c_idx_1_0:0
lnext_24_2c_idx_2_0:4
lsupernext_25_2d_idx_0_0:1
lsupernext_25_2d_idx_1_0:1
lsupernext_25_2d_idx_2_0:2
lkey_26_2e_idx_0_0:1
lkey_26_2e_idx_1_0:4
lkey_26_2e_idx_2_0:4
lsymbolic_27_2f_idx_0_0:0
lsymbolic_27_2f_idx_1_0:0
lsymbolic_27_2f_idx_2_0:1
lactive_28_30_idx_0_0:0
lactive_28_30_idx_1_0:0
lactive_28_30_idx_2_0:1
ret_value_29_31_0:0
new_symbolic_2a_32_idx_0_0:0
new_symbolic_2a_32_idx_1_0:0
new_symbolic_2a_32_idx_2_0:0
new_next_2b_33_idx_0_0:2
new_next_2b_33_idx_1_0:2
new_next_2b_33_idx_2_0:0
new_supernext_2c_34_idx_0_0:0
new_supernext_2c_34_idx_1_0:0
new_supernext_2c_34_idx_2_0:0
new_key_2d_35_idx_0_0:0
new_key_2d_35_idx_1_0:0
new_key_2d_35_idx_2_0:0
len_242_0:0
min_243_0:7
max_244_0:0
len_245_0:5
min_246_0:0
max_247_0:4
minseg_248_0:0
maxseg_249_0:1
len_250_0:4
min_251_0:1
max_252_0:4
minseg_253_0:3
maxseg_254_0:4
len_255_0:4
min_256_0:4
max_257_0:4
minseg_258_0:0
maxseg_259_0:0
min_678_0:2
minseg_679_0:5
min_821_0:4
minseg_822_0:4
min_1008_0:0
minseg_1009_0:2
min_1225_0:1
minseg_1226_0:4
len_603_0:4
lenseg_604_0:0
len_684_0:5
lenseg_685_0:0
len_827_0:2
lenseg_828_0:0
len_1014_0:2
lenseg_1015_0:0
sll_332_0:0
sllseg_690_0:0
sll_832_0:0
sllseg_833_0:0
sll_1019_0:0
sllseg_1020_0:1
sll_1230_0:0
sllseg_1231_0:0
maxseg_1237_0:0
maxseg_1026_0:0
min_1463_0:5
minseg_1464_0:3
maxseg_839_0:1
min_1242_0:0
minseg_1243_0:0
min_1468_0:0
minseg_1469_0:0
maxseg_696_0:4
min_1031_0:0
minseg_1032_0:1
min_1247_0:2
minseg_1248_0:6
min_1473_0:3
minseg_1474_0:0
len_335_0:1
lenseg_699_0:4
len_844_0:5
lenseg_845_0:2
len_1036_0:0
lenseg_1037_0:1
len_1252_0:0
lenseg_1253_0:0
min_338_0:0
minseg_850_0:1
min_1041_0:6
minseg_1042_0:0
min_1257_0:2
minseg_1258_0:0
min_1478_0:0
minseg_1479_0:0
max_341_0:0
max_1046_0:7
maxseg_1047_0:0
max_1262_0:0
maxseg_1263_0:0
max_1483_0:0
maxseg_1484_0:0
sll_350_0:0
sllseg_710_0:0
sll_859_0:0
sllseg_860_0:0
sll_1051_0:1
sllseg_1052_0:0
sll_1267_0:1
sllseg_1268_0:0
maxseg_1274_0:4
maxseg_1058_0:4
min_1491_0:2
minseg_1492_0:0
maxseg_866_0:1
min_1279_0:2
minseg_1280_0:0
min_1496_0:7
minseg_1497_0:0
maxseg_716_0:2
min_1063_0:0
minseg_1064_0:6
min_1284_0:4
minseg_1285_0:0
min_1501_0:0
minseg_1502_0:3
len_353_0:0
lenseg_719_0:0
len_871_0:6
lenseg_872_0:4
len_1068_0:0
lenseg_1069_0:0
len_1289_0:2
lenseg_1290_0:0
min_356_0:0
minseg_877_0:4
min_1073_0:1
minseg_1074_0:0
min_1294_0:2
minseg_1295_0:0
min_1506_0:4
minseg_1507_0:3
max_359_0:0
max_1078_0:0
maxseg_1079_0:2
max_1299_0:2
maxseg_1300_0:2
max_1511_0:3
maxseg_1512_0:0
sll_397_0:0
sll_729_0:0
sllseg_730_0:1
sll_886_0:0
sllseg_887_0:0
sll_1083_0:0
sllseg_1084_0:0
sll_1304_0:0
sllseg_1305_0:0
maxseg_1311_0:0
maxseg_1090_0:4
min_1519_0:1
minseg_1520_0:2
maxseg_893_0:0
min_1316_0:0
minseg_1317_0:4
min_1524_0:0
minseg_1525_0:4
maxseg_736_0:4
min_1095_0:1
minseg_1096_0:0
min_1321_0:2
minseg_1322_0:1
min_1529_0:4
minseg_1530_0:0
len_400_0:1
len_738_0:1
lenseg_739_0:4
len_898_0:2
lenseg_899_0:2
len_1100_0:0
lenseg_1101_0:0
len_1326_0:0
lenseg_1327_0:0
min_403_0:2
min_903_0:2
minseg_904_0:5
min_1105_0:0
minseg_1106_0:2
min_1331_0:0
minseg_1332_0:1
min_1534_0:2
minseg_1535_0:0
max_406_0:1
max_908_0:0
max_1110_0:0
maxseg_1111_0:4
max_1336_0:0
maxseg_1337_0:1
max_1539_0:0
maxseg_1540_0:0
sll_444_0:0
sllseg_750_0:0
sll_913_0:0
sllseg_914_0:0
sll_1115_0:0
sllseg_1116_0:0
sll_1341_0:0
sllseg_1342_0:0
maxseg_1348_0:5
maxseg_1122_0:0
min_1547_0:1
minseg_1548_0:4
maxseg_920_0:5
min_1353_0:0
minseg_1354_0:2
min_1552_0:0
minseg_1553_0:0
maxseg_756_0:4
min_1127_0:0
minseg_1128_0:2
min_1358_0:1
minseg_1359_0:3
min_1557_0:3
minseg_1558_0:0
len_447_0:3
lenseg_759_0:0
len_925_0:6
lenseg_926_0:2
len_1132_0:4
lenseg_1133_0:5
len_1363_0:2
lenseg_1364_0:3
min_450_0:3
minseg_931_0:0
min_1137_0:1
minseg_1138_0:6
min_1368_0:0
minseg_1369_0:0
min_1562_0:2
minseg_1563_0:0
max_453_0:0
max_1142_0:0
maxseg_1143_0:1
max_1373_0:4
maxseg_1374_0:0
max_1567_0:1
maxseg_1568_0:2
len_648_0:4
lenseg_649_0:2
len_769_0:0
lenseg_770_0:0
len_940_0:4
lenseg_941_0:4
len_1147_0:2
lenseg_1148_0:0
min_946_0:1
minseg_947_0:2
min_1153_0:0
minseg_1154_0:1
min_1379_0:0
minseg_1380_0:0
min_1573_0:3
minseg_1574_0:5
sll_498_0:1
sll_779_0:0
sllseg_780_0:1
sll_952_0:0
sllseg_953_0:0
sll_1159_0:0
sllseg_1160_0:1
sll_1385_0:0
sllseg_1386_0:0
maxseg_1392_0:0
maxseg_1166_0:0
min_1582_0:0
minseg_1583_0:1
maxseg_959_0:0
min_1397_0:1
minseg_1398_0:4
min_1587_0:0
minseg_1588_0:0
maxseg_786_0:0
min_1171_0:0
minseg_1172_0:4
min_1402_0:0
minseg_1403_0:4
min_1592_0:0
minseg_1593_0:0
len_501_0:0
len_788_0:5
lenseg_789_0:0
len_964_0:0
lenseg_965_0:5
len_1176_0:2
lenseg_1177_0:7
len_1407_0:0
lenseg_1408_0:2
min_504_0:5
min_969_0:5
minseg_970_0:0
min_1181_0:6
minseg_1182_0:2
min_1412_0:6
minseg_1413_0:2
min_1597_0:2
minseg_1598_0:4
max_507_0:6
max_974_0:1
max_1186_0:0
maxseg_1187_0:4
max_1417_0:2
maxseg_1418_0:1
max_1602_0:0
maxseg_1603_0:2
sll_516_0:0
sll_799_0:0
sllseg_800_0:0
sll_979_0:1
sllseg_980_0:0
sll_1191_0:0
sllseg_1192_0:1
sll_1422_0:0
sllseg_1423_0:1
maxseg_1429_0:1
maxseg_1198_0:1
min_1610_0:6
minseg_1611_0:6
maxseg_986_0:2
min_1434_0:1
minseg_1435_0:0
min_1615_0:4
minseg_1616_0:0
maxseg_806_0:1
min_1203_0:1
minseg_1204_0:0
min_1439_0:0
minseg_1440_0:1
min_1620_0:1
minseg_1621_0:1
len_519_0:0
len_808_0:0
lenseg_809_0:0
len_991_0:0
lenseg_992_0:0
len_1208_0:7
lenseg_1209_0:2
len_1444_0:6
lenseg_1445_0:3
min_522_0:2
min_996_0:5
minseg_997_0:2
min_1213_0:1
minseg_1214_0:0
min_1449_0:2
minseg_1450_0:2
min_1625_0:0
minseg_1626_0:2
max_525_0:3
max_1001_0:0
max_1218_0:4
maxseg_1219_0:4
max_1454_0:1
maxseg_1455_0:7
max_1630_0:0
maxseg_1631_0:2

BEG FIND
Level 1  intsize = 3
 * After optims it became = 18472 was 21747
 * After all optims it became = 5936
 finder  hits = 3790	 bstoreObjs=49914	 sstorePages=66
hitcount 	0	46792	5
hitcount 	1	2790	4
hitcount 	2	150	4
hitcount 	3	142	4
hitcount 	4	21	1
hitcount 	5	4	6
hitcount 	6	6	2
hitcount 	7	6	4
hitcount 	12	1	7
hitcount 	15	1	6
hitcount 	65	1	7
bucketsPerDepth 	6	6
bucketsPerDepth 	7	45
bucketsPerDepth 	8	202
bucketsPerDepth 	9	271
bucketsPerDepth 	10	226
bucketsPerDepth 	11	147
bucketsPerDepth 	12	72
bucketsPerDepth 	13	33
bucketsPerDepth 	14	17
bucketsPerDepth 	15	1
bucketsPerDepth 	16	3
bucketsPerDepth 	18	1
* TIME TO ADD INPUT :  0.073 ms 
f# %assign: 16 clauses: 236321 learn: 149 restart: 3 decision: 2565 propagated: 560447
END FIND
!+ 10000000010010000100010101100001001000110000010010000010011111100101101110000010000001101000001100100100011010001010000110000001001000001
!+ H__0_395_175:1
H__4_395_176:0
H__1_395_176_165:0
H__1_395_176_168:0
H__18_391:1
H__6_395:1
H__0_391_179:0
H__0_391_180:0
H__1_391_182:1
H__1_391_184:2
H__1_391_186:5
H__1_391_187:1
H__8_391:4
H__1_391_191:4
H__1_391_193:0
H__18_392:3
H__0_392_179:0
H__0_392_180:0
H__1_392_182:1
H__1_392_184:1
H__1_392_186:0
H__1_392_187:1
H__8_392:7
H__1_392_191:7
H__1_392_193:4
H__18_393:6
H__0_393_179:2
H__0_393_180:3
H__1_393_182:0
H__1_393_184:4
H__1_393_186:0
H__1_393_187:0
H__8_393:3
H__1_393_191:1
H__1_393_193:0
H__0_397:3
H__1_398:4
H__0_396_175:0
H__4_396_176:1
H__1_396_176_165:0
H__1_396_176_168:3
H__18_394:1
H__6_396:0
H__0_394_179:1
H__0_394_180:1
H__1_394_182:0
H__1_394_184:3
H__1_394_186:0
H__1_394_187:4
H__8_394:4
H__1_394_191:0
H__1_394_193:4

BEG CHECK
 * After optims it became = 4894 was 21747
 TESTING HYPOTHESIS ITER 1
h = 85  hasserts.size()= 1
SLICE SIZE = 89
c# %assign: 32 clauses: 820 learn: 37 restart: 1 decision: 815 propagated: 1980
 TESTING HYPOTHESIS ITER 1
h = 98  hasserts.size()= 1
SLICE SIZE = 87
c# %assign: 33 clauses: 786 learn: 31 restart: 1 decision: 607 propagated: 1305
 TESTING HYPOTHESIS ITER 1
h = 99  hasserts.size()= 1
SLICE SIZE = 88
c# %assign: 33 clauses: 786 learn: 31 restart: 1 decision: 607 propagated: 1305
 TESTING HYPOTHESIS ITER 1
h = 114  hasserts.size()= 1
SLICE SIZE = 89
c# %assign: 32 clauses: 820 learn: 36 restart: 1 decision: 771 propagated: 1789
 TESTING HYPOTHESIS ITER 1
h = 1329  hasserts.size()= 2
SLICE SIZE = 277
c# %assign: 16 clauses: 2446 learn: 29 restart: 1 decision: 813 propagated: 2312
 TESTING HYPOTHESIS ITER 1
h = 95  hasserts.size()= 1
SLICE SIZE = 92
c# %assign: 33 clauses: 814 learn: 29 restart: 1 decision: 728 propagated: 1490
 TESTING HYPOTHESIS ITER 1
h = 1441  hasserts.size()= 2
SLICE SIZE = 303
c# %assign: 19 clauses: 2494 learn: 50 restart: 1 decision: 712 propagated: 5205
Simulation found a cex by solver checking:  0.04 ms 
END CHECK
********  2	ftime= 0.107	ctime= 999.062

!% llocvars_22_2a_idx_0_0:4
llocvars_22_2a_idx_1_0:1
lintvars_23_2b_idx_0_0:0
lintvars_23_2b_idx_1_0:1
lnext_24_2c_idx_0_0:3
lnext_24_2c_idx_1_0:4
lnext_24_2c_idx_2_0:2
lsupernext_25_2d_idx_0_0:4
lsupernext_25_2d_idx_1_0:4
lsupernext_25_2d_idx_2_0:5
lkey_26_2e_idx_0_0:1
lkey_26_2e_idx_1_0:2
lkey_26_2e_idx_2_0:0
lsymbolic_27_2f_idx_0_0:0
lsymbolic_27_2f_idx_1_0:0
lsymbolic_27_2f_idx_2_0:1
lactive_28_30_idx_0_0:1
lactive_28_30_idx_1_0:0
lactive_28_30_idx_2_0:1
ret_value_29_31_0:6
new_symbolic_2a_32_idx_0_0:0
new_symbolic_2a_32_idx_1_0:0
new_symbolic_2a_32_idx_2_0:0
new_next_2b_33_idx_0_0:3
new_next_2b_33_idx_1_0:4
new_next_2b_33_idx_2_0:2
new_supernext_2c_34_idx_0_0:4
new_supernext_2c_34_idx_1_0:0
new_supernext_2c_34_idx_2_0:1
new_key_2d_35_idx_0_0:0
new_key_2d_35_idx_1_0:0
new_key_2d_35_idx_2_0:2
len_242_0:0
min_243_0:7
max_244_0:0
len_245_0:2
min_246_0:1
max_247_0:1
minseg_248_0:1
maxseg_249_0:2
len_250_0:4
min_251_0:1
max_252_0:1
minseg_253_0:2
maxseg_254_0:4
len_255_0:1
min_256_0:0
max_257_0:5
minseg_258_0:1
maxseg_259_0:1
min_678_0:1
minseg_679_0:2
min_821_0:0
minseg_822_0:0
min_1008_0:3
minseg_1009_0:2
min_1225_0:4
minseg_1226_0:4
len_603_0:0
lenseg_604_0:2
len_684_0:2
lenseg_685_0:0
len_827_0:1
lenseg_828_0:0
len_1014_0:2
lenseg_1015_0:0
sll_332_0:0
sllseg_690_0:0
sll_832_0:0
sllseg_833_0:0
sll_1019_0:1
sllseg_1020_0:1
sll_1230_0:0
sllseg_1231_0:0
maxseg_1237_0:0
maxseg_1026_0:2
min_1463_0:0
minseg_1464_0:0
maxseg_839_0:2
min_1242_0:4
minseg_1243_0:0
min_1468_0:3
minseg_1469_0:4
maxseg_696_0:0
min_1031_0:5
minseg_1032_0:4
min_1247_0:3
minseg_1248_0:0
min_1473_0:2
minseg_1474_0:0
len_335_0:2
lenseg_699_0:3
len_844_0:0
lenseg_845_0:5
len_1036_0:0
lenseg_1037_0:0
len_1252_0:4
lenseg_1253_0:1
min_338_0:0
minseg_850_0:0
min_1041_0:0
minseg_1042_0:0
min_1257_0:1
minseg_1258_0:0
min_1478_0:0
minseg_1479_0:1
max_341_0:1
max_1046_0:1
maxseg_1047_0:0
max_1262_0:3
maxseg_1263_0:0
max_1483_0:0
maxseg_1484_0:0
sll_350_0:1
sllseg_710_0:0
sll_859_0:0
sllseg_860_0:0
sll_1051_0:0
sllseg_1052_0:0
sll_1267_0:0
sllseg_1268_0:0
maxseg_1274_0:1
maxseg_1058_0:0
min_1491_0:4
minseg_1492_0:4
maxseg_866_0:0
min_1279_0:0
minseg_1280_0:0
min_1496_0:0
minseg_1497_0:1
maxseg_716_0:4
min_1063_0:1
minseg_1064_0:2
min_1284_0:5
minseg_1285_0:3
min_1501_0:5
minseg_1502_0:0
len_353_0:2
lenseg_719_0:4
len_871_0:1
lenseg_872_0:0
len_1068_0:0
lenseg_1069_0:5
len_1289_0:0
lenseg_1290_0:0
min_356_0:0
minseg_877_0:2
min_1073_0:2
minseg_1074_0:4
min_1294_0:0
minseg_1295_0:0
min_1506_0:7
minseg_1507_0:2
max_359_0:0
max_1078_0:0
maxseg_1079_0:3
max_1299_0:0
maxseg_1300_0:2
max_1511_0:1
maxseg_1512_0:1
sll_397_0:0
sll_729_0:1
sllseg_730_0:0
sll_886_0:0
sllseg_887_0:1
sll_1083_0:0
sllseg_1084_0:0
sll_1304_0:1
sllseg_1305_0:0
maxseg_1311_0:0
maxseg_1090_0:1
min_1519_0:4
minseg_1520_0:1
maxseg_893_0:3
min_1316_0:2
minseg_1317_0:7
min_1524_0:0
minseg_1525_0:3
maxseg_736_0:0
min_1095_0:2
minseg_1096_0:2
min_1321_0:0
minseg_1322_0:0
min_1529_0:0
minseg_1530_0:0
len_400_0:1
len_738_0:1
lenseg_739_0:0
len_898_0:0
lenseg_899_0:1
len_1100_0:2
lenseg_1101_0:0
len_1326_0:0
lenseg_1327_0:3
min_403_0:4
min_903_0:1
minseg_904_0:4
min_1105_0:2
minseg_1106_0:4
min_1331_0:1
minseg_1332_0:0
min_1534_0:2
minseg_1535_0:0
max_406_0:4
max_908_0:1
max_1110_0:5
maxseg_1111_0:0
max_1336_0:0
maxseg_1337_0:3
max_1539_0:3
maxseg_1540_0:0
sll_444_0:0
sllseg_750_0:1
sll_913_0:0
sllseg_914_0:0
sll_1115_0:0
sllseg_1116_0:0
sll_1341_0:0
sllseg_1342_0:0
maxseg_1348_0:0
maxseg_1122_0:0
min_1547_0:0
minseg_1548_0:0
maxseg_920_0:0
min_1353_0:0
minseg_1354_0:2
min_1552_0:0
minseg_1553_0:0
maxseg_756_0:4
min_1127_0:0
minseg_1128_0:4
min_1358_0:3
minseg_1359_0:4
min_1557_0:2
minseg_1558_0:0
len_447_0:2
lenseg_759_0:1
len_925_0:2
lenseg_926_0:4
len_1132_0:4
lenseg_1133_0:0
len_1363_0:0
lenseg_1364_0:0
min_450_0:0
minseg_931_0:0
min_1137_0:3
minseg_1138_0:2
min_1368_0:0
minseg_1369_0:0
min_1562_0:2
minseg_1563_0:0
max_453_0:3
max_1142_0:0
maxseg_1143_0:1
max_1373_0:4
maxseg_1374_0:5
max_1567_0:0
maxseg_1568_0:0
len_648_0:2
lenseg_649_0:0
len_769_0:6
lenseg_770_0:4
len_940_0:6
lenseg_941_0:2
len_1147_0:5
lenseg_1148_0:0
min_946_0:6
minseg_947_0:0
min_1153_0:6
minseg_1154_0:0
min_1379_0:1
minseg_1380_0:5
min_1573_0:4
minseg_1574_0:4
sll_498_0:1
sll_779_0:1
sllseg_780_0:0
sll_952_0:1
sllseg_953_0:0
sll_1159_0:0
sllseg_1160_0:0
sll_1385_0:0
sllseg_1386_0:0
maxseg_1392_0:4
maxseg_1166_0:4
min_1582_0:0
minseg_1583_0:4
maxseg_959_0:0
min_1397_0:2
minseg_1398_0:0
min_1587_0:0
minseg_1588_0:0
maxseg_786_0:0
min_1171_0:1
minseg_1172_0:3
min_1402_0:5
minseg_1403_0:0
min_1592_0:0
minseg_1593_0:0
len_501_0:2
len_788_0:0
lenseg_789_0:4
len_964_0:2
lenseg_965_0:2
len_1176_0:3
lenseg_1177_0:6
len_1407_0:0
lenseg_1408_0:5
min_504_0:0
min_969_0:2
minseg_970_0:0
min_1181_0:4
minseg_1182_0:6
min_1412_0:5
minseg_1413_0:4
min_1597_0:4
minseg_1598_0:0
max_507_0:4
max_974_0:0
max_1186_0:0
maxseg_1187_0:5
max_1417_0:0
maxseg_1418_0:2
max_1602_0:0
maxseg_1603_0:0
sll_516_0:1
sll_799_0:1
sllseg_800_0:0
sll_979_0:1
sllseg_980_0:0
sll_1191_0:0
sllseg_1192_0:0
sll_1422_0:0
sllseg_1423_0:1
maxseg_1429_0:4
maxseg_1198_0:1
min_1610_0:4
minseg_1611_0:0
maxseg_986_0:0
min_1434_0:5
minseg_1435_0:0
min_1615_0:4
minseg_1616_0:0
maxseg_806_0:2
min_1203_0:0
minseg_1204_0:0
min_1439_0:0
minseg_1440_0:0
min_1620_0:1
minseg_1621_0:4
len_519_0:0
len_808_0:4
lenseg_809_0:0
len_991_0:1
lenseg_992_0:2
len_1208_0:5
lenseg_1209_0:0
len_1444_0:4
lenseg_1445_0:2
min_522_0:0
min_996_0:0
minseg_997_0:4
min_1213_0:0
minseg_1214_0:0
min_1449_0:0
minseg_1450_0:1
min_1625_0:1
minseg_1626_0:0
max_525_0:0
max_1001_0:0
max_1218_0:5
maxseg_1219_0:0
max_1454_0:0
maxseg_1455_0:0
max_1630_0:4
maxseg_1631_0:0

BEG FIND
Level 1  intsize = 3
 * After optims it became = 38813 was 21747
 * After all optims it became = 24033
 finder  hits = 9401	 bstoreObjs=6602	 sstorePages=9
hitcount 	1	5081	1
hitcount 	2	794	1
hitcount 	3	462	1
hitcount 	4	192	1
hitcount 	5	24	1
hitcount 	6	14	1
hitcount 	7	12	1
hitcount 	8	10	1
hitcount 	9	1	2
hitcount 	10	4	1
hitcount 	12	3	1
hitcount 	14	2	1
hitcount 	15	1	2
hitcount 	17	1	1
hitcount 	65	1	3
bucketsPerDepth 	0	18
bucketsPerDepth 	1	98
bucketsPerDepth 	2	571
bucketsPerDepth 	3	333
bucketsPerDepth 	4	2
* TIME TO ADD INPUT :  0.142 ms 
f# %assign: 9 clauses: 442644 learn: 178 restart: 4 decision: 2914 propagated: 800229
END FIND
!+ 00000010011110000110001000000001100000110000010000000010011110000100110000100010000101100100100000010000000111010100000010000001001100001
!+ H__0_395_175:0
H__4_395_176:0
H__1_395_176_165:0
H__1_395_176_168:1
H__18_391:7
H__6_395:1
H__0_391_179:0
H__0_391_180:0
H__1_391_182:3
H__1_391_184:4
H__1_391_186:0
H__1_391_187:0
H__8_391:4
H__1_391_191:1
H__1_391_193:0
H__18_392:3
H__0_392_179:0
H__0_392_180:0
H__1_392_182:1
H__1_392_184:0
H__1_392_186:0
H__1_392_187:1
H__8_392:7
H__1_392_191:1
H__1_392_193:4
H__18_393:4
H__0_393_179:1
H__0_393_180:0
H__1_393_182:2
H__1_393_184:4
H__1_393_186:0
H__1_393_187:2
H__8_393:3
H__1_393_191:2
H__1_393_193:2
H__0_397:0
H__1_398:0
H__0_396_175:1
H__4_396_176:0
H__1_396_176_165:0
H__1_396_176_168:4
H__18_394:3
H__6_396:1
H__0_394_179:2
H__0_394_180:0
H__1_394_182:0
H__1_394_184:2
H__1_394_186:0
H__1_394_187:4
H__8_394:4
H__1_394_191:1
H__1_394_193:4

BEG CHECK
 * After optims it became = 1720 was 21747
 TESTING HYPOTHESIS ITER 1
h = 111  hasserts.size()= 1
SLICE SIZE = 92
c# %assign: 31 clauses: 832 learn: 26 restart: 1 decision: 555 propagated: 1364
 TESTING HYPOTHESIS ITER 1
h = 125  hasserts.size()= 1
SLICE SIZE = 96
c# %assign: 33 clauses: 1181 learn: 42 restart: 1 decision: 1023 propagated: 2482
 TESTING HYPOTHESIS ITER 1
h = 336  hasserts.size()= 2
SLICE SIZE = 276
c# %assign: 20 clauses: 2370 learn: 53 restart: 1 decision: 880 propagated: 5937
Simulation found a cex by solver checking:  0.032 ms 
END CHECK
********  3	ftime= 0.236	ctime= 0.059

!% llocvars_22_2a_idx_0_0:0
llocvars_22_2a_idx_1_0:1
lintvars_23_2b_idx_0_0:1
lintvars_23_2b_idx_1_0:5
lnext_24_2c_idx_0_0:6
lnext_24_2c_idx_1_0:4
lnext_24_2c_idx_2_0:4
lsupernext_25_2d_idx_0_0:4
lsupernext_25_2d_idx_1_0:6
lsupernext_25_2d_idx_2_0:1
lkey_26_2e_idx_0_0:0
lkey_26_2e_idx_1_0:0
lkey_26_2e_idx_2_0:1
lsymbolic_27_2f_idx_0_0:1
lsymbolic_27_2f_idx_1_0:0
lsymbolic_27_2f_idx_2_0:0
lactive_28_30_idx_0_0:1
lactive_28_30_idx_1_0:0
lactive_28_30_idx_2_0:0
ret_value_29_31_0:0
new_symbolic_2a_32_idx_0_0:0
new_symbolic_2a_32_idx_1_0:1
new_symbolic_2a_32_idx_2_0:1
new_next_2b_33_idx_0_0:0
new_next_2b_33_idx_1_0:0
new_next_2b_33_idx_2_0:1
new_supernext_2c_34_idx_0_0:0
new_supernext_2c_34_idx_1_0:1
new_supernext_2c_34_idx_2_0:5
new_key_2d_35_idx_0_0:2
new_key_2d_35_idx_1_0:5
new_key_2d_35_idx_2_0:4
len_242_0:0
min_243_0:7
max_244_0:0
len_245_0:1
min_246_0:0
max_247_0:2
minseg_248_0:4
maxseg_249_0:4
len_250_0:1
min_251_0:1
max_252_0:5
minseg_253_0:2
maxseg_254_0:4
len_255_0:2
min_256_0:2
max_257_0:2
minseg_258_0:2
maxseg_259_0:2
min_678_0:0
minseg_679_0:6
min_821_0:0
minseg_822_0:0
min_1008_0:1
minseg_1009_0:0
min_1225_0:0
minseg_1226_0:0
len_603_0:0
lenseg_604_0:0
len_684_0:0
lenseg_685_0:0
len_827_0:0
lenseg_828_0:0
len_1014_0:0
lenseg_1015_0:0
sll_332_0:0
sllseg_690_0:1
sll_832_0:1
sllseg_833_0:0
sll_1019_0:0
sllseg_1020_0:0
sll_1230_0:1
sllseg_1231_0:1
maxseg_1237_0:1
maxseg_1026_0:4
min_1463_0:2
minseg_1464_0:1
maxseg_839_0:0
min_1242_0:0
minseg_1243_0:3
min_1468_0:4
minseg_1469_0:0
maxseg_696_0:0
min_1031_0:4
minseg_1032_0:4
min_1247_0:5
minseg_1248_0:0
min_1473_0:0
minseg_1474_0:0
len_335_0:0
lenseg_699_0:0
len_844_0:4
lenseg_845_0:1
len_1036_0:0
lenseg_1037_0:4
len_1252_0:0
lenseg_1253_0:0
min_338_0:2
minseg_850_0:5
min_1041_0:4
minseg_1042_0:0
min_1257_0:2
minseg_1258_0:2
min_1478_0:1
minseg_1479_0:0
max_341_0:6
max_1046_0:2
maxseg_1047_0:0
max_1262_0:0
maxseg_1263_0:0
max_1483_0:0
maxseg_1484_0:0
sll_350_0:1
sllseg_710_0:0
sll_859_0:0
sllseg_860_0:0
sll_1051_0:0
sllseg_1052_0:0
sll_1267_0:1
sllseg_1268_0:0
maxseg_1274_0:0
maxseg_1058_0:0
min_1491_0:6
minseg_1492_0:0
maxseg_866_0:2
min_1279_0:0
minseg_1280_0:0
min_1496_0:2
minseg_1497_0:0
maxseg_716_0:5
min_1063_0:0
minseg_1064_0:1
min_1284_0:0
minseg_1285_0:3
min_1501_0:0
minseg_1502_0:4
len_353_0:6
lenseg_719_0:4
len_871_0:0
lenseg_872_0:0
len_1068_0:0
lenseg_1069_0:5
len_1289_0:0
lenseg_1290_0:0
min_356_0:1
minseg_877_0:2
min_1073_0:0
minseg_1074_0:0
min_1294_0:0
minseg_1295_0:2
min_1506_0:1
minseg_1507_0:0
max_359_0:0
max_1078_0:2
maxseg_1079_0:3
max_1299_0:0
maxseg_1300_0:3
max_1511_0:0
maxseg_1512_0:0
sll_397_0:0
sll_729_0:0
sllseg_730_0:0
sll_886_0:1
sllseg_887_0:0
sll_1083_0:0
sllseg_1084_0:0
sll_1304_0:1
sllseg_1305_0:0
maxseg_1311_0:1
maxseg_1090_0:2
min_1519_0:0
minseg_1520_0:2
maxseg_893_0:2
min_1316_0:0
minseg_1317_0:0
min_1524_0:0
minseg_1525_0:0
maxseg_736_0:0
min_1095_0:2
minseg_1096_0:1
min_1321_0:5
minseg_1322_0:4
min_1529_0:4
minseg_1530_0:0
len_400_0:5
len_738_0:0
lenseg_739_0:2
len_898_0:0
lenseg_899_0:2
len_1100_0:0
lenseg_1101_0:1
len_1326_0:7
lenseg_1327_0:1
min_403_0:2
min_903_0:3
minseg_904_0:1
min_1105_0:2
minseg_1106_0:0
min_1331_0:0
minseg_1332_0:0
min_1534_0:0
minseg_1535_0:7
max_406_0:2
max_908_0:0
max_1110_0:1
maxseg_1111_0:0
max_1336_0:1
maxseg_1337_0:0
max_1539_0:2
maxseg_1540_0:1
sll_444_0:0
sllseg_750_0:0
sll_913_0:0
sllseg_914_0:0
sll_1115_0:0
sllseg_1116_0:0
sll_1341_0:0
sllseg_1342_0:0
maxseg_1348_0:0
maxseg_1122_0:0
min_1547_0:7
minseg_1548_0:4
maxseg_920_0:3
min_1353_0:4
minseg_1354_0:6
min_1552_0:0
minseg_1553_0:1
maxseg_756_0:0
min_1127_0:0
minseg_1128_0:6
min_1358_0:6
minseg_1359_0:0
min_1557_0:0
minseg_1558_0:5
len_447_0:7
lenseg_759_0:0
len_925_0:5
lenseg_926_0:0
len_1132_0:5
lenseg_1133_0:4
len_1363_0:0
lenseg_1364_0:4
min_450_0:1
minseg_931_0:4
min_1137_0:0
minseg_1138_0:4
min_1368_0:1
minseg_1369_0:7
min_1562_0:3
minseg_1563_0:1
max_453_0:0
max_1142_0:4
maxseg_1143_0:2
max_1373_0:0
maxseg_1374_0:0
max_1567_0:4
maxseg_1568_0:0
len_648_0:0
lenseg_649_0:0
len_769_0:0
lenseg_770_0:0
len_940_0:0
lenseg_941_0:1
len_1147_0:2
lenseg_1148_0:0
min_946_0:6
minseg_947_0:0
min_1153_0:6
minseg_1154_0:0
min_1379_0:4
minseg_1380_0:7
min_1573_0:0
minseg_1574_0:0
sll_498_0:1
sll_779_0:0
sllseg_780_0:0
sll_952_0:0
sllseg_953_0:0
sll_1159_0:0
sllseg_1160_0:0
sll_1385_0:0
sllseg_1386_0:1
maxseg_1392_0:0
maxseg_1166_0:2
min_1582_0:0
minseg_1583_0:0
maxseg_959_0:0
min_1397_0:2
minseg_1398_0:0
min_1587_0:1
minseg_1588_0:0
maxseg_786_0:6
min_1171_0:0
minseg_1172_0:1
min_1402_0:3
minseg_1403_0:0
min_1592_0:3
minseg_1593_0:0
len_501_0:0
len_788_0:1
lenseg_789_0:2
len_964_0:0
lenseg_965_0:0
len_1176_0:5
lenseg_1177_0:4
len_1407_0:1
lenseg_1408_0:0
min_504_0:4
min_969_0:0
minseg_970_0:4
min_1181_0:4
minseg_1182_0:2
min_1412_0:5
minseg_1413_0:4
min_1597_0:0
minseg_1598_0:5
max_507_0:0
max_974_0:2
max_1186_0:0
maxseg_1187_0:0
max_1417_0:0
maxseg_1418_0:4
max_1602_0:0
maxseg_1603_0:0
sll_516_0:0
sll_799_0:0
sllseg_800_0:0
sll_979_0:0
sllseg_980_0:0
sll_1191_0:1
sllseg_1192_0:0
sll_1422_0:1
sllseg_1423_0:0
maxseg_1429_0:0
maxseg_1198_0:0
min_1610_0:1
minseg_1611_0:0
maxseg_986_0:0
min_1434_0:0
minseg_1435_0:5
min_1615_0:0
minseg_1616_0:0
maxseg_806_0:0
min_1203_0:4
minseg_1204_0:1
min_1439_0:4
minseg_1440_0:0
min_1620_0:2
minseg_1621_0:1
len_519_0:4
len_808_0:2
lenseg_809_0:1
len_991_0:0
lenseg_992_0:2
len_1208_0:2
lenseg_1209_0:1
len_1444_0:0
lenseg_1445_0:0
min_522_0:0
min_996_0:4
minseg_997_0:4
min_1213_0:4
minseg_1214_0:1
min_1449_0:2
minseg_1450_0:4
min_1625_0:0
minseg_1626_0:2
max_525_0:4
max_1001_0:0
max_1218_0:7
maxseg_1219_0:1
max_1454_0:2
maxseg_1455_0:0
max_1630_0:3
maxseg_1631_0:4

BEG FIND
Level 1  intsize = 3
 * After optims it became = 48056 was 21747
 * After all optims it became = 36775
 finder  hits = 19006	 bstoreObjs=62694	 sstorePages=90
hitcount 	0	50479	5
hitcount 	1	9313	3
hitcount 	2	1219	2
hitcount 	3	1102	2
hitcount 	4	287	2
hitcount 	5	80	3
hitcount 	6	39	3
hitcount 	7	52	3
hitcount 	8	15	2
hitcount 	9	12	2
hitcount 	10	11	2
hitcount 	11	3	2
hitcount 	12	38	5
hitcount 	13	4	3
hitcount 	14	6	2
hitcount 	15	1	2
hitcount 	16	3	5
hitcount 	17	10	4
hitcount 	18	3	5
hitcount 	19	1	7
hitcount 	20	2	3
hitcount 	25	5	3
hitcount 	29	1	4
hitcount 	32	2	5
hitcount 	33	1	4
hitcount 	35	1	4
hitcount 	36	2	3
hitcount 	65	1	3
hitcount 	71	1	6
bucketsPerDepth 	7	16
bucketsPerDepth 	8	126
bucketsPerDepth 	9	274
bucketsPerDepth 	10	307
bucketsPerDepth 	11	177
bucketsPerDepth 	12	75
bucketsPerDepth 	13	27
bucketsPerDepth 	14	14
bucketsPerDepth 	15	6
bucketsPerDepth 	16	2
* TIME TO ADD INPUT :  0.177 ms 
f# %assign: 10 clauses: 692837 learn: 274 restart: 6 decision: 3826 propagated: 2732792
END FIND
!+ 10100010111000000100010000000111100000011001000000000001011010000010100001000010000011100100011000000000100011010000000010000100010101001
!+ H__0_395_175:1
H__4_395_176:1
H__1_395_176_165:0
H__1_395_176_168:5
H__18_391:3
H__6_395:0
H__0_391_179:0
H__0_391_180:0
H__1_391_182:1
H__1_391_184:2
H__1_391_186:0
H__1_391_187:0
H__8_391:7
H__1_391_191:1
H__1_391_193:0
H__18_392:6
H__0_392_179:0
H__0_392_180:1
H__1_392_182:0
H__1_392_184:0
H__1_392_186:0
H__1_392_187:2
H__8_392:3
H__1_392_191:1
H__1_392_193:0
H__18_393:5
H__0_393_179:0
H__0_393_180:0
H__1_393_182:1
H__1_393_184:4
H__1_393_186:0
H__1_393_187:4
H__8_393:3
H__1_393_191:2
H__1_393_193:4
H__0_397:1
H__1_398:0
H__0_396_175:0
H__4_396_176:0
H__1_396_176_165:4
H__1_396_176_168:0
H__18_394:3
H__6_396:1
H__0_394_179:0
H__0_394_180:0
H__1_394_182:0
H__1_394_184:2
H__1_394_186:0
H__1_394_187:1
H__8_394:2
H__1_394_191:5
H__1_394_193:4

BEG CHECK
 * After optims it became = 5487 was 21747
 TESTING HYPOTHESIS ITER 1
h = 691  hasserts.size()= 2
SLICE SIZE = 281
c# %assign: 16 clauses: 2613 learn: 38 restart: 1 decision: 873 propagated: 4670
 TESTING HYPOTHESIS ITER 1
h = 143  hasserts.size()= 1
SLICE SIZE = 89
c# %assign: 35 clauses: 786 learn: 31 restart: 1 decision: 607 propagated: 1319
 TESTING HYPOTHESIS ITER 1
h = 1004  hasserts.size()= 2
SLICE SIZE = 276
c# %assign: 16 clauses: 2842 learn: 0 restart: 0 decision: 0 propagated: 156
 FOUND CONST: 1004= 88 | 103  = 1
 reduced size from 5487 to 5478
 TESTING HYPOTHESIS ITER 2
h = 1061  hasserts.size()= 2
SLICE SIZE = 283
c# %assign: 16 clauses: 2857 learn: 0 restart: 0 decision: 0 propagated: 158
 FOUND CONST: 1061= [341]$(0), 1060, $ = 0
 reduced size from 5478 to 5477
 TESTING HYPOTHESIS ITER 3
h = 2812  hasserts.size()= 2
SLICE SIZE = 302
c# %assign: 15 clauses: 2724 learn: 37 restart: 1 decision: 835 propagated: 4693
 TESTING HYPOTHESIS ITER 3
h = 2694  hasserts.size()= 2
SLICE SIZE = 276
c# %assign: 17 clauses: 2401 learn: 46 restart: 1 decision: 966 propagated: 3083
Simulation found a cex by solver checking:  0.105 ms 
END CHECK
********  4	ftime= 999.718	ctime= 0.134

!% llocvars_22_2a_idx_0_0:0
llocvars_22_2a_idx_1_0:3
lintvars_23_2b_idx_0_0:2
lintvars_23_2b_idx_1_0:0
lnext_24_2c_idx_0_0:4
lnext_24_2c_idx_1_0:4
lnext_24_2c_idx_2_0:0
lsupernext_25_2d_idx_0_0:4
lsupernext_25_2d_idx_1_0:4
lsupernext_25_2d_idx_2_0:1
lkey_26_2e_idx_0_0:0
lkey_26_2e_idx_1_0:4
lkey_26_2e_idx_2_0:2
lsymbolic_27_2f_idx_0_0:0
lsymbolic_27_2f_idx_1_0:0
lsymbolic_27_2f_idx_2_0:0
lactive_28_30_idx_0_0:0
lactive_28_30_idx_1_0:0
lactive_28_30_idx_2_0:1
ret_value_29_31_0:0
new_symbolic_2a_32_idx_0_0:0
new_symbolic_2a_32_idx_1_0:0
new_symbolic_2a_32_idx_2_0:0
new_next_2b_33_idx_0_0:2
new_next_2b_33_idx_1_0:0
new_next_2b_33_idx_2_0:0
new_supernext_2c_34_idx_0_0:4
new_supernext_2c_34_idx_1_0:0
new_supernext_2c_34_idx_2_0:0
new_key_2d_35_idx_0_0:2
new_key_2d_35_idx_1_0:0
new_key_2d_35_idx_2_0:2
len_242_0:0
min_243_0:7
max_244_0:0
len_245_0:2
min_246_0:2
max_247_0:4
minseg_248_0:2
maxseg_249_0:2
len_250_0:2
min_251_0:2
max_252_0:2
minseg_253_0:0
maxseg_254_0:4
len_255_0:4
min_256_0:2
max_257_0:4
minseg_258_0:2
maxseg_259_0:4
min_678_0:0
minseg_679_0:4
min_821_0:7
minseg_822_0:0
min_1008_0:1
minseg_1009_0:0
min_1225_0:0
minseg_1226_0:7
len_603_0:0
lenseg_604_0:0
len_684_0:0
lenseg_685_0:0
len_827_0:0
lenseg_828_0:0
len_1014_0:6
lenseg_1015_0:0
sll_332_0:0
sllseg_690_0:1
sll_832_0:0
sllseg_833_0:1
sll_1019_0:1
sllseg_1020_0:0
sll_1230_0:1
sllseg_1231_0:0
maxseg_1237_0:0
maxseg_1026_0:2
min_1463_0:4
minseg_1464_0:2
maxseg_839_0:1
min_1242_0:2
minseg_1243_0:2
min_1468_0:0
minseg_1469_0:0
maxseg_696_0:2
min_1031_0:4
minseg_1032_0:4
min_1247_0:0
minseg_1248_0:1
min_1473_0:4
minseg_1474_0:2
len_335_0:2
lenseg_699_0:0
len_844_0:6
lenseg_845_0:0
len_1036_0:0
lenseg_1037_0:0
len_1252_0:0
lenseg_1253_0:4
min_338_0:2
minseg_850_0:0
min_1041_0:1
minseg_1042_0:6
min_1257_0:4
minseg_1258_0:6
min_1478_0:0
minseg_1479_0:0
max_341_0:4
max_1046_0:0
maxseg_1047_0:2
max_1262_0:2
maxseg_1263_0:2
max_1483_0:0
maxseg_1484_0:2
sll_350_0:0
sllseg_710_0:0
sll_859_0:0
sllseg_860_0:0
sll_1051_0:0
sllseg_1052_0:0
sll_1267_0:0
sllseg_1268_0:0
maxseg_1274_0:0
maxseg_1058_0:0
min_1491_0:2
minseg_1492_0:0
maxseg_866_0:0
min_1279_0:0
minseg_1280_0:0
min_1496_0:0
minseg_1497_0:3
maxseg_716_0:0
min_1063_0:1
minseg_1064_0:4
min_1284_0:6
minseg_1285_0:0
min_1501_0:0
minseg_1502_0:4
len_353_0:2
lenseg_719_0:0
len_871_0:0
lenseg_872_0:1
len_1068_0:0
lenseg_1069_0:5
len_1289_0:3
lenseg_1290_0:4
min_356_0:0
minseg_877_0:2
min_1073_0:0
minseg_1074_0:1
min_1294_0:2
minseg_1295_0:5
min_1506_0:0
minseg_1507_0:1
max_359_0:1
max_1078_0:2
maxseg_1079_0:0
max_1299_0:0
maxseg_1300_0:0
max_1511_0:0
maxseg_1512_0:4
sll_397_0:0
sll_729_0:0
sllseg_730_0:0
sll_886_0:0
sllseg_887_0:0
sll_1083_0:0
sllseg_1084_0:0
sll_1304_0:0
sllseg_1305_0:0
maxseg_1311_0:0
maxseg_1090_0:1
min_1519_0:4
minseg_1520_0:2
maxseg_893_0:4
min_1316_0:4
minseg_1317_0:0
min_1524_0:0
minseg_1525_0:0
maxseg_736_0:0
min_1095_0:7
minseg_1096_0:2
min_1321_0:4
minseg_1322_0:4
min_1529_0:1
minseg_1530_0:0
len_400_0:0
len_738_0:4
lenseg_739_0:2
len_898_0:0
lenseg_899_0:1
len_1100_0:2
lenseg_1101_0:0
len_1326_0:0
lenseg_1327_0:4
min_403_0:0
min_903_0:6
minseg_904_0:1
min_1105_0:3
minseg_1106_0:6
min_1331_0:2
minseg_1332_0:1
min_1534_0:2
minseg_1535_0:4
max_406_0:0
max_908_0:2
max_1110_0:0
maxseg_1111_0:1
max_1336_0:0
maxseg_1337_0:2
max_1539_0:0
maxseg_1540_0:6
sll_444_0:0
sllseg_750_0:0
sll_913_0:1
sllseg_914_0:1
sll_1115_0:0
sllseg_1116_0:0
sll_1341_0:1
sllseg_1342_0:0
maxseg_1348_0:0
maxseg_1122_0:0
min_1547_0:1
minseg_1548_0:0
maxseg_920_0:0
min_1353_0:6
minseg_1354_0:0
min_1552_0:4
minseg_1553_0:6
maxseg_756_0:4
min_1127_0:4
minseg_1128_0:2
min_1358_0:2
minseg_1359_0:1
min_1557_0:2
minseg_1558_0:1
len_447_0:0
lenseg_759_0:0
len_925_0:0
lenseg_926_0:2
len_1132_0:1
lenseg_1133_0:3
len_1363_0:0
lenseg_1364_0:2
min_450_0:0
minseg_931_0:4
min_1137_0:2
minseg_1138_0:3
min_1368_0:0
minseg_1369_0:1
min_1562_0:0
minseg_1563_0:0
max_453_0:1
max_1142_0:0
maxseg_1143_0:0
max_1373_0:1
maxseg_1374_0:1
max_1567_0:0
maxseg_1568_0:2
len_648_0:4
lenseg_649_0:0
len_769_0:2
lenseg_770_0:2
len_940_0:1
lenseg_941_0:0
len_1147_0:1
lenseg_1148_0:0
min_946_0:0
minseg_947_0:1
min_1153_0:2
minseg_1154_0:2
min_1379_0:1
minseg_1380_0:2
min_1573_0:2
minseg_1574_0:0
sll_498_0:1
sll_779_0:0
sllseg_780_0:1
sll_952_0:0
sllseg_953_0:0
sll_1159_0:0
sllseg_1160_0:1
sll_1385_0:0
sllseg_1386_0:1
maxseg_1392_0:0
maxseg_1166_0:0
min_1582_0:2
minseg_1583_0:2
maxseg_959_0:1
min_1397_0:0
minseg_1398_0:4
min_1587_0:0
minseg_1588_0:0
maxseg_786_0:4
min_1171_0:2
minseg_1172_0:1
min_1402_0:1
minseg_1403_0:2
min_1592_0:2
minseg_1593_0:0
len_501_0:0
len_788_0:4
lenseg_789_0:0
len_964_0:0
lenseg_965_0:1
len_1176_0:2
lenseg_1177_0:3
len_1407_0:0
lenseg_1408_0:0
min_504_0:2
min_969_0:0
minseg_970_0:3
min_1181_0:0
minseg_1182_0:3
min_1412_0:2
minseg_1413_0:1
min_1597_0:0
minseg_1598_0:6
max_507_0:1
max_974_0:1
max_1186_0:4
maxseg_1187_0:4
max_1417_0:3
maxseg_1418_0:2
max_1602_0:0
maxseg_1603_0:0
sll_516_0:0
sll_799_0:0
sllseg_800_0:1
sll_979_0:1
sllseg_980_0:0
sll_1191_0:1
sllseg_1192_0:1
sll_1422_0:0
sllseg_1423_0:1
maxseg_1429_0:0
maxseg_1198_0:1
min_1610_0:5
minseg_1611_0:1
maxseg_986_0:0
min_1434_0:4
minseg_1435_0:1
min_1615_0:6
minseg_1616_0:2
maxseg_806_0:0
min_1203_0:0
minseg_1204_0:5
min_1439_0:0
minseg_1440_0:0
min_1620_0:6
minseg_1621_0:5
len_519_0:1
len_808_0:2
lenseg_809_0:0
len_991_0:2
lenseg_992_0:0
len_1208_0:1
lenseg_1209_0:5
len_1444_0:2
lenseg_1445_0:0
min_522_0:0
min_996_0:0
minseg_997_0:0
min_1213_0:0
minseg_1214_0:3
min_1449_0:0
minseg_1450_0:0
min_1625_0:0
minseg_1626_0:1
max_525_0:2
max_1001_0:0
max_1218_0:6
maxseg_1219_0:2
max_1454_0:0
maxseg_1455_0:4
max_1630_0:0
maxseg_1631_0:1

BEG FIND
Level 1  intsize = 3
 * After optims it became = 36554 was 21747
 * After all optims it became = 21260
 finder  hits = 22362	 bstoreObjs=98169	 sstorePages=151
hitcount 	0	83168	6
hitcount 	1	11876	4
hitcount 	2	1290	2
hitcount 	3	1135	3
hitcount 	4	391	2
hitcount 	5	82	3
hitcount 	6	41	3
hitcount 	7	58	4
hitcount 	8	16	2
hitcount 	9	10	3
hitcount 	10	10	2
hitcount 	11	2	3
hitcount 	12	42	5
hitcount 	13	6	2
hitcount 	14	7	2
hitcount 	15	2	2
hitcount 	16	3	5
hitcount 	17	10	4
hitcount 	18	3	5
hitcount 	19	1	7
hitcount 	20	2	3
hitcount 	25	5	3
hitcount 	29	1	4
hitcount 	32	2	5
hitcount 	33	1	4
hitcount 	35	1	4
hitcount 	36	2	3
hitcount 	65	1	3
hitcount 	71	1	6
bucketsPerDepth 	8	2
bucketsPerDepth 	9	50
bucketsPerDepth 	10	197
bucketsPerDepth 	11	298
bucketsPerDepth 	12	241
bucketsPerDepth 	13	123
bucketsPerDepth 	14	68
bucketsPerDepth 	15	32
bucketsPerDepth 	16	9
bucketsPerDepth 	17	3
bucketsPerDepth 	18	1
* TIME TO ADD INPUT :  0.139 ms 
f# %assign: 8 clauses: 866451 learn: 301 restart: 7 decision: 4058 propagated: 3416702
END FIND
!+ 00010001011010000100001000100111100000111001001000000001011001000011100001000010000101100100000000010110000111010000000001000100010100001
!+ H__0_395_175:0
H__4_395_176:0
H__1_395_176_165:1
H__1_395_176_168:2
H__18_391:3
H__6_395:1
H__0_391_179:0
H__0_391_180:0
H__1_391_182:1
H__1_391_184:4
H__1_391_186:0
H__1_391_187:1
H__8_391:7
H__1_391_191:1
H__1_391_193:0
H__18_392:7
H__0_392_179:0
H__0_392_180:1
H__1_392_182:2
H__1_392_184:0
H__1_392_186:0
H__1_392_187:2
H__8_392:3
H__1_392_191:2
H__1_392_193:0
H__18_393:7
H__0_393_179:0
H__0_393_180:0
H__1_393_182:1
H__1_393_184:4
H__1_393_186:0
H__1_393_187:2
H__8_393:3
H__1_393_191:2
H__1_393_193:0
H__0_397:0
H__1_398:0
H__0_396_175:1
H__4_396_176:1
H__1_396_176_165:1
H__1_396_176_168:4
H__18_394:3
H__6_396:1
H__0_394_179:0
H__0_394_180:0
H__1_394_182:0
H__1_394_184:4
H__1_394_186:0
H__1_394_187:1
H__8_394:2
H__1_394_191:1
H__1_394_193:4

BEG CHECK
 * After optims it became = 6569 was 21747
 TESTING HYPOTHESIS ITER 1
h = 2795  hasserts.size()= 2
SLICE SIZE = 277
c# %assign: 16 clauses: 2446 learn: 29 restart: 1 decision: 813 propagated: 2312
 TESTING HYPOTHESIS ITER 1
h = 1807  hasserts.size()= 2
SLICE SIZE = 282
c# %assign: 15 clauses: 2742 learn: 58 restart: 1 decision: 1140 propagated: 6725
Simulation found a cex by solver checking:  0.035 ms 
END CHECK
********  5	ftime= 0.33	ctime= 0.063

!% llocvars_22_2a_idx_0_0:3
llocvars_22_2a_idx_1_0:1
lintvars_23_2b_idx_0_0:0
lintvars_23_2b_idx_1_0:2
lnext_24_2c_idx_0_0:4
lnext_24_2c_idx_1_0:3
lnext_24_2c_idx_2_0:1
lsupernext_25_2d_idx_0_0:2
lsupernext_25_2d_idx_1_0:1
lsupernext_25_2d_idx_2_0:6
lkey_26_2e_idx_0_0:0
lkey_26_2e_idx_1_0:0
lkey_26_2e_idx_2_0:0
lsymbolic_27_2f_idx_0_0:1
lsymbolic_27_2f_idx_1_0:0
lsymbolic_27_2f_idx_2_0:0
lactive_28_30_idx_0_0:1
lactive_28_30_idx_1_0:0
lactive_28_30_idx_2_0:0
ret_value_29_31_0:2
new_symbolic_2a_32_idx_0_0:0
new_symbolic_2a_32_idx_1_0:0
new_symbolic_2a_32_idx_2_0:0
new_next_2b_33_idx_0_0:0
new_next_2b_33_idx_1_0:0
new_next_2b_33_idx_2_0:0
new_supernext_2c_34_idx_0_0:4
new_supernext_2c_34_idx_1_0:2
new_supernext_2c_34_idx_2_0:0
new_key_2d_35_idx_0_0:6
new_key_2d_35_idx_1_0:5
new_key_2d_35_idx_2_0:0
len_242_0:0
min_243_0:7
max_244_0:0
len_245_0:3
min_246_0:2
max_247_0:2
minseg_248_0:0
maxseg_249_0:0
len_250_0:4
min_251_0:2
max_252_0:4
minseg_253_0:2
maxseg_254_0:2
len_255_0:1
min_256_0:1
max_257_0:2
minseg_258_0:2
maxseg_259_0:4
min_678_0:6
minseg_679_0:2
min_821_0:6
minseg_822_0:2
min_1008_0:3
minseg_1009_0:2
min_1225_0:0
minseg_1226_0:0
len_603_0:4
lenseg_604_0:0
len_684_0:0
lenseg_685_0:2
len_827_0:0
lenseg_828_0:2
len_1014_0:0
lenseg_1015_0:1
sll_332_0:0
sllseg_690_0:1
sll_832_0:0
sllseg_833_0:0
sll_1019_0:0
sllseg_1020_0:0
sll_1230_0:0
sllseg_1231_0:0
maxseg_1237_0:0
maxseg_1026_0:7
min_1463_0:0
minseg_1464_0:0
maxseg_839_0:0
min_1242_0:1
minseg_1243_0:4
min_1468_0:3
minseg_1469_0:1
maxseg_696_0:4
min_1031_0:0
minseg_1032_0:1
min_1247_0:1
minseg_1248_0:2
min_1473_0:1
minseg_1474_0:4
len_335_0:2
lenseg_699_0:2
len_844_0:6
lenseg_845_0:2
len_1036_0:5
lenseg_1037_0:0
len_1252_0:0
lenseg_1253_0:3
min_338_0:4
minseg_850_0:5
min_1041_0:7
minseg_1042_0:0
min_1257_0:1
minseg_1258_0:1
min_1478_0:0
minseg_1479_0:0
max_341_0:0
max_1046_0:4
maxseg_1047_0:1
max_1262_0:4
maxseg_1263_0:6
max_1483_0:0
maxseg_1484_0:0
sll_350_0:1
sllseg_710_0:0
sll_859_0:1
sllseg_860_0:0
sll_1051_0:0
sllseg_1052_0:0
sll_1267_0:0
sllseg_1268_0:1
maxseg_1274_0:0
maxseg_1058_0:0
min_1491_0:1
minseg_1492_0:1
maxseg_866_0:4
min_1279_0:0
minseg_1280_0:4
min_1496_0:4
minseg_1497_0:0
maxseg_716_0:0
min_1063_0:0
minseg_1064_0:0
min_1284_0:2
minseg_1285_0:6
min_1501_0:0
minseg_1502_0:0
len_353_0:3
lenseg_719_0:7
len_871_0:4
lenseg_872_0:0
len_1068_0:2
lenseg_1069_0:0
len_1289_0:0
lenseg_1290_0:1
min_356_0:2
minseg_877_0:1
min_1073_0:0
minseg_1074_0:1
min_1294_0:6
minseg_1295_0:0
min_1506_0:0
minseg_1507_0:2
max_359_0:0
max_1078_0:3
maxseg_1079_0:0
max_1299_0:0
maxseg_1300_0:4
max_1511_0:0
maxseg_1512_0:0
sll_397_0:0
sll_729_0:0
sllseg_730_0:0
sll_886_0:1
sllseg_887_0:0
sll_1083_0:0
sllseg_1084_0:0
sll_1304_0:0
sllseg_1305_0:0
maxseg_1311_0:1
maxseg_1090_0:0
min_1519_0:4
minseg_1520_0:2
maxseg_893_0:2
min_1316_0:4
minseg_1317_0:0
min_1524_0:3
minseg_1525_0:4
maxseg_736_0:0
min_1095_0:4
minseg_1096_0:1
min_1321_0:2
minseg_1322_0:0
min_1529_0:1
minseg_1530_0:0
len_400_0:4
len_738_0:2
lenseg_739_0:0
len_898_0:7
lenseg_899_0:0
len_1100_0:0
lenseg_1101_0:3
len_1326_0:0
lenseg_1327_0:1
min_403_0:0
min_903_0:0
minseg_904_0:0
min_1105_0:0
minseg_1106_0:0
min_1331_0:2
minseg_1332_0:1
min_1534_0:0
minseg_1535_0:2
max_406_0:3
max_908_0:4
max_1110_0:0
maxseg_1111_0:1
max_1336_0:2
maxseg_1337_0:0
max_1539_0:0
maxseg_1540_0:0
sll_444_0:1
sllseg_750_0:0
sll_913_0:0
sllseg_914_0:1
sll_1115_0:0
sllseg_1116_0:0
sll_1341_0:0
sllseg_1342_0:1
maxseg_1348_0:2
maxseg_1122_0:0
min_1547_0:4
minseg_1548_0:3
maxseg_920_0:4
min_1353_0:0
minseg_1354_0:4
min_1552_0:4
minseg_1553_0:6
maxseg_756_0:0
min_1127_0:0
minseg_1128_0:4
min_1358_0:0
minseg_1359_0:0
min_1557_0:0
minseg_1558_0:4
len_447_0:4
lenseg_759_0:2
len_925_0:0
lenseg_926_0:2
len_1132_0:0
lenseg_1133_0:4
len_1363_0:2
lenseg_1364_0:4
min_450_0:4
minseg_931_0:3
min_1137_0:1
minseg_1138_0:3
min_1368_0:4
minseg_1369_0:4
min_1562_0:3
minseg_1563_0:0
max_453_0:0
max_1142_0:0
maxseg_1143_0:1
max_1373_0:5
maxseg_1374_0:0
max_1567_0:0
maxseg_1568_0:0
len_648_0:4
lenseg_649_0:4
len_769_0:1
lenseg_770_0:0
len_940_0:2
lenseg_941_0:7
len_1147_0:3
lenseg_1148_0:5
min_946_0:0
minseg_947_0:0
min_1153_0:0
minseg_1154_0:2
min_1379_0:2
minseg_1380_0:2
min_1573_0:0
minseg_1574_0:1
sll_498_0:1
sll_779_0:0
sllseg_780_0:0
sll_952_0:0
sllseg_953_0:0
sll_1159_0:0
sllseg_1160_0:0
sll_1385_0:0
sllseg_1386_0:1
maxseg_1392_0:0
maxseg_1166_0:1
min_1582_0:0
minseg_1583_0:0
maxseg_959_0:0
min_1397_0:7
minseg_1398_0:2
min_1587_0:2
minseg_1588_0:0
maxseg_786_0:0
min_1171_0:0
minseg_1172_0:4
min_1402_0:0
minseg_1403_0:1
min_1592_0:0
minseg_1593_0:0
len_501_0:2
len_788_0:0
lenseg_789_0:1
len_964_0:0
lenseg_965_0:3
len_1176_0:0
lenseg_1177_0:0
len_1407_0:0
lenseg_1408_0:4
min_504_0:2
min_969_0:2
minseg_970_0:0
min_1181_0:0
minseg_1182_0:3
min_1412_0:6
minseg_1413_0:0
min_1597_0:0
minseg_1598_0:4
max_507_0:1
max_974_0:0
max_1186_0:0
maxseg_1187_0:4
max_1417_0:1
maxseg_1418_0:4
max_1602_0:4
maxseg_1603_0:0
sll_516_0:0
sll_799_0:0
sllseg_800_0:0
sll_979_0:0
sllseg_980_0:0
sll_1191_0:0
sllseg_1192_0:0
sll_1422_0:0
sllseg_1423_0:0
maxseg_1429_0:3
maxseg_1198_0:4
min_1610_0:3
minseg_1611_0:6
maxseg_986_0:1
min_1434_0:1
minseg_1435_0:4
min_1615_0:2
minseg_1616_0:4
maxseg_806_0:0
min_1203_0:0
minseg_1204_0:2
min_1439_0:1
minseg_1440_0:0
min_1620_0:0
minseg_1621_0:0
len_519_0:2
len_808_0:0
lenseg_809_0:4
len_991_0:0
lenseg_992_0:1
len_1208_0:6
lenseg_1209_0:2
len_1444_0:0
lenseg_1445_0:2
min_522_0:4
min_996_0:6
minseg_997_0:6
min_1213_0:1
minseg_1214_0:5
min_1449_0:0
minseg_1450_0:0
min_1625_0:0
minseg_1626_0:4
max_525_0:4
max_1001_0:0
max_1218_0:0
maxseg_1219_0:1
max_1454_0:1
maxseg_1455_0:0
max_1630_0:0
maxseg_1631_0:4

BEG FIND
Level 1  intsize = 3
 * After optims it became = 44311 was 21747
 * After all optims it became = 30611
 finder  hits = 25851	 bstoreObjs=17616	 sstorePages=25
hitcount 	1	14181	2
hitcount 	2	1392	2
hitcount 	3	1260	2
hitcount 	4	323	2
hitcount 	5	201	2
hitcount 	6	44	2
hitcount 	7	76	2
hitcount 	8	23	2
hitcount 	9	9	2
hitcount 	10	9	2
hitcount 	11	6	2
hitcount 	12	38	2
hitcount 	13	4	2
hitcount 	14	9	2
hitcount 	15	2	3
hitcount 	16	5	3
hitcount 	17	12	2
hitcount 	18	4	2
hitcount 	19	2	3
hitcount 	20	2	2
hitcount 	25	5	2
hitcount 	29	1	3
hitcount 	32	2	2
hitcount 	33	1	3
hitcount 	35	1	4
hitcount 	36	2	2
hitcount 	65	1	3
hitcount 	71	1	2
bucketsPerDepth 	2	9
bucketsPerDepth 	3	351
bucketsPerDepth 	4	662
bucketsPerDepth 	5	2
* TIME TO ADD INPUT :  0.222 ms 
f# %assign: 8 clauses: 1196690 learn: 325 restart: 8 decision: 4268 propagated: 4055882
END FIND
!+ 10000000011010000100010000100111100000111001001000000010011001000010000000000010000101100010010000010110000011010000000100000100010110001
!+ H__0_395_175:1
H__4_395_176:0
H__1_395_176_165:0
H__1_395_176_168:0
H__18_391:3
H__6_395:1
H__0_391_179:0
H__0_391_180:0
H__1_391_182:1
H__1_391_184:2
H__1_391_186:0
H__1_391_187:1
H__8_391:7
H__1_391_191:1
H__1_391_193:0
H__18_392:7
H__0_392_179:0
H__0_392_180:1
H__1_392_182:2
H__1_392_184:0
H__1_392_186:0
H__1_392_187:1
H__8_392:3
H__1_392_191:2
H__1_392_193:0
H__18_393:1
H__0_393_179:0
H__0_393_180:0
H__1_393_182:0
H__1_393_184:4
H__1_393_186:0
H__1_393_187:2
H__8_393:3
H__1_393_191:4
H__1_393_193:4
H__0_397:0
H__1_398:0
H__0_396_175:1
H__4_396_176:1
H__1_396_176_165:1
H__1_396_176_168:0
H__18_394:3
H__6_396:1
H__0_394_179:0
H__0_394_180:0
H__1_394_182:0
H__1_394_184:1
H__1_394_186:0
H__1_394_187:1
H__8_394:2
H__1_394_191:3
H__1_394_193:4

BEG CHECK
 * After optims it became = 4287 was 21747
 TESTING HYPOTHESIS ITER 1
h = 1363  hasserts.size()= 2
SLICE SIZE = 293
c# %assign: 19 clauses: 2434 learn: 31 restart: 1 decision: 746 propagated: 3783
 TESTING HYPOTHESIS ITER 1
h = 1284  hasserts.size()= 2
SLICE SIZE = 276
c# %assign: 16 clauses: 2842 learn: 0 restart: 0 decision: 0 propagated: 156
 FOUND CONST: 1284= 88 | 103  = 1
 reduced size from 4287 to 3879
 TESTING HYPOTHESIS ITER 2
h = 161  hasserts.size()= 1
SLICE SIZE = 100
c# %assign: 29 clauses: 1444 learn: 44 restart: 1 decision: 915 propagated: 3047
 TESTING HYPOTHESIS ITER 2
h = 86  hasserts.size()= 1
SLICE SIZE = 89
c# %assign: 32 clauses: 1185 learn: 0 restart: 0 decision: 0 propagated: 146
 FOUND CONST: 86= llocvars_22_2a_idx_1_0 < (0)  = 0
 reduced size from 3879 to 3866
 TESTING HYPOTHESIS ITER 3
h = 351  hasserts.size()= 2
SLICE SIZE = 287
c# %assign: 20 clauses: 2518 learn: 58 restart: 1 decision: 1107 propagated: 5463
 TESTING HYPOTHESIS ITER 3
h = 1080  hasserts.size()= 2
SLICE SIZE = 267
c# %assign: 16 clauses: 2842 learn: 0 restart: 0 decision: 0 propagated: 156
 FOUND CONST: 1080= 87 | (!93)  = 1
 reduced size from 3866 to 3845
 TESTING HYPOTHESIS ITER 4
h = 1243  hasserts.size()= 2
SLICE SIZE = 271
c# %assign: 20 clauses: 2418 learn: 44 restart: 1 decision: 621 propagated: 4489
Simulation found a cex by solver checking:  0.132 ms 
END CHECK
********  6	ftime= 999.411	ctime= 0.159

!% llocvars_22_2a_idx_0_0:0
llocvars_22_2a_idx_1_0:3
lintvars_23_2b_idx_0_0:0
lintvars_23_2b_idx_1_0:2
lnext_24_2c_idx_0_0:4
lnext_24_2c_idx_1_0:2
lnext_24_2c_idx_2_0:1
lsupernext_25_2d_idx_0_0:4
lsupernext_25_2d_idx_1_0:2
lsupernext_25_2d_idx_2_0:4
lkey_26_2e_idx_0_0:2
lkey_26_2e_idx_1_0:0
lkey_26_2e_idx_2_0:4
lsymbolic_27_2f_idx_0_0:1
lsymbolic_27_2f_idx_1_0:0
lsymbolic_27_2f_idx_2_0:0
lactive_28_30_idx_0_0:1
lactive_28_30_idx_1_0:0
lactive_28_30_idx_2_0:1
ret_value_29_31_0:7
new_symbolic_2a_32_idx_0_0:0
new_symbolic_2a_32_idx_1_0:0
new_symbolic_2a_32_idx_2_0:0
new_next_2b_33_idx_0_0:4
new_next_2b_33_idx_1_0:4
new_next_2b_33_idx_2_0:0
new_supernext_2c_34_idx_0_0:3
new_supernext_2c_34_idx_1_0:4
new_supernext_2c_34_idx_2_0:0
new_key_2d_35_idx_0_0:0
new_key_2d_35_idx_1_0:0
new_key_2d_35_idx_2_0:0
len_242_0:0
min_243_0:7
max_244_0:0
len_245_0:2
min_246_0:4
max_247_0:4
minseg_248_0:0
maxseg_249_0:0
len_250_0:4
min_251_0:0
max_252_0:4
minseg_253_0:2
maxseg_254_0:4
len_255_0:3
min_256_0:0
max_257_0:2
minseg_258_0:1
maxseg_259_0:1
min_678_0:0
minseg_679_0:3
min_821_0:2
minseg_822_0:1
min_1008_0:0
minseg_1009_0:6
min_1225_0:4
minseg_1226_0:1
len_603_0:0
lenseg_604_0:3
len_684_0:2
lenseg_685_0:2
len_827_0:1
lenseg_828_0:4
len_1014_0:0
lenseg_1015_0:0
sll_332_0:1
sllseg_690_0:0
sll_832_0:0
sllseg_833_0:1
sll_1019_0:0
sllseg_1020_0:0
sll_1230_0:0
sllseg_1231_0:0
maxseg_1237_0:2
maxseg_1026_0:0
min_1463_0:4
minseg_1464_0:7
maxseg_839_0:2
min_1242_0:6
minseg_1243_0:4
min_1468_0:4
minseg_1469_0:4
maxseg_696_0:1
min_1031_0:0
minseg_1032_0:0
min_1247_0:6
minseg_1248_0:2
min_1473_0:0
minseg_1474_0:0
len_335_0:0
lenseg_699_0:4
len_844_0:0
lenseg_845_0:0
len_1036_0:0
lenseg_1037_0:3
len_1252_0:1
lenseg_1253_0:1
min_338_0:2
minseg_850_0:4
min_1041_0:1
minseg_1042_0:6
min_1257_0:0
minseg_1258_0:0
min_1478_0:0
minseg_1479_0:0
max_341_0:1
max_1046_0:0
maxseg_1047_0:2
max_1262_0:5
maxseg_1263_0:0
max_1483_0:3
maxseg_1484_0:4
sll_350_0:0
sllseg_710_0:0
sll_859_0:0
sllseg_860_0:1
sll_1051_0:1
sllseg_1052_0:0
sll_1267_0:0
sllseg_1268_0:0
maxseg_1274_0:1
maxseg_1058_0:2
min_1491_0:4
minseg_1492_0:0
maxseg_866_0:0
min_1279_0:1
minseg_1280_0:1
min_1496_0:0
minseg_1497_0:1
maxseg_716_0:1
min_1063_0:0
minseg_1064_0:0
min_1284_0:0
minseg_1285_0:4
min_1501_0:4
minseg_1502_0:0
len_353_0:4
lenseg_719_0:0
len_871_0:0
lenseg_872_0:0
len_1068_0:1
lenseg_1069_0:0
len_1289_0:1
lenseg_1290_0:0
min_356_0:2
minseg_877_0:0
min_1073_0:0
minseg_1074_0:6
min_1294_0:0
minseg_1295_0:0
min_1506_0:2
minseg_1507_0:0
max_359_0:0
max_1078_0:4
maxseg_1079_0:0
max_1299_0:0
maxseg_1300_0:0
max_1511_0:2
maxseg_1512_0:0
sll_397_0:0
sll_729_0:0
sllseg_730_0:0
sll_886_0:0
sllseg_887_0:0
sll_1083_0:0
sllseg_1084_0:0
sll_1304_0:0
sllseg_1305_0:0
maxseg_1311_0:0
maxseg_1090_0:0
min_1519_0:2
minseg_1520_0:2
maxseg_893_0:4
min_1316_0:5
minseg_1317_0:1
min_1524_0:6
minseg_1525_0:0
maxseg_736_0:4
min_1095_0:0
minseg_1096_0:4
min_1321_0:2
minseg_1322_0:1
min_1529_0:0
minseg_1530_0:2
len_400_0:2
len_738_0:1
lenseg_739_0:7
len_898_0:0
lenseg_899_0:0
len_1100_0:2
lenseg_1101_0:0
len_1326_0:0
lenseg_1327_0:1
min_403_0:1
min_903_0:2
minseg_904_0:3
min_1105_0:2
minseg_1106_0:2
min_1331_0:0
minseg_1332_0:1
min_1534_0:2
minseg_1535_0:0
max_406_0:2
max_908_0:6
max_1110_0:5
maxseg_1111_0:4
max_1336_0:5
maxseg_1337_0:4
max_1539_0:6
maxseg_1540_0:2
sll_444_0:1
sllseg_750_0:0
sll_913_0:0
sllseg_914_0:0
sll_1115_0:0
sllseg_1116_0:0
sll_1341_0:0
sllseg_1342_0:0
maxseg_1348_0:0
maxseg_1122_0:0
min_1547_0:0
minseg_1548_0:5
maxseg_920_0:0
min_1353_0:0
minseg_1354_0:4
min_1552_0:6
minseg_1553_0:0
maxseg_756_0:0
min_1127_0:3
minseg_1128_0:0
min_1358_0:1
minseg_1359_0:3
min_1557_0:1
minseg_1558_0:0
len_447_0:6
lenseg_759_0:4
len_925_0:0
lenseg_926_0:1
len_1132_0:1
lenseg_1133_0:0
len_1363_0:0
lenseg_1364_0:0
min_450_0:4
minseg_931_0:1
min_1137_0:0
minseg_1138_0:6
min_1368_0:0
minseg_1369_0:5
min_1562_0:0
minseg_1563_0:6
max_453_0:0
max_1142_0:4
maxseg_1143_0:0
max_1373_0:4
maxseg_1374_0:0
max_1567_0:0
maxseg_1568_0:4
len_648_0:0
lenseg_649_0:0
len_769_0:1
lenseg_770_0:1
len_940_0:0
lenseg_941_0:2
len_1147_0:0
lenseg_1148_0:2
min_946_0:1
minseg_947_0:4
min_1153_0:2
minseg_1154_0:0
min_1379_0:1
minseg_1380_0:4
min_1573_0:3
minseg_1574_0:2
sll_498_0:0
sll_779_0:0
sllseg_780_0:1
sll_952_0:0
sllseg_953_0:1
sll_1159_0:1
sllseg_1160_0:0
sll_1385_0:1
sllseg_1386_0:0
maxseg_1392_0:0
maxseg_1166_0:0
min_1582_0:0
minseg_1583_0:4
maxseg_959_0:0
min_1397_0:0
minseg_1398_0:0
min_1587_0:4
minseg_1588_0:4
maxseg_786_0:0
min_1171_0:6
minseg_1172_0:0
min_1402_0:1
minseg_1403_0:2
min_1592_0:1
minseg_1593_0:4
len_501_0:1
len_788_0:4
lenseg_789_0:0
len_964_0:5
lenseg_965_0:6
len_1176_0:0
lenseg_1177_0:4
len_1407_0:4
lenseg_1408_0:1
min_504_0:0
min_969_0:0
minseg_970_0:1
min_1181_0:1
minseg_1182_0:4
min_1412_0:4
minseg_1413_0:2
min_1597_0:0
minseg_1598_0:4
max_507_0:2
max_974_0:4
max_1186_0:2
maxseg_1187_0:2
max_1417_0:7
maxseg_1418_0:0
max_1602_0:0
maxseg_1603_0:0
sll_516_0:1
sll_799_0:0
sllseg_800_0:0
sll_979_0:0
sllseg_980_0:0
sll_1191_0:0
sllseg_1192_0:0
sll_1422_0:0
sllseg_1423_0:0
maxseg_1429_0:7
maxseg_1198_0:1
min_1610_0:1
minseg_1611_0:0
maxseg_986_0:2
min_1434_0:1
minseg_1435_0:0
min_1615_0:0
minseg_1616_0:0
maxseg_806_0:5
min_1203_0:4
minseg_1204_0:0
min_1439_0:1
minseg_1440_0:0
min_1620_0:0
minseg_1621_0:0
len_519_0:2
len_808_0:4
lenseg_809_0:2
len_991_0:7
lenseg_992_0:1
len_1208_0:0
lenseg_1209_0:1
len_1444_0:0
lenseg_1445_0:1
min_522_0:4
min_996_0:4
minseg_997_0:0
min_1213_0:0
minseg_1214_0:0
min_1449_0:0
minseg_1450_0:3
min_1625_0:6
minseg_1626_0:0
max_525_0:0
max_1001_0:0
max_1218_0:0
maxseg_1219_0:0
max_1454_0:0
maxseg_1455_0:2
max_1630_0:0
maxseg_1631_0:0

BEG FIND
Level 1  intsize = 3
 * After optims it became = 47428 was 21747
 * After all optims it became = 35252
 finder  hits = 31151	 bstoreObjs=82744	 sstorePages=136
hitcount 	0	61924	6
hitcount 	1	16730	3
hitcount 	2	1623	2
hitcount 	3	1450	2
hitcount 	4	367	2
hitcount 	5	202	3
hitcount 	6	121	2
hitcount 	7	78	2
hitcount 	8	111	5
hitcount 	9	9	2
hitcount 	10	23	3
hitcount 	11	4	3
hitcount 	12	40	2
hitcount 	13	7	2
hitcount 	14	6	1
hitcount 	15	3	3
hitcount 	16	7	3
hitcount 	17	10	2
hitcount 	18	4	2
hitcount 	19	2	3
hitcount 	20	4	2
hitcount 	23	1	3
hitcount 	25	5	2
hitcount 	29	3	3
hitcount 	32	2	2
hitcount 	33	1	3
hitcount 	35	1	4
hitcount 	36	2	2
hitcount 	38	1	4
hitcount 	47	1	4
hitcount 	65	1	3
hitcount 	71	1	2
bucketsPerDepth 	8	82
bucketsPerDepth 	9	284
bucketsPerDepth 	10	325
bucketsPerDepth 	11	190
bucketsPerDepth 	12	92
bucketsPerDepth 	13	37
bucketsPerDepth 	14	12
bucketsPerDepth 	15	1
bucketsPerDepth 	17	1
* TIME TO ADD INPUT :  0.182 ms 
f# %assign: 13 clauses: 1495834 learn: 375 restart: 9 decision: 4710 propagated: 5338781
END FIND
!+ 10000000001110010100010010001010010000110001001000000010011100000000000101000010000011100010010010000000001011000010010100000100110110001
!+ H__0_395_175:1
H__4_395_176:0
H__1_395_176_165:0
H__1_395_176_168:0
H__18_391:6
H__6_395:1
H__0_391_179:0
H__0_391_180:1
H__1_391_182:1
H__1_391_184:2
H__1_391_186:2
H__1_391_187:4
H__8_391:2
H__1_391_191:2
H__1_391_193:0
H__18_392:3
H__0_392_179:0
H__0_392_180:1
H__1_392_182:2
H__1_392_184:0
H__1_392_186:0
H__1_392_187:1
H__8_392:7
H__1_392_191:0
H__1_392_193:0
H__18_393:0
H__0_393_179:0
H__0_393_180:1
H__1_393_182:1
H__1_393_184:4
H__1_393_186:0
H__1_393_187:4
H__8_393:3
H__1_393_191:4
H__1_393_193:4
H__0_397:0
H__1_398:1
H__0_396_175:0
H__4_396_176:0
H__1_396_176_165:0
H__1_396_176_168:2
H__18_394:3
H__6_396:0
H__0_394_179:0
H__0_394_180:1
H__1_394_182:2
H__1_394_184:1
H__1_394_186:0
H__1_394_187:1
H__8_394:3
H__1_394_191:3
H__1_394_193:4

BEG CHECK
 * After optims it became = 5621 was 21747
 TESTING HYPOTHESIS ITER 1
h = 3203  hasserts.size()= 2
SLICE SIZE = 300
c# %assign: 26 clauses: 2596 learn: 46 restart: 1 decision: 1062 propagated: 6339
 TESTING HYPOTHESIS ITER 1
h = 1188  hasserts.size()= 2
SLICE SIZE = 276
c# %assign: 16 clauses: 2842 learn: 0 restart: 0 decision: 0 propagated: 156
 FOUND CONST: 1188= 88 | 103  = 1
 reduced size from 5621 to 5279
 TESTING HYPOTHESIS ITER 2
h = 1085  hasserts.size()= 2
SLICE SIZE = 278
c# %assign: 16 clauses: 2854 learn: 0 restart: 0 decision: 0 propagated: 156
 FOUND CONST: 1085= llocvars_22_2a_idx_1_0==0 ? llocvars_22_2a_idx_1_0:(0) = 0
 reduced size from 5279 to 5273
 TESTING HYPOTHESIS ITER 3
h = 86  hasserts.size()= 1
SLICE SIZE = 89
c# %assign: 32 clauses: 1185 learn: 0 restart: 0 decision: 0 propagated: 146
 FOUND CONST: 86= llocvars_22_2a_idx_1_0 < (0)  = 0
 reduced size from 5273 to 5260
 TESTING HYPOTHESIS ITER 4
h = 188  hasserts.size()= 1
SLICE SIZE = 104
c# %assign: 26 clauses: 1707 learn: 62 restart: 1 decision: 1110 propagated: 4160
 TESTING HYPOTHESIS ITER 4
h = 1176  hasserts.size()= 2
SLICE SIZE = 270
c# %assign: 16 clauses: 2842 learn: 0 restart: 0 decision: 0 propagated: 156
 FOUND CONST: 1176= 995 < (4)  = 1
 reduced size from 5260 to 5233
 * Simulation optimized it to = 5233
Simulation didn't find a cex:  0.139 ms 
After all optim
c# %assign: 0 clauses: 89284 learn: 19984 restart: 3 decision: 38621 propagated: 475756
END CHECK
********  7	ftime= 0.59	ctime= 999.355

!% llocvars_22_2a_idx_0_0:4
llocvars_22_2a_idx_1_0:1
lintvars_23_2b_idx_0_0:0
lintvars_23_2b_idx_1_0:0
lnext_24_2c_idx_0_0:2
lnext_24_2c_idx_1_0:1
lnext_24_2c_idx_2_0:0
lsupernext_25_2d_idx_0_0:2
lsupernext_25_2d_idx_1_0:4
lsupernext_25_2d_idx_2_0:4
lkey_26_2e_idx_0_0:0
lkey_26_2e_idx_1_0:3
lkey_26_2e_idx_2_0:1
lsymbolic_27_2f_idx_0_0:1
lsymbolic_27_2f_idx_1_0:0
lsymbolic_27_2f_idx_2_0:0
lactive_28_30_idx_0_0:1
lactive_28_30_idx_1_0:0
lactive_28_30_idx_2_0:0
ret_value_29_31_0:0
new_symbolic_2a_32_idx_0_0:0
new_symbolic_2a_32_idx_1_0:1
new_symbolic_2a_32_idx_2_0:0
new_next_2b_33_idx_0_0:0
new_next_2b_33_idx_1_0:7
new_next_2b_33_idx_2_0:6
new_supernext_2c_34_idx_0_0:0
new_supernext_2c_34_idx_1_0:0
new_supernext_2c_34_idx_2_0:4
new_key_2d_35_idx_0_0:0
new_key_2d_35_idx_1_0:0
new_key_2d_35_idx_2_0:0
len_242_0:0
min_243_0:7
max_244_0:0
len_245_0:2
min_246_0:0
max_247_0:2
minseg_248_0:0
maxseg_249_0:4
len_250_0:1
min_251_0:0
max_252_0:2
minseg_253_0:2
maxseg_254_0:4
len_255_0:4
min_256_0:0
max_257_0:1
minseg_258_0:0
maxseg_259_0:0
min_678_0:0
minseg_679_0:0
min_821_0:0
minseg_822_0:2
min_1008_0:0
minseg_1009_0:0
min_1225_0:0
minseg_1226_0:2
len_603_0:2
lenseg_604_0:4
len_684_0:1
lenseg_685_0:4
len_827_0:2
lenseg_828_0:4
len_1014_0:1
lenseg_1015_0:4
sll_332_0:0
sllseg_690_0:0
sll_832_0:0
sllseg_833_0:0
sll_1019_0:0
sllseg_1020_0:0
sll_1230_0:0
sllseg_1231_0:0
maxseg_1237_0:4
maxseg_1026_0:4
min_1463_0:0
minseg_1464_0:2
maxseg_839_0:4
min_1242_0:0
minseg_1243_0:0
min_1468_0:0
minseg_1469_0:0
maxseg_696_0:4
min_1031_0:0
minseg_1032_0:2
min_1247_0:2
minseg_1248_0:7
min_1473_0:0
minseg_1474_0:0
len_335_0:0
lenseg_699_0:4
len_844_0:1
lenseg_845_0:4
len_1036_0:2
lenseg_1037_0:4
len_1252_0:1
lenseg_1253_0:4
min_338_0:0
minseg_850_0:4
min_1041_0:0
minseg_1042_0:6
min_1257_0:0
minseg_1258_0:0
min_1478_0:0
minseg_1479_0:4
max_341_0:2
max_1046_0:2
maxseg_1047_0:0
max_1262_0:2
maxseg_1263_0:0
max_1483_0:2
maxseg_1484_0:0
sll_350_0:0
sllseg_710_0:0
sll_859_0:0
sllseg_860_0:0
sll_1051_0:0
sllseg_1052_0:0
sll_1267_0:0
sllseg_1268_0:1
maxseg_1274_0:0
maxseg_1058_0:0
min_1491_0:0
minseg_1492_0:3
maxseg_866_0:2
min_1279_0:0
minseg_1280_0:0
min_1496_0:0
minseg_1497_0:0
maxseg_716_0:2
min_1063_0:0
minseg_1064_0:1
min_1284_0:0
minseg_1285_0:2
min_1501_0:0
minseg_1502_0:2
len_353_0:5
lenseg_719_0:4
len_871_0:2
lenseg_872_0:2
len_1068_0:0
lenseg_1069_0:3
len_1289_0:1
lenseg_1290_0:2
min_356_0:0
minseg_877_0:2
min_1073_0:6
minseg_1074_0:4
min_1294_0:4
minseg_1295_0:4
min_1506_0:4
minseg_1507_0:4
max_359_0:1
max_1078_0:0
maxseg_1079_0:0
max_1299_0:2
maxseg_1300_0:1
max_1511_0:0
maxseg_1512_0:2
sll_397_0:0
sll_729_0:0
sllseg_730_0:0
sll_886_0:0
sllseg_887_0:0
sll_1083_0:0
sllseg_1084_0:0
sll_1304_0:0
sllseg_1305_0:0
maxseg_1311_0:4
maxseg_1090_0:4
min_1519_0:2
minseg_1520_0:4
maxseg_893_0:4
min_1316_0:0
minseg_1317_0:0
min_1524_0:2
minseg_1525_0:0
maxseg_736_0:4
min_1095_0:2
minseg_1096_0:4
min_1321_0:0
minseg_1322_0:1
min_1529_0:4
minseg_1530_0:0
len_400_0:1
len_738_0:2
lenseg_739_0:4
len_898_0:4
lenseg_899_0:4
len_1100_0:2
lenseg_1101_0:4
len_1326_0:4
lenseg_1327_0:4
min_403_0:4
min_903_0:0
minseg_904_0:0
min_1105_0:4
minseg_1106_0:1
min_1331_0:0
minseg_1332_0:3
min_1534_0:0
minseg_1535_0:2
max_406_0:4
max_908_0:2
max_1110_0:4
maxseg_1111_0:2
max_1336_0:2
maxseg_1337_0:2
max_1539_0:4
maxseg_1540_0:0
sll_444_0:0
sllseg_750_0:1
sll_913_0:0
sllseg_914_0:0
sll_1115_0:0
sllseg_1116_0:0
sll_1341_0:0
sllseg_1342_0:0
maxseg_1348_0:4
maxseg_1122_0:4
min_1547_0:0
minseg_1548_0:2
maxseg_920_0:4
min_1353_0:0
minseg_1354_0:0
min_1552_0:0
minseg_1553_0:2
maxseg_756_0:3
min_1127_0:0
minseg_1128_0:2
min_1358_0:0
minseg_1359_0:0
min_1557_0:0
minseg_1558_0:2
len_447_0:4
lenseg_759_0:0
len_925_0:1
lenseg_926_0:4
len_1132_0:2
lenseg_1133_0:4
len_1363_0:1
lenseg_1364_0:4
min_450_0:0
minseg_931_0:0
min_1137_0:0
minseg_1138_0:2
min_1368_0:0
minseg_1369_0:0
min_1562_0:0
minseg_1563_0:2
max_453_0:5
max_1142_0:2
maxseg_1143_0:4
max_1373_0:2
maxseg_1374_0:4
max_1567_0:2
maxseg_1568_0:4
len_648_0:1
lenseg_649_0:4
len_769_0:2
lenseg_770_0:4
len_940_0:1
lenseg_941_0:4
len_1147_0:2
lenseg_1148_0:4
min_946_0:0
minseg_947_0:2
min_1153_0:0
minseg_1154_0:0
min_1379_0:0
minseg_1380_0:2
min_1573_0:0
minseg_1574_0:0
sll_498_0:0
sll_779_0:0
sllseg_780_0:0
sll_952_0:0
sllseg_953_0:0
sll_1159_0:0
sllseg_1160_0:0
sll_1385_0:0
sllseg_1386_0:0
maxseg_1392_0:4
maxseg_1166_0:0
min_1582_0:4
minseg_1583_0:4
maxseg_959_0:4
min_1397_0:4
minseg_1398_0:4
min_1587_0:0
minseg_1588_0:0
maxseg_786_0:4
min_1171_0:0
minseg_1172_0:0
min_1402_0:0
minseg_1403_0:4
min_1592_0:0
minseg_1593_0:4
len_501_0:4
len_788_0:4
lenseg_789_0:4
len_964_0:4
lenseg_965_0:4
len_1176_0:4
lenseg_1177_0:0
len_1407_0:0
lenseg_1408_0:2
min_504_0:2
min_969_0:2
minseg_970_0:4
min_1181_0:1
minseg_1182_0:1
min_1412_0:4
minseg_1413_0:0
min_1597_0:2
minseg_1598_0:6
max_507_0:4
max_974_0:4
max_1186_0:4
maxseg_1187_0:6
max_1417_0:4
maxseg_1418_0:0
max_1602_0:2
maxseg_1603_0:0
sll_516_0:0
sll_799_0:0
sllseg_800_0:0
sll_979_0:0
sllseg_980_0:0
sll_1191_0:0
sllseg_1192_0:0
sll_1422_0:0
sllseg_1423_0:0
maxseg_1429_0:4
maxseg_1198_0:0
min_1610_0:4
minseg_1611_0:4
maxseg_986_0:4
min_1434_0:4
minseg_1435_0:4
min_1615_0:0
minseg_1616_0:0
maxseg_806_0:2
min_1203_0:0
minseg_1204_0:0
min_1439_0:5
minseg_1440_0:0
min_1620_0:0
minseg_1621_0:1
len_519_0:1
len_808_0:1
lenseg_809_0:4
len_991_0:4
lenseg_992_0:4
len_1208_0:4
lenseg_1209_0:0
len_1444_0:0
lenseg_1445_0:2
min_522_0:4
min_996_0:4
minseg_997_0:2
min_1213_0:1
minseg_1214_0:0
min_1449_0:4
minseg_1450_0:0
min_1625_0:1
minseg_1626_0:3
max_525_0:4
max_1001_0:4
max_1218_0:4
maxseg_1219_0:1
max_1454_0:4
maxseg_1455_0:0
max_1630_0:2
maxseg_1631_0:3

BEG FIND
Level 1  intsize = 3
 * After optims it became = 37301 was 21747
 * After all optims it became = 20913
 finder  hits = 35279	 bstoreObjs=114964	 sstorePages=190
hitcount 	0	91488	6
hitcount 	1	18757	3
hitcount 	2	1895	3
hitcount 	3	1682	3
hitcount 	4	423	3
hitcount 	5	198	4
hitcount 	6	99	3
hitcount 	7	154	3
hitcount 	8	119	5
hitcount 	9	8	2
hitcount 	10	22	3
hitcount 	11	11	4
hitcount 	12	39	2
hitcount 	13	5	3
hitcount 	14	9	1
hitcount 	15	5	4
hitcount 	16	5	3
hitcount 	17	11	2
hitcount 	18	5	2
hitcount 	19	2	3
hitcount 	20	4	2
hitcount 	22	1	2
hitcount 	23	2	7
hitcount 	25	6	2
hitcount 	28	1	3
hitcount 	29	3	3
hitcount 	32	2	2
hitcount 	33	1	3
hitcount 	35	1	4
hitcount 	36	2	2
hitcount 	38	1	4
hitcount 	47	1	4
hitcount 	65	1	3
hitcount 	71	1	2
bucketsPerDepth 	8	1
bucketsPerDepth 	9	57
bucketsPerDepth 	10	227
bucketsPerDepth 	11	329
bucketsPerDepth 	12	229
bucketsPerDepth 	13	110
bucketsPerDepth 	14	48
bucketsPerDepth 	15	18
bucketsPerDepth 	16	4
bucketsPerDepth 	17	1
* TIME TO ADD INPUT :  0.152 ms 
f# %assign: 12 clauses: 1649670 learn: 378 restart: 10 decision: 4896 propagated: 5793341
END FIND
!+ 10000000001110010100001010101001010000110001001000000010011100000000000101000100000011101110010010000000010000101001010000000001001101001
!+ H__0_395_175:1
H__4_395_176:0
H__1_395_176_165:0
H__1_395_176_168:0
H__18_391:6
H__6_395:1
H__0_391_179:0
H__0_391_180:1
H__1_391_182:1
H__1_391_184:4
H__1_391_186:2
H__1_391_187:5
H__8_391:4
H__1_391_191:2
H__1_391_193:0
H__18_392:3
H__0_392_179:0
H__0_392_180:1
H__1_392_182:2
H__1_392_184:0
H__1_392_186:0
H__1_392_187:1
H__8_392:7
H__1_392_191:0
H__1_392_193:0
H__18_393:0
H__0_393_179:0
H__0_393_180:1
H__1_393_182:1
H__1_393_184:2
H__1_393_186:0
H__1_393_187:4
H__8_393:3
H__1_393_191:7
H__1_393_193:4
H__0_397:0
H__1_398:1
H__0_396_175:0
H__4_396_176:0
H__1_396_176_165:0
H__1_396_176_168:1
H__18_394:4
H__6_396:0
H__0_394_179:1
H__0_394_180:2
H__1_394_182:2
H__1_394_184:0
H__1_394_186:0
H__1_394_187:4
H__8_394:4
H__1_394_191:5
H__1_394_193:4

BEG CHECK
 * After optims it became = 5601 was 21747
 TESTING HYPOTHESIS ITER 1
h = 1188  hasserts.size()= 2
SLICE SIZE = 276
c# %assign: 16 clauses: 2842 learn: 0 restart: 0 decision: 0 propagated: 156
 FOUND CONST: 1188= 88 | 103  = 1
 reduced size from 5601 to 5259
 TESTING HYPOTHESIS ITER 2
h = 1085  hasserts.size()= 2
SLICE SIZE = 278
c# %assign: 16 clauses: 2854 learn: 0 restart: 0 decision: 0 propagated: 156
 FOUND CONST: 1085= llocvars_22_2a_idx_1_0==0 ? llocvars_22_2a_idx_1_0:(0) = 0
 reduced size from 5259 to 5253
 TESTING HYPOTHESIS ITER 3
h = 86  hasserts.size()= 1
SLICE SIZE = 89
c# %assign: 32 clauses: 1185 learn: 0 restart: 0 decision: 0 propagated: 146
 FOUND CONST: 86= llocvars_22_2a_idx_1_0 < (0)  = 0
 reduced size from 5253 to 5240
 TESTING HYPOTHESIS ITER 4
h = 1176  hasserts.size()= 2
SLICE SIZE = 270
c# %assign: 16 clauses: 2842 learn: 0 restart: 0 decision: 0 propagated: 156
 FOUND CONST: 1176= 995 < (4)  = 1
 reduced size from 5240 to 5213
 * Simulation optimized it to = 5213
Simulation didn't find a cex:  0.145 ms 
After all optim
c# %assign: 0 clauses: 87917 learn: 9049 restart: 2 decision: 5010 propagated: 120577
END CHECK
********  8	ftime= 0.291	ctime= 0.259
!% 000110000000001000000010010010100000111001001111110100001001001001001000000000000111000010000100100110010100100000000100111111001011111001111001111001111001100000000001000001000001100000000010011110010011110010100000111110010001000000010010010000010000010000010000110000010000100100001110000110001000000000001101000000000100000000000100111110100011000000001010000110010011000010001000000000100000100000000000101100001010011001000101000000000000100100100110000000110001110000100010000000001010000000100100001000100101011100101010001010010001100111101000001010000100100000000001001111001001111001111001001111001111001111001000100000001000001000001000001111001111001111001000000001000001000001000001000001000001000001111001111001111001111001000000000000000001001000001001000101000001001101100000000001001001001001001001001001001001001001001000100100100001001001010001000001000000000000000000001001000001001000000000001001001001000000001001001001001001001001001001000001001110100000000100001000001001001100001000
!% llocvars_22_2a_idx_0_0:0
llocvars_22_2a_idx_1_0:3
lintvars_23_2b_idx_0_0:0
lintvars_23_2b_idx_1_0:0
lnext_24_2c_idx_0_0:4
lnext_24_2c_idx_1_0:0
lnext_24_2c_idx_2_0:0
lsupernext_25_2d_idx_0_0:2
lsupernext_25_2d_idx_1_0:2
lsupernext_25_2d_idx_2_0:2
lkey_26_2e_idx_0_0:1
lkey_26_2e_idx_1_0:0
lkey_26_2e_idx_2_0:7
lsymbolic_27_2f_idx_0_0:0
lsymbolic_27_2f_idx_1_0:0
lsymbolic_27_2f_idx_2_0:1
lactive_28_30_idx_0_0:0
lactive_28_30_idx_1_0:0
lactive_28_30_idx_2_0:1
ret_value_29_31_0:7
new_symbolic_2a_32_idx_0_0:1
new_symbolic_2a_32_idx_1_0:1
new_symbolic_2a_32_idx_2_0:0
new_next_2b_33_idx_0_0:1
new_next_2b_33_idx_1_0:4
new_next_2b_33_idx_2_0:4
new_supernext_2c_34_idx_0_0:4
new_supernext_2c_34_idx_1_0:4
new_supernext_2c_34_idx_2_0:4
new_key_2d_35_idx_0_0:0
new_key_2d_35_idx_1_0:0
new_key_2d_35_idx_2_0:0
len_242_0:0
min_243_0:7
max_244_0:0
len_245_0:2
min_246_0:0
max_247_0:1
minseg_248_0:1
maxseg_249_0:3
len_250_0:2
min_251_0:1
max_252_0:1
minseg_253_0:0
maxseg_254_0:0
len_255_0:1
min_256_0:7
max_257_0:7
minseg_258_0:4
maxseg_259_0:6
min_678_0:7
minseg_679_0:4
min_821_0:7
minseg_822_0:4
min_1008_0:7
minseg_1009_0:4
min_1225_0:7
minseg_1226_0:4
len_603_0:1
lenseg_604_0:0
len_684_0:0
lenseg_685_0:4
len_827_0:0
lenseg_828_0:4
len_1014_0:0
lenseg_1015_0:4
sll_332_0:1
sllseg_690_0:0
sll_832_0:0
sllseg_833_0:0
sll_1019_0:0
sllseg_1020_0:0
sll_1230_0:0
sllseg_1231_0:0
maxseg_1237_0:4
maxseg_1026_0:4
min_1463_0:7
minseg_1464_0:4
maxseg_839_0:4
min_1242_0:7
minseg_1243_0:4
min_1468_0:2
minseg_1469_0:0
maxseg_696_0:6
min_1031_0:7
minseg_1032_0:4
min_1247_0:0
minseg_1248_0:1
min_1473_0:0
minseg_1474_0:4
len_335_0:4
lenseg_699_0:4
len_844_0:0
lenseg_845_0:4
len_1036_0:0
lenseg_1037_0:4
len_1252_0:0
lenseg_1253_0:4
min_338_0:0
minseg_850_0:6
min_1041_0:0
minseg_1042_0:4
min_1257_0:0
minseg_1258_0:2
min_1478_0:2
minseg_1479_0:0
max_341_0:7
max_1046_0:0
maxseg_1047_0:6
max_1262_0:0
maxseg_1263_0:1
max_1483_0:0
maxseg_1484_0:0
sll_350_0:0
sllseg_710_0:0
sll_859_0:0
sllseg_860_0:1
sll_1051_0:1
sllseg_1052_0:0
sll_1267_0:1
sllseg_1268_0:0
maxseg_1274_0:0
maxseg_1058_0:0
min_1491_0:4
minseg_1492_0:0
maxseg_866_0:0
min_1279_0:0
minseg_1280_0:4
min_1496_0:4
minseg_1497_0:7
maxseg_716_0:5
min_1063_0:0
minseg_1064_0:3
min_1284_0:0
minseg_1285_0:0
min_1501_0:2
minseg_1502_0:1
len_353_0:4
lenseg_719_0:1
len_871_0:1
lenseg_872_0:3
len_1068_0:0
lenseg_1069_0:1
len_1289_0:2
lenseg_1290_0:0
min_356_0:0
minseg_877_0:4
min_1073_0:0
minseg_1074_0:4
min_1294_0:0
minseg_1295_0:0
min_1506_0:0
minseg_1507_0:4
max_359_0:6
max_1078_0:0
maxseg_1079_0:2
max_1299_0:1
maxseg_1300_0:3
max_1511_0:2
maxseg_1512_0:4
sll_397_0:0
sll_729_0:1
sllseg_730_0:0
sll_886_0:0
sllseg_887_0:0
sll_1083_0:0
sllseg_1084_0:0
sll_1304_0:0
sllseg_1305_0:0
maxseg_1311_0:0
maxseg_1090_0:4
min_1519_0:4
minseg_1520_0:4
maxseg_893_0:4
min_1316_0:1
minseg_1317_0:0
min_1524_0:4
minseg_1525_0:1
maxseg_736_0:6
min_1095_0:1
minseg_1096_0:4
min_1321_0:0
minseg_1322_0:1
min_1529_0:0
minseg_1530_0:0
len_400_0:2
len_738_0:1
lenseg_739_0:0
len_898_0:4
lenseg_899_0:4
len_1100_0:0
lenseg_1101_0:2
len_1326_0:4
lenseg_1327_0:4
min_403_0:2
min_903_0:7
minseg_904_0:4
min_1105_0:2
minseg_1106_0:1
min_1331_0:2
minseg_1332_0:1
min_1534_0:1
minseg_1535_0:6
max_406_0:4
max_908_0:7
max_1110_0:2
maxseg_1111_0:0
max_1336_0:2
maxseg_1337_0:1
max_1539_0:4
maxseg_1540_0:4
sll_444_0:0
sllseg_750_0:0
sll_913_0:0
sllseg_914_0:0
sll_1115_0:0
sllseg_1116_0:0
sll_1341_0:0
sllseg_1342_0:0
maxseg_1348_0:4
maxseg_1122_0:4
min_1547_0:7
minseg_1548_0:4
maxseg_920_0:4
min_1353_0:7
minseg_1354_0:4
min_1552_0:7
minseg_1553_0:4
maxseg_756_0:4
min_1127_0:7
minseg_1128_0:4
min_1358_0:7
minseg_1359_0:4
min_1557_0:7
minseg_1558_0:4
len_447_0:0
lenseg_759_0:1
len_925_0:0
lenseg_926_0:4
len_1132_0:0
lenseg_1133_0:4
len_1363_0:0
lenseg_1364_0:4
min_450_0:0
minseg_931_0:4
min_1137_0:7
minseg_1138_0:4
min_1368_0:7
minseg_1369_0:4
min_1562_0:7
minseg_1563_0:4
max_453_0:0
max_1142_0:0
maxseg_1143_0:4
max_1373_0:0
maxseg_1374_0:4
max_1567_0:0
maxseg_1568_0:4
len_648_0:0
lenseg_649_0:4
len_769_0:0
lenseg_770_0:4
len_940_0:0
lenseg_941_0:4
len_1147_0:0
lenseg_1148_0:4
min_946_0:7
minseg_947_0:4
min_1153_0:7
minseg_1154_0:4
min_1379_0:7
minseg_1380_0:4
min_1573_0:7
minseg_1574_0:4
sll_498_0:0
sll_779_0:0
sllseg_780_0:0
sll_952_0:0
sllseg_953_0:0
sll_1159_0:0
sllseg_1160_0:0
sll_1385_0:0
sllseg_1386_0:0
maxseg_1392_0:0
maxseg_1166_0:0
min_1582_0:4
minseg_1583_0:4
maxseg_959_0:0
min_1397_0:4
minseg_1398_0:4
min_1587_0:0
minseg_1588_0:5
maxseg_786_0:0
min_1171_0:4
minseg_1172_0:4
min_1402_0:5
minseg_1403_0:1
min_1592_0:0
minseg_1593_0:0
len_501_0:4
len_788_0:4
lenseg_789_0:4
len_964_0:4
lenseg_965_0:4
len_1176_0:4
lenseg_1177_0:4
len_1407_0:4
lenseg_1408_0:4
min_504_0:4
min_969_0:4
minseg_970_0:4
min_1181_0:4
minseg_1182_0:4
min_1412_0:0
minseg_1413_0:1
min_1597_0:1
minseg_1598_0:1
max_507_0:4
max_974_0:4
max_1186_0:4
maxseg_1187_0:2
max_1417_0:4
maxseg_1418_0:0
max_1602_0:4
maxseg_1603_0:0
sll_516_0:0
sll_799_0:0
sllseg_800_0:0
sll_979_0:0
sllseg_980_0:0
sll_1191_0:0
sllseg_1192_0:0
sll_1422_0:0
sllseg_1423_0:0
maxseg_1429_0:0
maxseg_1198_0:0
min_1610_0:4
minseg_1611_0:4
maxseg_986_0:0
min_1434_0:4
minseg_1435_0:4
min_1615_0:0
minseg_1616_0:0
maxseg_806_0:0
min_1203_0:4
minseg_1204_0:4
min_1439_0:4
minseg_1440_0:4
min_1620_0:0
minseg_1621_0:0
len_519_0:4
len_808_0:4
lenseg_809_0:4
len_991_0:4
lenseg_992_0:4
len_1208_0:4
lenseg_1209_0:4
len_1444_0:4
lenseg_1445_0:4
min_522_0:4
min_996_0:0
minseg_997_0:4
min_1213_0:4
minseg_1214_0:3
min_1449_0:1
minseg_1450_0:0
min_1625_0:0
minseg_1626_0:1
max_525_0:4
max_1001_0:0
max_1218_0:4
maxseg_1219_0:4
max_1454_0:4
maxseg_1455_0:1
max_1630_0:4
maxseg_1631_0:0

BEG FIND
Level 1  intsize = 3
 * After optims it became = 34970 was 21747
 * After all optims it became = 19420
 finder  hits = 40044	 bstoreObjs=26413	 sstorePages=40
hitcount 	1	20912	3
hitcount 	2	2165	3
hitcount 	3	1973	2
hitcount 	4	549	3
hitcount 	5	259	3
hitcount 	6	102	3
hitcount 	7	116	3
hitcount 	8	174	2
hitcount 	9	11	2
hitcount 	10	27	2
hitcount 	11	10	3
hitcount 	12	40	2
hitcount 	13	7	3
hitcount 	14	8	2
hitcount 	15	6	2
hitcount 	16	6	3
hitcount 	17	12	3
hitcount 	18	6	3
hitcount 	19	3	2
hitcount 	20	2	3
hitcount 	23	3	4
hitcount 	25	7	2
hitcount 	29	3	3
hitcount 	30	1	3
hitcount 	32	2	1
hitcount 	33	2	4
hitcount 	35	1	3
hitcount 	36	2	2
hitcount 	38	1	2
hitcount 	47	1	4
hitcount 	65	1	4
hitcount 	71	1	4
bucketsPerDepth 	3	20
bucketsPerDepth 	4	870
bucketsPerDepth 	5	134
* TIME TO ADD INPUT :  0.139 ms 
f# %assign: 12 clauses: 1778827 learn: 394 restart: 11 decision: 5153 propagated: 6666838
END FIND
!+ 10000000010010000010010001001001100000110001000000000010011101000000000100100010000101101000100000000000010000101000010000010001001101001
!+ H__0_395_175:1
H__4_395_176:0
H__1_395_176_165:0
H__1_395_176_168:0
H__18_391:1
H__6_395:1
H__0_391_179:0
H__0_391_180:0
H__1_391_182:2
H__1_391_184:2
H__1_391_186:4
H__1_391_187:4
H__8_391:4
H__1_391_191:1
H__1_391_193:0
H__18_392:3
H__0_392_179:0
H__0_392_180:1
H__1_392_182:0
H__1_392_184:0
H__1_392_186:0
H__1_392_187:1
H__8_392:7
H__1_392_191:2
H__1_392_193:0
H__18_393:0
H__0_393_179:0
H__0_393_180:1
H__1_393_182:2
H__1_393_184:4
H__1_393_186:0
H__1_393_187:2
H__8_393:3
H__1_393_191:1
H__1_393_193:2
H__0_397:0
H__1_398:0
H__0_396_175:0
H__4_396_176:0
H__1_396_176_165:0
H__1_396_176_168:1
H__18_394:4
H__6_396:0
H__0_394_179:1
H__0_394_180:0
H__1_394_182:2
H__1_394_184:0
H__1_394_186:2
H__1_394_187:4
H__8_394:4
H__1_394_191:5
H__1_394_193:4

BEG CHECK
 * After optims it became = 5432 was 21747
 TESTING HYPOTHESIS ITER 1
h = 1092  hasserts.size()= 2
SLICE SIZE = 276
c# %assign: 16 clauses: 2842 learn: 0 restart: 0 decision: 0 propagated: 156
 FOUND CONST: 1092= 88 | 103  = 1
 reduced size from 5432 to 5090
 TESTING HYPOTHESIS ITER 2
h = 86  hasserts.size()= 1
SLICE SIZE = 89
c# %assign: 32 clauses: 1185 learn: 0 restart: 0 decision: 0 propagated: 146
 FOUND CONST: 86= llocvars_22_2a_idx_1_0 < (0)  = 0
 reduced size from 5090 to 5077
 TESTING HYPOTHESIS ITER 3
h = 1086  hasserts.size()= 2
SLICE SIZE = 270
c# %assign: 16 clauses: 2842 learn: 0 restart: 0 decision: 0 propagated: 156
 FOUND CONST: 1086= 995 < (4)  = 1
 reduced size from 5077 to 5052
 TESTING HYPOTHESIS ITER 4
h = 2261  hasserts.size()= 2
SLICE SIZE = 326
c# %assign: 29 clauses: 2965 learn: 6 restart: 1 decision: 30 propagated: 1538
 FOUND CONST: 2261= 2260 < (4)  = 1
 reduced size from 5052 to 5004
 * Simulation optimized it to = 5004
Simulation didn't find a cex:  0.145 ms 
After all optim
c# %assign: 0 clauses: 80526 learn: 11433 restart: 2 decision: 16574 propagated: 246562
END CHECK
********  9	ftime= 999.404	ctime= 0.262

!% llocvars_22_2a_idx_0_0:2
llocvars_22_2a_idx_1_0:3
lintvars_23_2b_idx_0_0:0
lintvars_23_2b_idx_1_0:0
lnext_24_2c_idx_0_0:4
lnext_24_2c_idx_1_0:2
lnext_24_2c_idx_2_0:2
lsupernext_25_2d_idx_0_0:2
lsupernext_25_2d_idx_1_0:1
lsupernext_25_2d_idx_2_0:4
lkey_26_2e_idx_0_0:1
lkey_26_2e_idx_1_0:4
lkey_26_2e_idx_2_0:1
lsymbolic_27_2f_idx_0_0:0
lsymbolic_27_2f_idx_1_0:0
lsymbolic_27_2f_idx_2_0:1
lactive_28_30_idx_0_0:0
lactive_28_30_idx_1_0:0
lactive_28_30_idx_2_0:1
ret_value_29_31_0:3
new_symbolic_2a_32_idx_0_0:1
new_symbolic_2a_32_idx_1_0:0
new_symbolic_2a_32_idx_2_0:0
new_next_2b_33_idx_0_0:0
new_next_2b_33_idx_1_0:2
new_next_2b_33_idx_2_0:4
new_supernext_2c_34_idx_0_0:4
new_supernext_2c_34_idx_1_0:4
new_supernext_2c_34_idx_2_0:2
new_key_2d_35_idx_0_0:0
new_key_2d_35_idx_1_0:0
new_key_2d_35_idx_2_0:0
len_242_0:0
min_243_0:7
max_244_0:0
len_245_0:2
min_246_0:3
max_247_0:4
minseg_248_0:0
maxseg_249_0:1
len_250_0:4
min_251_0:2
max_252_0:2
minseg_253_0:0
maxseg_254_0:3
len_255_0:3
min_256_0:1
max_257_0:4
minseg_258_0:4
maxseg_259_0:4
min_678_0:1
minseg_679_0:4
min_821_0:2
minseg_822_0:0
min_1008_0:2
minseg_1009_0:0
min_1225_0:2
minseg_1226_0:0
len_603_0:3
lenseg_604_0:0
len_684_0:4
lenseg_685_0:0
len_827_0:4
lenseg_828_0:0
len_1014_0:4
lenseg_1015_0:0
sll_332_0:0
sllseg_690_0:0
sll_832_0:0
sllseg_833_0:0
sll_1019_0:0
sllseg_1020_0:0
sll_1230_0:0
sllseg_1231_0:0
maxseg_1237_0:0
maxseg_1026_0:1
min_1463_0:7
minseg_1464_0:4
maxseg_839_0:1
min_1242_0:2
minseg_1243_0:0
min_1468_0:5
minseg_1469_0:0
maxseg_696_0:4
min_1031_0:3
minseg_1032_0:0
min_1247_0:4
minseg_1248_0:4
min_1473_0:1
minseg_1474_0:1
len_335_0:3
lenseg_699_0:2
len_844_0:2
lenseg_845_0:4
len_1036_0:4
lenseg_1037_0:6
len_1252_0:0
lenseg_1253_0:0
min_338_0:5
minseg_850_0:4
min_1041_0:5
minseg_1042_0:4
min_1257_0:0
minseg_1258_0:1
min_1478_0:0
minseg_1479_0:0
max_341_0:4
max_1046_0:4
maxseg_1047_0:5
max_1262_0:0
maxseg_1263_0:1
max_1483_0:0
maxseg_1484_0:7
sll_350_0:0
sllseg_710_0:0
sll_859_0:0
sllseg_860_0:0
sll_1051_0:0
sllseg_1052_0:0
sll_1267_0:0
sllseg_1268_0:0
maxseg_1274_0:0
maxseg_1058_0:1
min_1491_0:7
minseg_1492_0:4
maxseg_866_0:1
min_1279_0:2
minseg_1280_0:0
min_1496_0:0
minseg_1497_0:4
maxseg_716_0:3
min_1063_0:3
minseg_1064_0:0
min_1284_0:2
minseg_1285_0:1
min_1501_0:2
minseg_1502_0:0
len_353_0:4
lenseg_719_0:0
len_871_0:2
lenseg_872_0:4
len_1068_0:4
lenseg_1069_0:6
len_1289_0:0
lenseg_1290_0:0
min_356_0:2
minseg_877_0:0
min_1073_0:4
minseg_1074_0:1
min_1294_0:0
minseg_1295_0:4
min_1506_0:0
minseg_1507_0:1
max_359_0:2
max_1078_0:4
maxseg_1079_0:5
max_1299_0:0
maxseg_1300_0:0
max_1511_0:0
maxseg_1512_0:4
sll_397_0:1
sll_729_0:1
sllseg_730_0:0
sll_886_0:1
sllseg_887_0:0
sll_1083_0:0
sllseg_1084_0:1
sll_1304_0:0
sllseg_1305_0:0
maxseg_1311_0:0
maxseg_1090_0:1
min_1519_0:4
minseg_1520_0:2
maxseg_893_0:1
min_1316_0:0
minseg_1317_0:7
min_1524_0:5
minseg_1525_0:0
maxseg_736_0:0
min_1095_0:1
minseg_1096_0:0
min_1321_0:0
minseg_1322_0:2
min_1529_0:6
minseg_1530_0:0
len_400_0:0
len_738_0:2
lenseg_739_0:4
len_898_0:0
lenseg_899_0:5
len_1100_0:2
lenseg_1101_0:4
len_1326_0:6
lenseg_1327_0:4
min_403_0:0
min_903_0:1
minseg_904_0:0
min_1105_0:3
minseg_1106_0:1
min_1331_0:0
minseg_1332_0:0
min_1534_0:4
minseg_1535_0:6
max_406_0:0
max_908_0:4
max_1110_0:0
maxseg_1111_0:0
max_1336_0:1
maxseg_1337_0:0
max_1539_0:6
maxseg_1540_0:0
sll_444_0:0
sllseg_750_0:0
sll_913_0:0
sllseg_914_0:0
sll_1115_0:0
sllseg_1116_0:0
sll_1341_0:0
sllseg_1342_0:0
maxseg_1348_0:0
maxseg_1122_0:1
min_1547_0:7
minseg_1548_0:4
maxseg_920_0:1
min_1353_0:2
minseg_1354_0:0
min_1552_0:7
minseg_1553_0:4
maxseg_756_0:0
min_1127_0:3
minseg_1128_0:0
min_1358_0:2
minseg_1359_0:0
min_1557_0:7
minseg_1558_0:4
len_447_0:0
lenseg_759_0:2
len_925_0:2
lenseg_926_0:4
len_1132_0:4
lenseg_1133_0:6
len_1363_0:0
lenseg_1364_0:0
min_450_0:0
minseg_931_0:5
min_1137_0:3
minseg_1138_0:0
min_1368_0:2
minseg_1369_0:0
min_1562_0:7
minseg_1563_0:4
max_453_0:0
max_1142_0:4
maxseg_1143_0:1
max_1373_0:0
maxseg_1374_0:1
max_1567_0:0
maxseg_1568_0:0
len_648_0:2
lenseg_649_0:4
len_769_0:4
lenseg_770_0:6
len_940_0:0
lenseg_941_0:0
len_1147_0:0
lenseg_1148_0:0
min_946_0:3
minseg_947_0:0
min_1153_0:2
minseg_1154_0:0
min_1379_0:7
minseg_1380_0:4
min_1573_0:7
minseg_1574_0:4
sll_498_0:0
sll_779_0:0
sllseg_780_0:0
sll_952_0:0
sllseg_953_0:0
sll_1159_0:0
sllseg_1160_0:0
sll_1385_0:0
sllseg_1386_0:0
maxseg_1392_0:4
maxseg_1166_0:4
min_1582_0:0
minseg_1583_0:5
maxseg_959_0:4
min_1397_0:0
minseg_1398_0:5
min_1587_0:0
minseg_1588_0:2
maxseg_786_0:2
min_1171_0:0
minseg_1172_0:5
min_1402_0:1
minseg_1403_0:2
min_1592_0:5
minseg_1593_0:0
len_501_0:0
len_788_0:0
lenseg_789_0:0
len_964_0:4
lenseg_965_0:0
len_1176_0:4
lenseg_1177_0:0
len_1407_0:4
lenseg_1408_0:0
min_504_0:3
min_969_0:3
minseg_970_0:4
min_1181_0:5
minseg_1182_0:0
min_1412_0:4
minseg_1413_0:0
min_1597_0:0
minseg_1598_0:0
max_507_0:0
max_974_0:0
max_1186_0:2
maxseg_1187_0:5
max_1417_0:2
maxseg_1418_0:1
max_1602_0:2
maxseg_1603_0:4
sll_516_0:0
sll_799_0:0
sllseg_800_0:1
sll_979_0:0
sllseg_980_0:0
sll_1191_0:0
sllseg_1192_0:1
sll_1422_0:0
sllseg_1423_0:1
maxseg_1429_0:0
maxseg_1198_0:1
min_1610_0:4
minseg_1611_0:0
maxseg_986_0:4
min_1434_0:1
minseg_1435_0:6
min_1615_0:0
minseg_1616_0:0
maxseg_806_0:1
min_1203_0:5
minseg_1204_0:0
min_1439_0:1
minseg_1440_0:5
min_1620_0:0
minseg_1621_0:0
len_519_0:0
len_808_0:0
lenseg_809_0:2
len_991_0:3
lenseg_992_0:4
len_1208_0:1
lenseg_1209_0:0
len_1444_0:1
lenseg_1445_0:0
min_522_0:2
min_996_0:0
minseg_997_0:0
min_1213_0:2
minseg_1214_0:2
min_1449_0:3
minseg_1450_0:3
min_1625_0:0
minseg_1626_0:4
max_525_0:0
max_1001_0:0
max_1218_0:3
maxseg_1219_0:0
max_1454_0:1
maxseg_1455_0:6
max_1630_0:7
maxseg_1631_0:6

BEG FIND
Level 1  intsize = 3
 * After optims it became = 42223 was 21747
 * After all optims it became = 24962
 finder  hits = 45964	 bstoreObjs=68332	 sstorePages=110
hitcount 	0	39102	5
hitcount 	1	22366	3
hitcount 	2	2798	3
hitcount 	3	2418	3
hitcount 	4	665	3
hitcount 	5	302	3
hitcount 	6	127	4
hitcount 	7	156	3
hitcount 	8	159	3
hitcount 	9	70	3
hitcount 	10	28	2
hitcount 	11	14	3
hitcount 	12	40	2
hitcount 	13	10	3
hitcount 	14	8	2
hitcount 	15	5	2
hitcount 	16	9	3
hitcount 	17	11	2
hitcount 	18	5	3
hitcount 	19	5	4
hitcount 	20	2	3
hitcount 	21	3	3
hitcount 	22	1	5
hitcount 	23	2	4
hitcount 	25	5	2
hitcount 	28	1	5
hitcount 	29	5	2
hitcount 	32	3	2
hitcount 	33	1	4
hitcount 	34	1	4
hitcount 	35	2	3
hitcount 	36	2	2
hitcount 	38	2	3
hitcount 	42	1	4
hitcount 	47	1	4
hitcount 	65	1	4
hitcount 	71	1	4
bucketsPerDepth 	6	2
bucketsPerDepth 	7	95
bucketsPerDepth 	8	337
bucketsPerDepth 	9	359
bucketsPerDepth 	10	169
bucketsPerDepth 	11	45
bucketsPerDepth 	12	13
bucketsPerDepth 	13	4
* TIME TO ADD INPUT :  0.153 ms 
f# %assign: 12 clauses: 1979223 learn: 402 restart: 12 decision: 5292 propagated: 7267682
END FIND
!+ 10000000010010000010010010001001100000110001001000000010011110000010000000000010000101101001100010010000000001000010000000000001001101001
!+ H__0_395_175:1
H__4_395_176:0
H__1_395_176_165:0
H__1_395_176_168:0
H__18_391:1
H__6_395:1
H__0_391_179:0
H__0_391_180:0
H__1_391_182:2
H__1_391_184:2
H__1_391_186:2
H__1_391_187:4
H__8_391:4
H__1_391_191:1
H__1_391_193:0
H__18_392:3
H__0_392_179:0
H__0_392_180:1
H__1_392_182:2
H__1_392_184:0
H__1_392_186:0
H__1_392_187:1
H__8_392:7
H__1_392_191:1
H__1_392_193:0
H__18_393:1
H__0_393_179:0
H__0_393_180:0
H__1_393_182:0
H__1_393_184:4
H__1_393_186:0
H__1_393_187:2
H__8_393:3
H__1_393_191:1
H__1_393_193:3
H__0_397:0
H__1_398:1
H__0_396_175:1
H__4_396_176:0
H__1_396_176_165:0
H__1_396_176_168:0
H__18_394:2
H__6_396:0
H__0_394_179:0
H__0_394_180:1
H__1_394_182:0
H__1_394_184:0
H__1_394_186:0
H__1_394_187:4
H__8_394:4
H__1_394_191:5
H__1_394_193:4

BEG CHECK
 * After optims it became = 4235 was 21747
 TESTING HYPOTHESIS ITER 1
h = 3736  hasserts.size()= 2
SLICE SIZE = 276
c# %assign: 16 clauses: 2842 learn: 0 restart: 0 decision: 0 propagated: 156
 FOUND CONST: 3736= 88 | 103  = 1
 reduced size from 4235 to 3827
 TESTING HYPOTHESIS ITER 2
h = 86  hasserts.size()= 1
SLICE SIZE = 89
c# %assign: 32 clauses: 1185 learn: 0 restart: 0 decision: 0 propagated: 146
 FOUND CONST: 86= llocvars_22_2a_idx_1_0 < (0)  = 0
 reduced size from 3827 to 3814
 TESTING HYPOTHESIS ITER 3
h = 1371  hasserts.size()= 2
SLICE SIZE = 271
c# %assign: 20 clauses: 2418 learn: 44 restart: 1 decision: 621 propagated: 4489
 TESTING HYPOTHESIS ITER 3
h = 1254  hasserts.size()= 2
SLICE SIZE = 286
c# %assign: 16 clauses: 2882 learn: 0 restart: 0 decision: 0 propagated: 156
 FOUND CONST: 1254= 1245 & 1253  = 0
 reduced size from 3814 to 3802
 TESTING HYPOTHESIS ITER 4
h = 1246  hasserts.size()= 2
SLICE SIZE = 286
c# %assign: 17 clauses: 2458 learn: 49 restart: 1 decision: 1013 propagated: 3204
 TESTING HYPOTHESIS ITER 4
h = 1266  hasserts.size()= 2
SLICE SIZE = 291
c# %assign: 15 clauses: 2930 learn: 0 restart: 0 decision: 0 propagated: 156
 FOUND CONST: 1266= 1237 & 1265  = 0
 reduced size from 3802 to 3797
 * Simulation optimized it to = 3797
Simulation didn't find a cex:  0.15 ms 
After all optim
c# %assign: 0 clauses: 65178 learn: 8626 restart: 2 decision: 4828 propagated: 201932
END CHECK
********  10	ftime= 0.343	ctime= 0.271

!% llocvars_22_2a_idx_0_0:2
llocvars_22_2a_idx_1_0:1
lintvars_23_2b_idx_0_0:0
lintvars_23_2b_idx_1_0:0
lnext_24_2c_idx_0_0:2
lnext_24_2c_idx_1_0:2
lnext_24_2c_idx_2_0:4
lsupernext_25_2d_idx_0_0:4
lsupernext_25_2d_idx_1_0:1
lsupernext_25_2d_idx_2_0:4
lkey_26_2e_idx_0_0:4
lkey_26_2e_idx_1_0:1
lkey_26_2e_idx_2_0:3
lsymbolic_27_2f_idx_0_0:1
lsymbolic_27_2f_idx_1_0:0
lsymbolic_27_2f_idx_2_0:0
lactive_28_30_idx_0_0:1
lactive_28_30_idx_1_0:0
lactive_28_30_idx_2_0:0
ret_value_29_31_0:7
new_symbolic_2a_32_idx_0_0:0
new_symbolic_2a_32_idx_1_0:0
new_symbolic_2a_32_idx_2_0:0
new_next_2b_33_idx_0_0:4
new_next_2b_33_idx_1_0:2
new_next_2b_33_idx_2_0:4
new_supernext_2c_34_idx_0_0:0
new_supernext_2c_34_idx_1_0:2
new_supernext_2c_34_idx_2_0:0
new_key_2d_35_idx_0_0:3
new_key_2d_35_idx_1_0:2
new_key_2d_35_idx_2_0:0
len_242_0:0
min_243_0:7
max_244_0:0
len_245_0:5
min_246_0:1
max_247_0:4
minseg_248_0:4
maxseg_249_0:6
len_250_0:4
min_251_0:1
max_252_0:1
minseg_253_0:2
maxseg_254_0:2
len_255_0:6
min_256_0:1
max_257_0:4
minseg_258_0:4
maxseg_259_0:4
min_678_0:1
minseg_679_0:4
min_821_0:1
minseg_822_0:2
min_1008_0:1
minseg_1009_0:2
min_1225_0:1
minseg_1226_0:2
len_603_0:5
lenseg_604_0:2
len_684_0:4
lenseg_685_0:4
len_827_0:4
lenseg_828_0:4
len_1014_0:4
lenseg_1015_0:4
sll_332_0:0
sllseg_690_0:0
sll_832_0:0
sllseg_833_0:0
sll_1019_0:0
sllseg_1020_0:0
sll_1230_0:0
sllseg_1231_0:0
maxseg_1237_0:2
maxseg_1026_0:2
min_1463_0:1
minseg_1464_0:2
maxseg_839_0:2
min_1242_0:1
minseg_1243_0:2
min_1468_0:0
minseg_1469_0:1
maxseg_696_0:6
min_1031_0:1
minseg_1032_0:2
min_1247_0:2
minseg_1248_0:1
min_1473_0:5
minseg_1474_0:1
len_335_0:1
lenseg_699_0:4
len_844_0:4
lenseg_845_0:4
len_1036_0:4
lenseg_1037_0:4
len_1252_0:4
lenseg_1253_0:4
min_338_0:0
minseg_850_0:0
min_1041_0:0
minseg_1042_0:0
min_1257_0:0
minseg_1258_0:0
min_1478_0:0
minseg_1479_0:0
max_341_0:4
max_1046_0:1
maxseg_1047_0:0
max_1262_0:1
maxseg_1263_0:4
max_1483_0:1
maxseg_1484_0:4
sll_350_0:0
sllseg_710_0:0
sll_859_0:0
sllseg_860_0:0
sll_1051_0:0
sllseg_1052_0:0
sll_1267_0:0
sllseg_1268_0:0
maxseg_1274_0:2
maxseg_1058_0:2
min_1491_0:1
minseg_1492_0:2
maxseg_866_0:2
min_1279_0:1
minseg_1280_0:2
min_1496_0:0
minseg_1497_0:1
maxseg_716_0:2
min_1063_0:1
minseg_1064_0:2
min_1284_0:0
minseg_1285_0:0
min_1501_0:4
minseg_1502_0:2
len_353_0:4
lenseg_719_0:4
len_871_0:4
lenseg_872_0:4
len_1068_0:4
lenseg_1069_0:4
len_1289_0:4
lenseg_1290_0:4
min_356_0:1
minseg_877_0:2
min_1073_0:5
minseg_1074_0:4
min_1294_0:1
minseg_1295_0:0
min_1506_0:0
minseg_1507_0:0
max_359_0:1
max_1078_0:1
maxseg_1079_0:3
max_1299_0:1
maxseg_1300_0:2
max_1511_0:1
maxseg_1512_0:6
sll_397_0:1
sll_729_0:0
sllseg_730_0:0
sll_886_0:0
sllseg_887_0:0
sll_1083_0:0
sllseg_1084_0:0
sll_1304_0:0
sllseg_1305_0:1
maxseg_1311_0:1
maxseg_1090_0:2
min_1519_0:2
minseg_1520_0:0
maxseg_893_0:0
min_1316_0:2
minseg_1317_0:3
min_1524_0:3
minseg_1525_0:7
maxseg_736_0:0
min_1095_0:0
minseg_1096_0:2
min_1321_0:1
minseg_1322_0:0
min_1529_0:0
minseg_1530_0:1
len_400_0:0
len_738_0:4
lenseg_739_0:4
len_898_0:0
lenseg_899_0:6
len_1100_0:4
lenseg_1101_0:0
len_1326_0:5
lenseg_1327_0:2
min_403_0:6
min_903_0:3
minseg_904_0:5
min_1105_0:1
minseg_1106_0:1
min_1331_0:2
minseg_1332_0:4
min_1534_0:4
minseg_1535_0:0
max_406_0:2
max_908_0:0
max_1110_0:0
maxseg_1111_0:1
max_1336_0:1
maxseg_1337_0:0
max_1539_0:0
maxseg_1540_0:0
sll_444_0:0
sllseg_750_0:0
sll_913_0:0
sllseg_914_0:0
sll_1115_0:0
sllseg_1116_0:0
sll_1341_0:1
sllseg_1342_0:0
maxseg_1348_0:4
maxseg_1122_0:0
min_1547_0:2
minseg_1548_0:4
maxseg_920_0:0
min_1353_0:1
minseg_1354_0:0
min_1552_0:4
minseg_1553_0:0
maxseg_756_0:0
min_1127_0:7
minseg_1128_0:0
min_1358_0:1
minseg_1359_0:0
min_1557_0:0
minseg_1558_0:0
len_447_0:3
lenseg_759_0:0
len_925_0:6
lenseg_926_0:0
len_1132_0:0
lenseg_1133_0:3
len_1363_0:2
lenseg_1364_0:1
min_450_0:0
minseg_931_0:1
min_1137_0:4
minseg_1138_0:2
min_1368_0:1
minseg_1369_0:1
min_1562_0:7
minseg_1563_0:6
max_453_0:4
max_1142_0:1
maxseg_1143_0:2
max_1373_0:3
maxseg_1374_0:4
max_1567_0:6
maxseg_1568_0:6
len_648_0:3
lenseg_649_0:0
len_769_0:2
lenseg_770_0:4
len_940_0:0
lenseg_941_0:5
len_1147_0:4
lenseg_1148_0:0
min_946_0:0
minseg_947_0:0
min_1153_0:0
minseg_1154_0:7
min_1379_0:4
minseg_1380_0:1
min_1573_0:1
minseg_1574_0:5
sll_498_0:0
sll_779_0:0
sllseg_780_0:0
sll_952_0:0
sllseg_953_0:0
sll_1159_0:0
sllseg_1160_0:0
sll_1385_0:0
sllseg_1386_0:0
maxseg_1392_0:2
maxseg_1166_0:2
min_1582_0:1
minseg_1583_0:2
maxseg_959_0:2
min_1397_0:1
minseg_1398_0:2
min_1587_0:5
minseg_1588_0:0
maxseg_786_0:6
min_1171_0:1
minseg_1172_0:2
min_1402_0:0
minseg_1403_0:2
min_1592_0:0
minseg_1593_0:4
len_501_0:5
len_788_0:5
lenseg_789_0:2
len_964_0:4
lenseg_965_0:4
len_1176_0:4
lenseg_1177_0:4
len_1407_0:4
lenseg_1408_0:4
min_504_0:1
min_969_0:1
minseg_970_0:4
min_1181_0:4
minseg_1182_0:0
min_1412_0:0
minseg_1413_0:0
min_1597_0:0
minseg_1598_0:2
max_507_0:4
max_974_0:4
max_1186_0:1
maxseg_1187_0:0
max_1417_0:1
maxseg_1418_0:1
max_1602_0:1
maxseg_1603_0:0
sll_516_0:0
sll_799_0:0
sllseg_800_0:0
sll_979_0:0
sllseg_980_0:0
sll_1191_0:0
sllseg_1192_0:0
sll_1422_0:0
sllseg_1423_0:0
maxseg_1429_0:2
maxseg_1198_0:2
min_1610_0:1
minseg_1611_0:2
maxseg_986_0:2
min_1434_0:1
minseg_1435_0:2
min_1615_0:1
minseg_1616_0:2
maxseg_806_0:0
min_1203_0:1
minseg_1204_0:2
min_1439_0:1
minseg_1440_0:2
min_1620_0:1
minseg_1621_0:2
len_519_0:0
len_808_0:2
lenseg_809_0:2
len_991_0:4
lenseg_992_0:4
len_1208_0:4
lenseg_1209_0:4
len_1444_0:4
lenseg_1445_0:4
min_522_0:4
min_996_0:4
minseg_997_0:5
min_1213_0:1
minseg_1214_0:2
min_1449_0:1
minseg_1450_0:2
min_1625_0:1
minseg_1626_0:2
max_525_0:0
max_1001_0:1
max_1218_0:1
maxseg_1219_0:2
max_1454_0:1
maxseg_1455_0:2
max_1630_0:1
maxseg_1631_0:2

BEG FIND
Level 1  intsize = 3
 * After optims it became = 36146 was 21747
 * After all optims it became = 18187
 finder  hits = 49729	 bstoreObjs=101958	 sstorePages=167
hitcount 	0	70314	6
hitcount 	1	24212	3
hitcount 	2	2870	3
hitcount 	3	2811	3
hitcount 	4	733	3
hitcount 	5	314	3
hitcount 	6	134	4
hitcount 	7	166	3
hitcount 	8	149	3
hitcount 	9	28	3
hitcount 	10	78	2
hitcount 	11	18	3
hitcount 	12	42	2
hitcount 	13	10	4
hitcount 	14	10	2
hitcount 	15	5	2
hitcount 	16	7	3
hitcount 	17	13	2
hitcount 	18	4	3
hitcount 	19	4	4
hitcount 	20	3	3
hitcount 	21	3	3
hitcount 	22	2	4
hitcount 	23	2	4
hitcount 	25	5	2
hitcount 	28	1	5
hitcount 	29	3	3
hitcount 	30	2	2
hitcount 	32	2	1
hitcount 	33	2	4
hitcount 	34	1	4
hitcount 	35	1	3
hitcount 	36	2	2
hitcount 	37	1	3
hitcount 	38	1	2
hitcount 	40	1	5
hitcount 	42	1	4
hitcount 	47	1	4
hitcount 	65	1	4
hitcount 	71	1	4
bucketsPerDepth 	8	30
bucketsPerDepth 	9	241
bucketsPerDepth 	10	375
bucketsPerDepth 	11	234
bucketsPerDepth 	12	106
bucketsPerDepth 	13	27
bucketsPerDepth 	14	7
bucketsPerDepth 	15	3
bucketsPerDepth 	16	1
* TIME TO ADD INPUT :  999.131 ms 
f# %assign: 12 clauses: 1976466 learn: 451 restart: 14 decision: 6304 propagated: 10477260
END FIND
!+ 10000000000110010110010010101001100000110001001000000010011110000000000101000100000001101001100000010100010011010010010100000100010100001
!+ H__0_395_175:1
H__4_395_176:0
H__1_395_176_165:0
H__1_395_176_168:0
H__18_391:4
H__6_395:1
H__0_391_179:0
H__0_391_180:1
H__1_391_182:3
H__1_391_184:2
H__1_391_186:2
H__1_391_187:5
H__8_391:4
H__1_391_191:1
H__1_391_193:0
H__18_392:3
H__0_392_179:0
H__0_392_180:1
H__1_392_182:2
H__1_392_184:0
H__1_392_186:0
H__1_392_187:1
H__8_392:7
H__1_392_191:1
H__1_392_193:0
H__18_393:0
H__0_393_179:0
H__0_393_180:1
H__1_393_182:1
H__1_393_184:2
H__1_393_186:0
H__1_393_187:0
H__8_393:3
H__1_393_191:1
H__1_393_193:3
H__0_397:0
H__1_398:0
H__0_396_175:1
H__4_396_176:1
H__1_396_176_165:0
H__1_396_176_168:1
H__18_394:3
H__6_396:1
H__0_394_179:0
H__0_394_180:1
H__1_394_182:2
H__1_394_184:1
H__1_394_186:0
H__1_394_187:1
H__8_394:2
H__1_394_191:1
H__1_394_193:4

BEG CHECK
 * After optims it became = 8076 was 21747
 TESTING HYPOTHESIS ITER 1
h = 1103  hasserts.size()= 2
SLICE SIZE = 276
c# %assign: 16 clauses: 2842 learn: 0 restart: 0 decision: 0 propagated: 156
 FOUND CONST: 1103= 88 | 103  = 1
 reduced size from 8076 to 7329
 TESTING HYPOTHESIS ITER 2
h = 86  hasserts.size()= 1
SLICE SIZE = 89
c# %assign: 32 clauses: 1185 learn: 0 restart: 0 decision: 0 propagated: 146
 FOUND CONST: 86= llocvars_22_2a_idx_1_0 < (0)  = 0
 reduced size from 7329 to 7316
 TESTING HYPOTHESIS ITER 3
h = 1033  hasserts.size()= 2
SLICE SIZE = 270
c# %assign: 16 clauses: 2842 learn: 0 restart: 0 decision: 0 propagated: 156
 FOUND CONST: 1033= 995 < (4)  = 1
 reduced size from 7316 to 7279
 TESTING HYPOTHESIS ITER 4
h = 2258  hasserts.size()= 2
SLICE SIZE = 326
c# %assign: 29 clauses: 2965 learn: 6 restart: 1 decision: 30 propagated: 1538
 FOUND CONST: 2258= 2257 < (4)  = 1
 reduced size from 7279 to 7231
 * Simulation optimized it to = 7231
Simulation didn't find a cex:  0.152 ms 
After all optim
c# %assign: 0 clauses: 123046 learn: 36350 restart: 4 decision: 65908 propagated: 1000888
END CHECK
********  11	ftime= 1999.13	ctime= 0.541

!% llocvars_22_2a_idx_0_0:2
llocvars_22_2a_idx_1_0:3
lintvars_23_2b_idx_0_0:0
lintvars_23_2b_idx_1_0:6
lnext_24_2c_idx_0_0:1
lnext_24_2c_idx_1_0:4
lnext_24_2c_idx_2_0:1
lsupernext_25_2d_idx_0_0:7
lsupernext_25_2d_idx_1_0:6
lsupernext_25_2d_idx_2_0:6
lkey_26_2e_idx_0_0:0
lkey_26_2e_idx_1_0:2
lkey_26_2e_idx_2_0:4
lsymbolic_27_2f_idx_0_0:1
lsymbolic_27_2f_idx_1_0:0
lsymbolic_27_2f_idx_2_0:0
lactive_28_30_idx_0_0:1
lactive_28_30_idx_1_0:0
lactive_28_30_idx_2_0:1
ret_value_29_31_0:6
new_symbolic_2a_32_idx_0_0:1
new_symbolic_2a_32_idx_1_0:1
new_symbolic_2a_32_idx_2_0:0
new_next_2b_33_idx_0_0:1
new_next_2b_33_idx_1_0:2
new_next_2b_33_idx_2_0:4
new_supernext_2c_34_idx_0_0:4
new_supernext_2c_34_idx_1_0:1
new_supernext_2c_34_idx_2_0:1
new_key_2d_35_idx_0_0:0
new_key_2d_35_idx_1_0:4
new_key_2d_35_idx_2_0:4
len_242_0:0
min_243_0:7
max_244_0:0
len_245_0:1
min_246_0:6
max_247_0:6
minseg_248_0:0
maxseg_249_0:0
len_250_0:4
min_251_0:0
max_252_0:0
minseg_253_0:2
maxseg_254_0:7
len_255_0:2
min_256_0:2
max_257_0:2
minseg_258_0:0
maxseg_259_0:3
min_678_0:2
minseg_679_0:0
min_821_0:6
minseg_822_0:0
min_1008_0:6
minseg_1009_0:0
min_1225_0:6
minseg_1226_0:0
len_603_0:2
lenseg_604_0:2
len_684_0:1
lenseg_685_0:2
len_827_0:1
lenseg_828_0:2
len_1014_0:1
lenseg_1015_0:2
sll_332_0:0
sllseg_690_0:0
sll_832_0:0
sllseg_833_0:0
sll_1019_0:0
sllseg_1020_0:0
sll_1230_0:0
sllseg_1231_0:0
maxseg_1237_0:2
maxseg_1026_0:2
min_1463_0:7
minseg_1464_0:0
maxseg_839_0:7
min_1242_0:4
minseg_1243_0:1
min_1468_0:4
minseg_1469_0:0
maxseg_696_0:3
min_1031_0:0
minseg_1032_0:2
min_1247_0:3
minseg_1248_0:1
min_1473_0:0
minseg_1474_0:1
len_335_0:3
lenseg_699_0:1
len_844_0:4
lenseg_845_0:4
len_1036_0:0
lenseg_1037_0:2
len_1252_0:0
lenseg_1253_0:0
min_338_0:2
minseg_850_0:2
min_1041_0:1
minseg_1042_0:0
min_1257_0:5
minseg_1258_0:0
min_1478_0:0
minseg_1479_0:0
max_341_0:2
max_1046_0:0
maxseg_1047_0:7
max_1262_0:4
maxseg_1263_0:0
max_1483_0:0
maxseg_1484_0:5
sll_350_0:1
sllseg_710_0:1
sll_859_0:0
sllseg_860_0:0
sll_1051_0:0
sllseg_1052_0:0
sll_1267_0:1
sllseg_1268_0:1
maxseg_1274_0:0
maxseg_1058_0:4
min_1491_0:0
minseg_1492_0:0
maxseg_866_0:0
min_1279_0:0
minseg_1280_0:2
min_1496_0:5
minseg_1497_0:0
maxseg_716_0:1
min_1063_0:1
minseg_1064_0:5
min_1284_0:1
minseg_1285_0:6
min_1501_0:4
minseg_1502_0:3
len_353_0:0
lenseg_719_0:0
len_871_0:2
lenseg_872_0:6
len_1068_0:4
lenseg_1069_0:0
len_1289_0:0
lenseg_1290_0:0
min_356_0:2
minseg_877_0:2
min_1073_0:4
minseg_1074_0:4
min_1294_0:5
minseg_1295_0:0
min_1506_0:2
minseg_1507_0:2
max_359_0:4
max_1078_0:0
maxseg_1079_0:0
max_1299_0:1
maxseg_1300_0:2
max_1511_0:0
maxseg_1512_0:0
sll_397_0:0
sll_729_0:0
sllseg_730_0:0
sll_886_0:0
sllseg_887_0:0
sll_1083_0:0
sllseg_1084_0:0
sll_1304_0:0
sllseg_1305_0:0
maxseg_1311_0:2
maxseg_1090_0:2
min_1519_0:7
minseg_1520_0:0
maxseg_893_0:2
min_1316_0:7
minseg_1317_0:0
min_1524_0:2
minseg_1525_0:2
maxseg_736_0:4
min_1095_0:4
minseg_1096_0:1
min_1321_0:4
minseg_1322_0:1
min_1529_0:1
minseg_1530_0:5
len_400_0:0
len_738_0:0
lenseg_739_0:1
len_898_0:0
lenseg_899_0:2
len_1100_0:0
lenseg_1101_0:0
len_1326_0:0
lenseg_1327_0:0
min_403_0:0
min_903_0:0
minseg_904_0:4
min_1105_0:1
minseg_1106_0:0
min_1331_0:0
minseg_1332_0:1
min_1534_0:2
minseg_1535_0:0
max_406_0:6
max_908_0:0
max_1110_0:4
maxseg_1111_0:0
max_1336_0:0
maxseg_1337_0:2
max_1539_0:0
maxseg_1540_0:1
sll_444_0:0
sllseg_750_0:0
sll_913_0:0
sllseg_914_0:0
sll_1115_0:0
sllseg_1116_0:0
sll_1341_0:0
sllseg_1342_0:0
maxseg_1348_0:2
maxseg_1122_0:2
min_1547_0:7
minseg_1548_0:0
maxseg_920_0:7
min_1353_0:4
minseg_1354_0:1
min_1552_0:7
minseg_1553_0:0
maxseg_756_0:1
min_1127_0:0
minseg_1128_0:2
min_1358_0:4
minseg_1359_0:1
min_1557_0:7
minseg_1558_0:0
len_447_0:2
lenseg_759_0:1
len_925_0:4
lenseg_926_0:4
len_1132_0:0
lenseg_1133_0:2
len_1363_0:0
lenseg_1364_0:0
min_450_0:0
minseg_931_0:0
min_1137_0:0
minseg_1138_0:2
min_1368_0:4
minseg_1369_0:1
min_1562_0:7
minseg_1563_0:0
max_453_0:2
max_1142_0:0
maxseg_1143_0:7
max_1373_0:4
maxseg_1374_0:2
max_1567_0:0
maxseg_1568_0:2
len_648_0:1
lenseg_649_0:2
len_769_0:1
lenseg_770_0:2
len_940_0:1
lenseg_941_0:2
len_1147_0:1
lenseg_1148_0:2
min_946_0:6
minseg_947_0:0
min_1153_0:6
minseg_1154_0:0
min_1379_0:6
minseg_1380_0:0
min_1573_0:6
minseg_1574_0:0
sll_498_0:0
sll_779_0:0
sllseg_780_0:0
sll_952_0:0
sllseg_953_0:0
sll_1159_0:0
sllseg_1160_0:0
sll_1385_0:0
sllseg_1386_0:0
maxseg_1392_0:2
maxseg_1166_0:2
min_1582_0:1
minseg_1583_0:4
maxseg_959_0:2
min_1397_0:1
minseg_1398_0:4
min_1587_0:1
minseg_1588_0:4
maxseg_786_0:1
min_1171_0:1
minseg_1172_0:4
min_1402_0:1
minseg_1403_0:4
min_1592_0:1
minseg_1593_0:4
len_501_0:4
len_788_0:4
lenseg_789_0:4
len_964_0:4
lenseg_965_0:0
len_1176_0:4
lenseg_1177_0:0
len_1407_0:4
lenseg_1408_0:0
min_504_0:0
min_969_0:0
minseg_970_0:2
min_1181_0:1
minseg_1182_0:4
min_1412_0:1
minseg_1413_0:4
min_1597_0:1
minseg_1598_0:4
max_507_0:2
max_974_0:2
max_1186_0:1
maxseg_1187_0:2
max_1417_0:1
maxseg_1418_0:2
max_1602_0:1
maxseg_1603_0:2
sll_516_0:0
sll_799_0:0
sllseg_800_0:0
sll_979_0:0
sllseg_980_0:0
sll_1191_0:0
sllseg_1192_0:0
sll_1422_0:0
sllseg_1423_0:0
maxseg_1429_0:2
maxseg_1198_0:2
min_1610_0:1
minseg_1611_0:4
maxseg_986_0:2
min_1434_0:1
minseg_1435_0:4
min_1615_0:4
minseg_1616_0:4
maxseg_806_0:2
min_1203_0:1
minseg_1204_0:4
min_1439_0:6
minseg_1440_0:3
min_1620_0:3
minseg_1621_0:4
len_519_0:6
len_808_0:0
lenseg_809_0:2
len_991_0:4
lenseg_992_0:0
len_1208_0:4
lenseg_1209_0:0
len_1444_0:4
lenseg_1445_0:0
min_522_0:0
min_996_0:2
minseg_997_0:5
min_1213_0:0
minseg_1214_0:4
min_1449_0:2
minseg_1450_0:6
min_1625_0:0
minseg_1626_0:2
max_525_0:4
max_1001_0:0
max_1218_0:1
maxseg_1219_0:4
max_1454_0:1
maxseg_1455_0:2
max_1630_0:1
maxseg_1631_0:2

BEG FIND
Level 1  intsize = 3
 * After optims it became = 40275 was 21747
 * After all optims it became = 24640
 finder  hits = 56756	 bstoreObjs=35995	 sstorePages=56
hitcount 	1	27331	3
hitcount 	2	3370	3
hitcount 	3	3225	3
hitcount 	4	945	3
hitcount 	5	354	3
hitcount 	6	140	3
hitcount 	7	198	3
hitcount 	8	158	3
hitcount 	9	32	3
hitcount 	10	47	3
hitcount 	11	58	3
hitcount 	12	40	3
hitcount 	13	11	3
hitcount 	14	11	3
hitcount 	15	7	3
hitcount 	16	7	3
hitcount 	17	14	3
hitcount 	18	5	3
hitcount 	19	5	4
hitcount 	20	2	2
hitcount 	21	3	3
hitcount 	22	2	4
hitcount 	23	4	3
hitcount 	25	5	3
hitcount 	28	1	4
hitcount 	29	3	3
hitcount 	31	2	2
hitcount 	32	2	4
hitcount 	33	1	3
hitcount 	34	2	4
hitcount 	35	1	5
hitcount 	36	2	2
hitcount 	38	1	2
hitcount 	39	1	3
hitcount 	42	2	4
hitcount 	47	1	4
hitcount 	65	1	4
hitcount 	71	1	2
bucketsPerDepth 	3	1
bucketsPerDepth 	4	289
bucketsPerDepth 	5	734
* TIME TO ADD INPUT :  0.176 ms 
f# %assign: 11 clauses: 2168658 learn: 474 restart: 15 decision: 6465 propagated: 12306381
END FIND
!+ 10000000011010000110010100100111100000110001001000000010010001000000000101100010000011101000010010000110001011000010000100000000111101001
!+ H__0_395_175:1
H__4_395_176:0
H__1_395_176_165:0
H__1_395_176_168:0
H__18_391:3
H__6_395:1
H__0_391_179:0
H__0_391_180:0
H__1_391_182:3
H__1_391_184:2
H__1_391_186:1
H__1_391_187:1
H__8_391:7
H__1_391_191:1
H__1_391_193:0
H__18_392:3
H__0_392_179:0
H__0_392_180:1
H__1_392_182:2
H__1_392_184:0
H__1_392_186:0
H__1_392_187:1
H__8_392:1
H__1_392_191:2
H__1_392_193:0
H__18_393:0
H__0_393_179:0
H__0_393_180:1
H__1_393_182:3
H__1_393_184:4
H__1_393_186:0
H__1_393_187:4
H__8_393:3
H__1_393_191:1
H__1_393_193:4
H__0_397:0
H__1_398:1
H__0_396_175:0
H__4_396_176:1
H__1_396_176_165:1
H__1_396_176_168:2
H__18_394:3
H__6_396:0
H__0_394_179:0
H__0_394_180:1
H__1_394_182:0
H__1_394_184:1
H__1_394_186:0
H__1_394_187:0
H__8_394:7
H__1_394_191:5
H__1_394_193:4

BEG CHECK
 * After optims it became = 8088 was 21747
 TESTING HYPOTHESIS ITER 1
h = 1092  hasserts.size()= 2
SLICE SIZE = 276
c# %assign: 16 clauses: 2842 learn: 0 restart: 0 decision: 0 propagated: 156
 FOUND CONST: 1092= 88 | 103  = 1
 reduced size from 8088 to 7345
 TESTING HYPOTHESIS ITER 2
h = 86  hasserts.size()= 1
SLICE SIZE = 89
c# %assign: 32 clauses: 1185 learn: 0 restart: 0 decision: 0 propagated: 146
 FOUND CONST: 86= llocvars_22_2a_idx_1_0 < (0)  = 0
 reduced size from 7345 to 7332
 TESTING HYPOTHESIS ITER 3
h = 1086  hasserts.size()= 2
SLICE SIZE = 270
c# %assign: 16 clauses: 2842 learn: 0 restart: 0 decision: 0 propagated: 156
 FOUND CONST: 1086= 995 < (4)  = 1
 reduced size from 7332 to 7307
 TESTING HYPOTHESIS ITER 4
h = 2261  hasserts.size()= 2
SLICE SIZE = 326
c# %assign: 29 clauses: 2965 learn: 6 restart: 1 decision: 30 propagated: 1538
 FOUND CONST: 2261= 2260 < (4)  = 1
 reduced size from 7307 to 7259
 * Simulation optimized it to = 7259
Simulation didn't find a cex:  0.151 ms 
After all optim
c# %assign: 1 clauses: 125423 learn: 20779 restart: 4 decision: 93555 propagated: 920093
END CHECK
********  12	ftime= 999.719	ctime= 0.476

!% llocvars_22_2a_idx_0_0:2
llocvars_22_2a_idx_1_0:3
lintvars_23_2b_idx_0_0:1
lintvars_23_2b_idx_1_0:0
lnext_24_2c_idx_0_0:4
lnext_24_2c_idx_1_0:4
lnext_24_2c_idx_2_0:0
lsupernext_25_2d_idx_0_0:6
lsupernext_25_2d_idx_1_0:4
lsupernext_25_2d_idx_2_0:1
lkey_26_2e_idx_0_0:1
lkey_26_2e_idx_1_0:3
lkey_26_2e_idx_2_0:4
lsymbolic_27_2f_idx_0_0:0
lsymbolic_27_2f_idx_1_0:0
lsymbolic_27_2f_idx_2_0:0
lactive_28_30_idx_0_0:0
lactive_28_30_idx_1_0:0
lactive_28_30_idx_2_0:1
ret_value_29_31_0:7
new_symbolic_2a_32_idx_0_0:0
new_symbolic_2a_32_idx_1_0:0
new_symbolic_2a_32_idx_2_0:0
new_next_2b_33_idx_0_0:6
new_next_2b_33_idx_1_0:6
new_next_2b_33_idx_2_0:1
new_supernext_2c_34_idx_0_0:4
new_supernext_2c_34_idx_1_0:4
new_supernext_2c_34_idx_2_0:0
new_key_2d_35_idx_0_0:0
new_key_2d_35_idx_1_0:4
new_key_2d_35_idx_2_0:0
len_242_0:0
min_243_0:7
max_244_0:0
len_245_0:1
min_246_0:1
max_247_0:2
minseg_248_0:0
maxseg_249_0:4
len_250_0:2
min_251_0:0
max_252_0:2
minseg_253_0:3
maxseg_254_0:4
len_255_0:7
min_256_0:2
max_257_0:4
minseg_258_0:0
maxseg_259_0:1
min_678_0:2
minseg_679_0:0
min_821_0:7
minseg_822_0:0
min_1008_0:7
minseg_1009_0:0
min_1225_0:7
minseg_1226_0:0
len_603_0:7
lenseg_604_0:0
len_684_0:0
lenseg_685_0:0
len_827_0:0
lenseg_828_0:0
len_1014_0:0
lenseg_1015_0:0
sll_332_0:0
sllseg_690_0:0
sll_832_0:0
sllseg_833_0:0
sll_1019_0:0
sllseg_1020_0:0
sll_1230_0:0
sllseg_1231_0:0
maxseg_1237_0:6
maxseg_1026_0:6
min_1463_0:7
minseg_1464_0:0
maxseg_839_0:6
min_1242_0:7
minseg_1243_0:0
min_1468_0:5
minseg_1469_0:3
maxseg_696_0:1
min_1031_0:7
minseg_1032_0:0
min_1247_0:0
minseg_1248_0:4
min_1473_0:3
minseg_1474_0:0
len_335_0:1
lenseg_699_0:4
len_844_0:0
lenseg_845_0:0
len_1036_0:0
lenseg_1037_0:0
len_1252_0:0
lenseg_1253_0:0
min_338_0:0
minseg_850_0:4
min_1041_0:0
minseg_1042_0:0
min_1257_0:4
minseg_1258_0:0
min_1478_0:6
minseg_1479_0:0
max_341_0:4
max_1046_0:0
maxseg_1047_0:4
max_1262_0:0
maxseg_1263_0:1
max_1483_0:0
maxseg_1484_0:0
sll_350_0:0
sllseg_710_0:0
sll_859_0:0
sllseg_860_0:0
sll_1051_0:0
sllseg_1052_0:0
sll_1267_0:0
sllseg_1268_0:0
maxseg_1274_0:6
maxseg_1058_0:0
min_1491_0:7
minseg_1492_0:0
maxseg_866_0:4
min_1279_0:1
minseg_1280_0:0
min_1496_0:1
minseg_1497_0:1
maxseg_716_0:4
min_1063_0:1
minseg_1064_0:0
min_1284_0:3
minseg_1285_0:2
min_1501_0:0
minseg_1502_0:4
len_353_0:2
lenseg_719_0:4
len_871_0:1
lenseg_872_0:0
len_1068_0:3
lenseg_1069_0:2
len_1289_0:0
lenseg_1290_0:0
min_356_0:0
minseg_877_0:3
min_1073_0:0
minseg_1074_0:0
min_1294_0:0
minseg_1295_0:0
min_1506_0:2
minseg_1507_0:4
max_359_0:2
max_1078_0:2
maxseg_1079_0:0
max_1299_0:0
maxseg_1300_0:0
max_1511_0:0
maxseg_1512_0:0
sll_397_0:0
sll_729_0:1
sllseg_730_0:0
sll_886_0:0
sllseg_887_0:0
sll_1083_0:0
sllseg_1084_0:0
sll_1304_0:0
sllseg_1305_0:1
maxseg_1311_0:6
maxseg_1090_0:0
min_1519_0:0
minseg_1520_0:0
maxseg_893_0:5
min_1316_0:4
minseg_1317_0:2
min_1524_0:0
minseg_1525_0:5
maxseg_736_0:2
min_1095_0:4
minseg_1096_0:0
min_1321_0:6
minseg_1322_0:0
min_1529_0:0
minseg_1530_0:0
len_400_0:6
len_738_0:0
lenseg_739_0:4
len_898_0:4
lenseg_899_0:4
len_1100_0:0
lenseg_1101_0:1
len_1326_0:1
lenseg_1327_0:2
min_403_0:0
min_903_0:4
minseg_904_0:2
min_1105_0:2
minseg_1106_0:4
min_1331_0:0
minseg_1332_0:0
min_1534_0:0
minseg_1535_0:4
max_406_0:2
max_908_0:4
max_1110_0:0
maxseg_1111_0:6
max_1336_0:4
maxseg_1337_0:0
max_1539_0:2
maxseg_1540_0:0
sll_444_0:0
sllseg_750_0:0
sll_913_0:0
sllseg_914_0:0
sll_1115_0:0
sllseg_1116_0:0
sll_1341_0:0
sllseg_1342_0:0
maxseg_1348_0:6
maxseg_1122_0:6
min_1547_0:7
minseg_1548_0:0
maxseg_920_0:6
min_1353_0:7
minseg_1354_0:0
min_1552_0:7
minseg_1553_0:0
maxseg_756_0:1
min_1127_0:7
minseg_1128_0:0
min_1358_0:7
minseg_1359_0:0
min_1557_0:7
minseg_1558_0:0
len_447_0:0
lenseg_759_0:2
len_925_0:0
lenseg_926_0:0
len_1132_0:0
lenseg_1133_0:0
len_1363_0:0
lenseg_1364_0:0
min_450_0:2
minseg_931_0:0
min_1137_0:7
minseg_1138_0:0
min_1368_0:7
minseg_1369_0:0
min_1562_0:7
minseg_1563_0:0
max_453_0:2
max_1142_0:0
maxseg_1143_0:6
max_1373_0:0
maxseg_1374_0:6
max_1567_0:0
maxseg_1568_0:6
len_648_0:0
lenseg_649_0:0
len_769_0:0
lenseg_770_0:0
len_940_0:0
lenseg_941_0:0
len_1147_0:0
lenseg_1148_0:0
min_946_0:7
minseg_947_0:0
min_1153_0:7
minseg_1154_0:0
min_1379_0:7
minseg_1380_0:0
min_1573_0:7
minseg_1574_0:0
sll_498_0:0
sll_779_0:0
sllseg_780_0:0
sll_952_0:0
sllseg_953_0:0
sll_1159_0:0
sllseg_1160_0:0
sll_1385_0:0
sllseg_1386_0:0
maxseg_1392_0:6
maxseg_1166_0:6
min_1582_0:7
minseg_1583_0:0
maxseg_959_0:6
min_1397_0:7
minseg_1398_0:0
min_1587_0:7
minseg_1588_0:0
maxseg_786_0:6
min_1171_0:7
minseg_1172_0:0
min_1402_0:7
minseg_1403_0:0
min_1592_0:7
minseg_1593_0:0
len_501_0:0
len_788_0:0
lenseg_789_0:0
len_964_0:0
lenseg_965_0:0
len_1176_0:0
lenseg_1177_0:0
len_1407_0:0
lenseg_1408_0:0
min_504_0:7
min_969_0:7
minseg_970_0:0
min_1181_0:7
minseg_1182_0:0
min_1412_0:7
minseg_1413_0:0
min_1597_0:7
minseg_1598_0:0
max_507_0:0
max_974_0:0
max_1186_0:0
maxseg_1187_0:6
max_1417_0:0
maxseg_1418_0:6
max_1602_0:0
maxseg_1603_0:6
sll_516_0:0
sll_799_0:0
sllseg_800_0:0
sll_979_0:0
sllseg_980_0:0
sll_1191_0:0
sllseg_1192_0:0
sll_1422_0:0
sllseg_1423_0:0
maxseg_1429_0:6
maxseg_1198_0:6
min_1610_0:7
minseg_1611_0:0
maxseg_986_0:6
min_1434_0:7
minseg_1435_0:0
min_1615_0:0
minseg_1616_0:1
maxseg_806_0:1
min_1203_0:7
minseg_1204_0:0
min_1439_0:4
minseg_1440_0:1
min_1620_0:6
minseg_1621_0:0
len_519_0:7
len_808_0:7
lenseg_809_0:0
len_991_0:0
lenseg_992_0:0
len_1208_0:0
lenseg_1209_0:0
len_1444_0:0
lenseg_1445_0:0
min_522_0:2
min_996_0:2
minseg_997_0:0
min_1213_0:0
minseg_1214_0:6
min_1449_0:2
minseg_1450_0:4
min_1625_0:0
minseg_1626_0:6
max_525_0:4
max_1001_0:4
max_1218_0:0
maxseg_1219_0:6
max_1454_0:0
maxseg_1455_0:0
max_1630_0:0
maxseg_1631_0:2

BEG FIND
Level 1  intsize = 3
 * After optims it became = 45704 was 21747
 * After all optims it became = 31955
 finder  hits = 66118	 bstoreObjs=75135	 sstorePages=122
hitcount 	0	34681	6
hitcount 	1	30322	3
hitcount 	2	3863	3
hitcount 	3	3801	3
hitcount 	4	997	3
hitcount 	5	496	3
hitcount 	6	174	3
hitcount 	7	221	3
hitcount 	8	169	3
hitcount 	9	52	4
hitcount 	10	60	4
hitcount 	11	67	4
hitcount 	12	82	3
hitcount 	13	16	4
hitcount 	14	18	4
hitcount 	15	12	4
hitcount 	16	14	4
hitcount 	17	21	3
hitcount 	18	7	4
hitcount 	19	9	4
hitcount 	20	2	2
hitcount 	21	4	4
hitcount 	22	1	5
hitcount 	23	4	3
hitcount 	24	2	4
hitcount 	25	7	3
hitcount 	27	2	4
hitcount 	28	2	5
hitcount 	29	4	4
hitcount 	32	2	4
hitcount 	33	1	3
hitcount 	34	1	4
hitcount 	35	4	3
hitcount 	36	5	4
hitcount 	38	1	2
hitcount 	42	1	4
hitcount 	44	1	3
hitcount 	47	2	4
hitcount 	62	1	5
hitcount 	65	1	4
hitcount 	68	1	5
hitcount 	71	1	2
hitcount 	93	1	5
hitcount 	116	1	5
hitcount 	118	1	5
bucketsPerDepth 	7	87
bucketsPerDepth 	8	413
bucketsPerDepth 	9	360
bucketsPerDepth 	10	133
bucketsPerDepth 	11	28
bucketsPerDepth 	12	3
* TIME TO ADD INPUT :  999.165 ms 
f# %assign: 10 clauses: 2356413 learn: 530 restart: 16 decision: 6714 propagated: 15972038
END FIND
!+ 10000000000110010110010001101001100000110001001000000010011101000000000101100010000001101000100000000100001001000010000000000001001100001
!+ H__0_395_175:1
H__4_395_176:0
H__1_395_176_165:0
H__1_395_176_168:0
H__18_391:4
H__6_395:1
H__0_391_179:0
H__0_391_180:1
H__1_391_182:3
H__1_391_184:2
H__1_391_186:4
H__1_391_187:5
H__8_391:4
H__1_391_191:1
H__1_391_193:0
H__18_392:3
H__0_392_179:0
H__0_392_180:1
H__1_392_182:2
H__1_392_184:0
H__1_392_186:0
H__1_392_187:1
H__8_392:7
H__1_392_191:2
H__1_392_193:0
H__18_393:0
H__0_393_179:0
H__0_393_180:1
H__1_393_182:3
H__1_393_184:4
H__1_393_186:0
H__1_393_187:0
H__8_393:3
H__1_393_191:1
H__1_393_193:2
H__0_397:0
H__1_398:0
H__0_396_175:0
H__4_396_176:1
H__1_396_176_165:0
H__1_396_176_168:2
H__18_394:2
H__6_396:0
H__0_394_179:0
H__0_394_180:1
H__1_394_182:0
H__1_394_184:0
H__1_394_186:0
H__1_394_187:4
H__8_394:4
H__1_394_191:1
H__1_394_193:4

BEG CHECK
 * After optims it became = 10644 was 21747
 TESTING HYPOTHESIS ITER 1
h = 1103  hasserts.size()= 2
SLICE SIZE = 276
c# %assign: 16 clauses: 2842 learn: 0 restart: 0 decision: 0 propagated: 156
 FOUND CONST: 1103= 88 | 103  = 1
 reduced size from 10644 to 9901
 TESTING HYPOTHESIS ITER 2
h = 86  hasserts.size()= 1
SLICE SIZE = 89
c# %assign: 32 clauses: 1185 learn: 0 restart: 0 decision: 0 propagated: 146
 FOUND CONST: 86= llocvars_22_2a_idx_1_0 < (0)  = 0
 reduced size from 9901 to 9888
 TESTING HYPOTHESIS ITER 3
h = 1033  hasserts.size()= 2
SLICE SIZE = 270
c# %assign: 16 clauses: 2842 learn: 0 restart: 0 decision: 0 propagated: 156
 FOUND CONST: 1033= 995 < (4)  = 1
 reduced size from 9888 to 9851
 TESTING HYPOTHESIS ITER 4
h = 2258  hasserts.size()= 2
SLICE SIZE = 326
c# %assign: 29 clauses: 2965 learn: 6 restart: 1 decision: 30 propagated: 1538
 FOUND CONST: 2258= 2257 < (4)  = 1
 reduced size from 9851 to 9803
 * Simulation optimized it to = 9803
Simulation didn't find a cex:  0.193 ms 
After all optim
c# %assign: 0 clauses: 169178 learn: 35412 restart: 3 decision: 26712 propagated: 1071180
END CHECK
********  13	ftime= 1999.23	ctime= 0.584

!% llocvars_22_2a_idx_0_0:0
llocvars_22_2a_idx_1_0:3
lintvars_23_2b_idx_0_0:0
lintvars_23_2b_idx_1_0:0
lnext_24_2c_idx_0_0:4
lnext_24_2c_idx_1_0:4
lnext_24_2c_idx_2_0:4
lsupernext_25_2d_idx_0_0:2
lsupernext_25_2d_idx_1_0:2
lsupernext_25_2d_idx_2_0:4
lkey_26_2e_idx_0_0:6
lkey_26_2e_idx_1_0:4
lkey_26_2e_idx_2_0:0
lsymbolic_27_2f_idx_0_0:0
lsymbolic_27_2f_idx_1_0:0
lsymbolic_27_2f_idx_2_0:1
lactive_28_30_idx_0_0:0
lactive_28_30_idx_1_0:0
lactive_28_30_idx_2_0:1
ret_value_29_31_0:1
new_symbolic_2a_32_idx_0_0:1
new_symbolic_2a_32_idx_1_0:0
new_symbolic_2a_32_idx_2_0:0
new_next_2b_33_idx_0_0:0
new_next_2b_33_idx_1_0:3
new_next_2b_33_idx_2_0:4
new_supernext_2c_34_idx_0_0:1
new_supernext_2c_34_idx_1_0:2
new_supernext_2c_34_idx_2_0:0
new_key_2d_35_idx_0_0:0
new_key_2d_35_idx_1_0:6
new_key_2d_35_idx_2_0:0
len_242_0:0
min_243_0:7
max_244_0:0
len_245_0:1
min_246_0:1
max_247_0:2
minseg_248_0:1
maxseg_249_0:1
len_250_0:2
min_251_0:1
max_252_0:5
minseg_253_0:2
maxseg_254_0:4
len_255_0:2
min_256_0:0
max_257_0:2
minseg_258_0:2
maxseg_259_0:3
min_678_0:0
minseg_679_0:2
min_821_0:4
minseg_822_0:0
min_1008_0:7
minseg_1009_0:4
min_1225_0:7
minseg_1226_0:4
len_603_0:2
lenseg_604_0:3
len_684_0:4
lenseg_685_0:4
len_827_0:0
lenseg_828_0:2
len_1014_0:0
lenseg_1015_0:2
sll_332_0:0
sllseg_690_0:0
sll_832_0:0
sllseg_833_0:0
sll_1019_0:0
sllseg_1020_0:0
sll_1230_0:0
sllseg_1231_0:0
maxseg_1237_0:2
maxseg_1026_0:1
min_1463_0:7
minseg_1464_0:4
maxseg_839_0:1
min_1242_0:4
minseg_1243_0:0
min_1468_0:4
minseg_1469_0:0
maxseg_696_0:3
min_1031_0:1
minseg_1032_0:1
min_1247_0:4
minseg_1248_0:1
min_1473_0:0
minseg_1474_0:2
len_335_0:1
lenseg_699_0:2
len_844_0:1
lenseg_845_0:2
len_1036_0:4
lenseg_1037_0:4
len_1252_0:0
lenseg_1253_0:2
min_338_0:0
minseg_850_0:1
min_1041_0:0
minseg_1042_0:4
min_1257_0:0
minseg_1258_0:7
min_1478_0:5
minseg_1479_0:0
max_341_0:2
max_1046_0:2
maxseg_1047_0:2
max_1262_0:4
maxseg_1263_0:4
max_1483_0:0
maxseg_1484_0:4
sll_350_0:1
sllseg_710_0:0
sll_859_0:1
sllseg_860_0:1
sll_1051_0:0
sllseg_1052_0:0
sll_1267_0:1
sllseg_1268_0:0
maxseg_1274_0:4
maxseg_1058_0:1
min_1491_0:0
minseg_1492_0:0
maxseg_866_0:4
min_1279_0:1
minseg_1280_0:6
min_1496_0:6
minseg_1497_0:5
maxseg_716_0:4
min_1063_0:3
minseg_1064_0:1
min_1284_0:6
minseg_1285_0:3
min_1501_0:0
minseg_1502_0:2
len_353_0:0
lenseg_719_0:0
len_871_0:4
lenseg_872_0:0
len_1068_0:4
lenseg_1069_0:0
len_1289_0:1
lenseg_1290_0:1
min_356_0:3
minseg_877_0:0
min_1073_0:2
minseg_1074_0:1
min_1294_0:1
minseg_1295_0:3
min_1506_0:1
minseg_1507_0:3
max_359_0:2
max_1078_0:4
maxseg_1079_0:5
max_1299_0:2
maxseg_1300_0:0
max_1511_0:1
maxseg_1512_0:0
sll_397_0:0
sll_729_0:0
sllseg_730_0:0
sll_886_0:0
sllseg_887_0:0
sll_1083_0:0
sllseg_1084_0:0
sll_1304_0:0
sllseg_1305_0:0
maxseg_1311_0:2
maxseg_1090_0:1
min_1519_0:7
minseg_1520_0:4
maxseg_893_0:4
min_1316_0:4
minseg_1317_0:0
min_1524_0:0
minseg_1525_0:4
maxseg_736_0:0
min_1095_0:1
minseg_1096_0:2
min_1321_0:1
minseg_1322_0:0
min_1529_0:0
minseg_1530_0:2
len_400_0:0
len_738_0:2
lenseg_739_0:4
len_898_0:2
lenseg_899_0:0
len_1100_0:4
lenseg_1101_0:4
len_1326_0:0
lenseg_1327_0:2
min_403_0:4
min_903_0:1
minseg_904_0:0
min_1105_0:5
minseg_1106_0:5
min_1331_0:6
minseg_1332_0:6
min_1534_0:2
minseg_1535_0:5
max_406_0:4
max_908_0:0
max_1110_0:5
maxseg_1111_0:0
max_1336_0:4
maxseg_1337_0:1
max_1539_0:0
maxseg_1540_0:0
sll_444_0:0
sllseg_750_0:1
sll_913_0:0
sllseg_914_0:0
sll_1115_0:0
sllseg_1116_0:0
sll_1341_0:0
sllseg_1342_0:0
maxseg_1348_0:2
maxseg_1122_0:1
min_1547_0:7
minseg_1548_0:4
maxseg_920_0:1
min_1353_0:4
minseg_1354_0:0
min_1552_0:7
minseg_1553_0:4
maxseg_756_0:2
min_1127_0:1
minseg_1128_0:1
min_1358_0:4
minseg_1359_0:0
min_1557_0:7
minseg_1558_0:4
len_447_0:2
lenseg_759_0:1
len_925_0:1
lenseg_926_0:2
len_1132_0:4
lenseg_1133_0:4
len_1363_0:0
lenseg_1364_0:2
min_450_0:0
minseg_931_0:4
min_1137_0:1
minseg_1138_0:1
min_1368_0:4
minseg_1369_0:0
min_1562_0:7
minseg_1563_0:4
max_453_0:4
max_1142_0:2
maxseg_1143_0:1
max_1373_0:4
maxseg_1374_0:1
max_1567_0:0
maxseg_1568_0:2
len_648_0:1
lenseg_649_0:2
len_769_0:4
lenseg_770_0:4
len_940_0:0
lenseg_941_0:2
len_1147_0:0
lenseg_1148_0:2
min_946_0:1
minseg_947_0:1
min_1153_0:4
minseg_1154_0:0
min_1379_0:7
minseg_1380_0:4
min_1573_0:7
minseg_1574_0:4
sll_498_0:1
sll_779_0:1
sllseg_780_0:0
sll_952_0:0
sllseg_953_0:0
sll_1159_0:0
sllseg_1160_0:0
sll_1385_0:0
sllseg_1386_0:0
maxseg_1392_0:2
maxseg_1166_0:2
min_1582_0:0
minseg_1583_0:0
maxseg_959_0:2
min_1397_0:0
minseg_1398_0:0
min_1587_0:0
minseg_1588_0:0
maxseg_786_0:6
min_1171_0:0
minseg_1172_0:0
min_1402_0:0
minseg_1403_0:0
min_1592_0:0
minseg_1593_0:0
len_501_0:1
len_788_0:1
lenseg_789_0:2
len_964_0:0
lenseg_965_0:4
len_1176_0:0
lenseg_1177_0:4
len_1407_0:0
lenseg_1408_0:4
min_504_0:0
min_969_0:0
minseg_970_0:2
min_1181_0:0
minseg_1182_0:0
min_1412_0:0
minseg_1413_0:0
min_1597_0:0
minseg_1598_0:0
max_507_0:0
max_974_0:0
max_1186_0:0
maxseg_1187_0:2
max_1417_0:0
maxseg_1418_0:2
max_1602_0:0
maxseg_1603_0:2
sll_516_0:1
sll_799_0:1
sllseg_800_0:0
sll_979_0:0
sllseg_980_0:0
sll_1191_0:1
sllseg_1192_0:0
sll_1422_0:0
sllseg_1423_0:0
maxseg_1429_0:1
maxseg_1198_0:4
min_1610_0:2
minseg_1611_0:4
maxseg_986_0:1
min_1434_0:4
minseg_1435_0:4
min_1615_0:2
minseg_1616_0:4
maxseg_806_0:4
min_1203_0:2
minseg_1204_0:4
min_1439_0:4
minseg_1440_0:4
min_1620_0:2
minseg_1621_0:4
len_519_0:4
len_808_0:4
lenseg_809_0:4
len_991_0:2
lenseg_992_0:4
len_1208_0:4
lenseg_1209_0:4
len_1444_0:2
lenseg_1445_0:4
min_522_0:4
min_996_0:4
minseg_997_0:4
min_1213_0:2
minseg_1214_0:4
min_1449_0:4
minseg_1450_0:4
min_1625_0:2
minseg_1626_0:4
max_525_0:2
max_1001_0:2
max_1218_0:4
maxseg_1219_0:1
max_1454_0:2
maxseg_1455_0:4
max_1630_0:4
maxseg_1631_0:1

BEG FIND
Level 1  intsize = 3
 * After optims it became = 47712 was 21747
 * After all optims it became = 35901
 finder  hits = 77431	 bstoreObjs=118233	 sstorePages=192
hitcount 	0	72202	6
hitcount 	1	34278	4
hitcount 	2	4330	4
hitcount 	3	4242	4
hitcount 	4	1325	4
hitcount 	5	587	4
hitcount 	6	270	3
hitcount 	7	249	4
hitcount 	8	197	3
hitcount 	9	80	5
hitcount 	10	78	5
hitcount 	11	76	5
hitcount 	12	63	4
hitcount 	13	68	4
hitcount 	14	23	3
hitcount 	15	25	5
hitcount 	16	15	4
hitcount 	17	27	4
hitcount 	18	8	4
hitcount 	19	10	5
hitcount 	20	6	3
hitcount 	21	7	5
hitcount 	22	2	5
hitcount 	23	6	5
hitcount 	24	2	5
hitcount 	25	7	3
hitcount 	27	6	5
hitcount 	28	2	5
hitcount 	29	7	5
hitcount 	30	1	7
hitcount 	31	1	6
hitcount 	32	3	4
hitcount 	33	1	3
hitcount 	34	1	4
hitcount 	35	1	5
hitcount 	36	6	4
hitcount 	38	2	4
hitcount 	39	3	2
hitcount 	42	2	3
hitcount 	47	1	4
hitcount 	49	1	3
hitcount 	52	1	4
hitcount 	58	1	3
hitcount 	59	1	6
hitcount 	62	1	5
hitcount 	65	1	4
hitcount 	68	1	5
hitcount 	71	1	2
hitcount 	81	1	6
hitcount 	93	1	5
hitcount 	103	1	5
hitcount 	116	1	5
hitcount 	118	1	5
bucketsPerDepth 	8	10
bucketsPerDepth 	9	171
bucketsPerDepth 	10	416
bucketsPerDepth 	11	270
bucketsPerDepth 	12	118
bucketsPerDepth 	13	28
bucketsPerDepth 	14	10
bucketsPerDepth 	15	1
* TIME TO ADD INPUT :  0.177 ms 
f# %assign: 10 clauses: 2555988 learn: 557 restart: 17 decision: 6959 propagated: 17832475
END FIND
!+ 10000000000110010001010010001001100000110001001000000000011100000000000101110010000001101001100010000000001001000010000000011001001101001
!+ H__0_395_175:1
H__4_395_176:0
H__1_395_176_165:0
H__1_395_176_168:0
H__18_391:4
H__6_395:1
H__0_391_179:0
H__0_391_180:1
H__1_391_182:4
H__1_391_184:2
H__1_391_186:2
H__1_391_187:4
H__8_391:4
H__1_391_191:1
H__1_391_193:0
H__18_392:3
H__0_392_179:0
H__0_392_180:1
H__1_392_182:2
H__1_392_184:0
H__1_392_186:0
H__1_392_187:0
H__8_392:7
H__1_392_191:0
H__1_392_193:0
H__18_393:0
H__0_393_179:0
H__0_393_180:1
H__1_393_182:7
H__1_393_184:4
H__1_393_186:0
H__1_393_187:0
H__8_393:3
H__1_393_191:1
H__1_393_193:3
H__0_397:0
H__1_398:1
H__0_396_175:0
H__4_396_176:0
H__1_396_176_165:0
H__1_396_176_168:2
H__18_394:2
H__6_396:0
H__0_394_179:0
H__0_394_180:1
H__1_394_182:0
H__1_394_184:0
H__1_394_186:6
H__1_394_187:4
H__8_394:4
H__1_394_191:5
H__1_394_193:4

BEG CHECK
 * After optims it became = 8068 was 21747
 TESTING HYPOTHESIS ITER 1
h = 1103  hasserts.size()= 2
SLICE SIZE = 276
c# %assign: 16 clauses: 2842 learn: 0 restart: 0 decision: 0 propagated: 156
 FOUND CONST: 1103= 88 | 103  = 1
 reduced size from 8068 to 7325
 TESTING HYPOTHESIS ITER 2
h = 86  hasserts.size()= 1
SLICE SIZE = 89
c# %assign: 32 clauses: 1185 learn: 0 restart: 0 decision: 0 propagated: 146
 FOUND CONST: 86= llocvars_22_2a_idx_1_0 < (0)  = 0
 reduced size from 7325 to 7312
 TESTING HYPOTHESIS ITER 3
h = 1033  hasserts.size()= 2
SLICE SIZE = 270
c# %assign: 16 clauses: 2842 learn: 0 restart: 0 decision: 0 propagated: 156
 FOUND CONST: 1033= 995 < (4)  = 1
 reduced size from 7312 to 7275
 TESTING HYPOTHESIS ITER 4
h = 2258  hasserts.size()= 2
SLICE SIZE = 326
c# %assign: 29 clauses: 2965 learn: 6 restart: 1 decision: 30 propagated: 1538
 FOUND CONST: 2258= 2257 < (4)  = 1
 reduced size from 7275 to 7227
 * Simulation optimized it to = 7227
Simulation didn't find a cex:  0.152 ms 
After all optim
c# %assign: 0 clauses: 124080 learn: 30144 restart: 3 decision: 40594 propagated: 552709
END CHECK
********  14	ftime= 999.772	ctime= 0.438

!% llocvars_22_2a_idx_0_0:4
llocvars_22_2a_idx_1_0:1
lintvars_23_2b_idx_0_0:1
lintvars_23_2b_idx_1_0:0
lnext_24_2c_idx_0_0:3
lnext_24_2c_idx_1_0:4
lnext_24_2c_idx_2_0:0
lsupernext_25_2d_idx_0_0:4
lsupernext_25_2d_idx_1_0:2
lsupernext_25_2d_idx_2_0:4
lkey_26_2e_idx_0_0:1
lkey_26_2e_idx_1_0:2
lkey_26_2e_idx_2_0:0
lsymbolic_27_2f_idx_0_0:0
lsymbolic_27_2f_idx_1_0:0
lsymbolic_27_2f_idx_2_0:0
lactive_28_30_idx_0_0:1
lactive_28_30_idx_1_0:0
lactive_28_30_idx_2_0:1
ret_value_29_31_0:0
new_symbolic_2a_32_idx_0_0:0
new_symbolic_2a_32_idx_1_0:0
new_symbolic_2a_32_idx_2_0:1
new_next_2b_33_idx_0_0:4
new_next_2b_33_idx_1_0:3
new_next_2b_33_idx_2_0:1
new_supernext_2c_34_idx_0_0:0
new_supernext_2c_34_idx_1_0:4
new_supernext_2c_34_idx_2_0:4
new_key_2d_35_idx_0_0:1
new_key_2d_35_idx_1_0:4
new_key_2d_35_idx_2_0:2
len_242_0:0
min_243_0:7
max_244_0:0
len_245_0:2
min_246_0:0
max_247_0:2
minseg_248_0:0
maxseg_249_0:0
len_250_0:2
min_251_0:0
max_252_0:1
minseg_253_0:0
maxseg_254_0:0
len_255_0:1
min_256_0:0
max_257_0:0
minseg_258_0:1
maxseg_259_0:2
min_678_0:0
minseg_679_0:0
min_821_0:0
minseg_822_0:1
min_1008_0:7
minseg_1009_0:0
min_1225_0:7
minseg_1226_0:0
len_603_0:2
lenseg_604_0:1
len_684_0:1
lenseg_685_0:4
len_827_0:0
lenseg_828_0:4
len_1014_0:0
lenseg_1015_0:4
sll_332_0:0
sllseg_690_0:0
sll_832_0:0
sllseg_833_0:0
sll_1019_0:0
sllseg_1020_0:0
sll_1230_0:0
sllseg_1231_0:0
maxseg_1237_0:7
maxseg_1026_0:2
min_1463_0:7
minseg_1464_0:0
maxseg_839_0:0
min_1242_0:5
minseg_1243_0:4
min_1468_0:0
minseg_1469_0:4
maxseg_696_0:0
min_1031_0:0
minseg_1032_0:0
min_1247_0:1
minseg_1248_0:1
min_1473_0:0
minseg_1474_0:0
len_335_0:1
lenseg_699_0:4
len_844_0:2
lenseg_845_0:4
len_1036_0:4
lenseg_1037_0:2
len_1252_0:0
lenseg_1253_0:4
min_338_0:4
minseg_850_0:2
min_1041_0:6
minseg_1042_0:0
min_1257_0:4
minseg_1258_0:0
min_1478_0:2
minseg_1479_0:0
max_341_0:2
max_1046_0:1
maxseg_1047_0:1
max_1262_0:5
maxseg_1263_0:1
max_1483_0:0
maxseg_1484_0:0
sll_350_0:0
sllseg_710_0:1
sll_859_0:0
sllseg_860_0:0
sll_1051_0:0
sllseg_1052_0:0
sll_1267_0:0
sllseg_1268_0:1
maxseg_1274_0:6
maxseg_1058_0:4
min_1491_0:5
minseg_1492_0:0
maxseg_866_0:0
min_1279_0:3
minseg_1280_0:3
min_1496_0:0
minseg_1497_0:4
maxseg_716_0:1
min_1063_0:0
minseg_1064_0:0
min_1284_0:0
minseg_1285_0:0
min_1501_0:4
minseg_1502_0:4
len_353_0:5
lenseg_719_0:0
len_871_0:6
lenseg_872_0:0
len_1068_0:1
lenseg_1069_0:0
len_1289_0:4
lenseg_1290_0:1
min_356_0:4
minseg_877_0:2
min_1073_0:2
minseg_1074_0:4
min_1294_0:7
minseg_1295_0:1
min_1506_0:0
minseg_1507_0:1
max_359_0:4
max_1078_0:0
maxseg_1079_0:2
max_1299_0:0
maxseg_1300_0:3
max_1511_0:0
maxseg_1512_0:0
sll_397_0:0
sll_729_0:0
sllseg_730_0:0
sll_886_0:0
sllseg_887_0:0
sll_1083_0:0
sllseg_1084_0:0
sll_1304_0:0
sllseg_1305_0:0
maxseg_1311_0:7
maxseg_1090_0:7
min_1519_0:7
minseg_1520_0:0
maxseg_893_0:2
min_1316_0:7
minseg_1317_0:0
min_1524_0:2
minseg_1525_0:0
maxseg_736_0:0
min_1095_0:5
minseg_1096_0:4
min_1321_0:4
minseg_1322_0:0
min_1529_0:0
minseg_1530_0:6
len_400_0:0
len_738_0:2
lenseg_739_0:0
len_898_0:4
lenseg_899_0:2
len_1100_0:0
lenseg_1101_0:4
len_1326_0:0
lenseg_1327_0:4
min_403_0:4
min_903_0:2
minseg_904_0:0
min_1105_0:2
minseg_1106_0:0
min_1331_0:0
minseg_1332_0:0
min_1534_0:0
minseg_1535_0:1
max_406_0:0
max_908_0:4
max_1110_0:5
maxseg_1111_0:1
max_1336_0:0
maxseg_1337_0:4
max_1539_0:0
maxseg_1540_0:4
sll_444_0:0
sllseg_750_0:0
sll_913_0:0
sllseg_914_0:0
sll_1115_0:0
sllseg_1116_0:0
sll_1341_0:0
sllseg_1342_0:0
maxseg_1348_0:7
maxseg_1122_0:2
min_1547_0:7
minseg_1548_0:0
maxseg_920_0:0
min_1353_0:5
minseg_1354_0:4
min_1552_0:7
minseg_1553_0:0
maxseg_756_0:3
min_1127_0:0
minseg_1128_0:0
min_1358_0:5
minseg_1359_0:4
min_1557_0:7
minseg_1558_0:0
len_447_0:7
lenseg_759_0:0
len_925_0:2
lenseg_926_0:4
len_1132_0:4
lenseg_1133_0:2
len_1363_0:0
lenseg_1364_0:4
min_450_0:3
minseg_931_0:1
min_1137_0:0
minseg_1138_0:0
min_1368_0:5
minseg_1369_0:4
min_1562_0:7
minseg_1563_0:0
max_453_0:0
max_1142_0:1
maxseg_1143_0:0
max_1373_0:5
maxseg_1374_0:2
max_1567_0:0
maxseg_1568_0:7
len_648_0:1
lenseg_649_0:4
len_769_0:0
lenseg_770_0:4
len_940_0:0
lenseg_941_0:4
len_1147_0:0
lenseg_1148_0:4
min_946_0:0
minseg_947_0:1
min_1153_0:7
minseg_1154_0:0
min_1379_0:7
minseg_1380_0:0
min_1573_0:7
minseg_1574_0:0
sll_498_0:0
sll_779_0:0
sllseg_780_0:0
sll_952_0:0
sllseg_953_0:0
sll_1159_0:0
sllseg_1160_0:0
sll_1385_0:0
sllseg_1386_0:0
maxseg_1392_0:2
maxseg_1166_0:2
min_1582_0:4
minseg_1583_0:0
maxseg_959_0:2
min_1397_0:0
minseg_1398_0:4
min_1587_0:3
minseg_1588_0:1
maxseg_786_0:2
min_1171_0:4
minseg_1172_0:0
min_1402_0:2
minseg_1403_0:1
min_1592_0:2
minseg_1593_0:0
len_501_0:0
len_788_0:0
lenseg_789_0:1
len_964_0:4
lenseg_965_0:6
len_1176_0:0
lenseg_1177_0:1
len_1407_0:4
lenseg_1408_0:6
min_504_0:0
min_969_0:0
minseg_970_0:4
min_1181_0:4
minseg_1182_0:0
min_1412_0:2
minseg_1413_0:2
min_1597_0:4
minseg_1598_0:0
max_507_0:2
max_974_0:2
max_1186_0:4
maxseg_1187_0:2
max_1417_0:2
maxseg_1418_0:1
max_1602_0:4
maxseg_1603_0:0
sll_516_0:1
sll_799_0:1
sllseg_800_0:0
sll_979_0:0
sllseg_980_0:0
sll_1191_0:0
sllseg_1192_0:0
sll_1422_0:1
sllseg_1423_0:0
maxseg_1429_0:1
maxseg_1198_0:2
min_1610_0:6
minseg_1611_0:3
maxseg_986_0:2
min_1434_0:0
minseg_1435_0:4
min_1615_0:6
minseg_1616_0:3
maxseg_806_0:1
min_1203_0:4
minseg_1204_0:0
min_1439_0:0
minseg_1440_0:4
min_1620_0:6
minseg_1621_0:3
len_519_0:6
len_808_0:6
lenseg_809_0:4
len_991_0:4
lenseg_992_0:6
len_1208_0:0
lenseg_1209_0:1
len_1444_0:6
lenseg_1445_0:4
min_522_0:6
min_996_0:6
minseg_997_0:3
min_1213_0:4
minseg_1214_0:0
min_1449_0:0
minseg_1450_0:4
min_1625_0:6
minseg_1626_0:3
max_525_0:2
max_1001_0:2
max_1218_0:4
maxseg_1219_0:2
max_1454_0:2
maxseg_1455_0:2
max_1630_0:2
maxseg_1631_0:1

BEG FIND
Level 1  intsize = 3
 * After optims it became = 38686 was 21747
 * After all optims it became = 23360
 finder  hits = 83671	 bstoreObjs=49807	 sstorePages=80
hitcount 	1	37070	3
hitcount 	2	4665	3
hitcount 	3	4606	3
hitcount 	4	1506	3
hitcount 	5	624	3
hitcount 	6	220	3
hitcount 	7	337	3
hitcount 	8	182	3
hitcount 	9	106	4
hitcount 	10	84	3
hitcount 	11	71	3
hitcount 	12	59	3
hitcount 	13	40	4
hitcount 	14	65	3
hitcount 	15	25	3
hitcount 	16	16	3
hitcount 	17	29	3
hitcount 	18	11	3
hitcount 	19	10	3
hitcount 	20	4	3
hitcount 	21	8	4
hitcount 	22	2	4
hitcount 	23	8	3
hitcount 	24	1	3
hitcount 	25	5	4
hitcount 	26	1	4
hitcount 	27	7	3
hitcount 	28	2	4
hitcount 	29	8	3
hitcount 	30	1	3
hitcount 	31	1	5
hitcount 	32	2	2
hitcount 	33	1	2
hitcount 	34	1	4
hitcount 	35	1	5
hitcount 	36	5	2
hitcount 	37	2	4
hitcount 	38	2	4
hitcount 	42	3	3
hitcount 	43	2	4
hitcount 	47	1	5
hitcount 	54	1	3
hitcount 	57	1	1
hitcount 	58	1	3
hitcount 	59	1	4
hitcount 	62	1	5
hitcount 	65	1	5
hitcount 	68	1	5
hitcount 	71	1	5
hitcount 	81	1	4
hitcount 	93	1	2
hitcount 	103	1	4
hitcount 	116	1	2
hitcount 	118	1	4
bucketsPerDepth 	4	6
bucketsPerDepth 	5	988
bucketsPerDepth 	6	30
* TIME TO ADD INPUT :  999.16 ms 
f# %assign: 9 clauses: 2729191 learn: 583 restart: 18 decision: 7124 propagated: 20585330
END FIND
!+ 10000000011110010011010010101010100000110001001001000000011100000000000101110010000101101000010000010100001001010010000000000010001110001
!+ H__0_395_175:1
H__4_395_176:0
H__1_395_176_165:0
H__1_395_176_168:0
H__18_391:7
H__6_395:1
H__0_391_179:0
H__0_391_180:1
H__1_391_182:6
H__1_391_184:2
H__1_391_186:2
H__1_391_187:5
H__8_391:2
H__1_391_191:1
H__1_391_193:0
H__18_392:3
H__0_392_179:0
H__0_392_180:1
H__1_392_182:2
H__1_392_184:2
H__1_392_186:0
H__1_392_187:0
H__8_392:7
H__1_392_191:0
H__1_392_193:0
H__18_393:0
H__0_393_179:0
H__0_393_180:1
H__1_393_182:7
H__1_393_184:4
H__1_393_186:0
H__1_393_187:2
H__8_393:3
H__1_393_191:1
H__1_393_193:4
H__0_397:0
H__1_398:0
H__0_396_175:1
H__4_396_176:1
H__1_396_176_165:0
H__1_396_176_168:2
H__18_394:2
H__6_396:1
H__0_394_179:0
H__0_394_180:1
H__1_394_182:0
H__1_394_184:0
H__1_394_186:0
H__1_394_187:2
H__8_394:4
H__1_394_191:3
H__1_394_193:4

BEG CHECK
 * After optims it became = 10645 was 21747
 TESTING HYPOTHESIS ITER 1
h = 1154  hasserts.size()= 2
SLICE SIZE = 276
c# %assign: 16 clauses: 2842 learn: 0 restart: 0 decision: 0 propagated: 156
 FOUND CONST: 1154= 88 | 103  = 1
 reduced size from 10645 to 9898
 TESTING HYPOTHESIS ITER 2
h = 86  hasserts.size()= 1
SLICE SIZE = 89
c# %assign: 32 clauses: 1185 learn: 0 restart: 0 decision: 0 propagated: 146
 FOUND CONST: 86= llocvars_22_2a_idx_1_0 < (0)  = 0
 reduced size from 9898 to 9885
 TESTING HYPOTHESIS ITER 3
h = 1034  hasserts.size()= 2
SLICE SIZE = 267
c# %assign: 16 clauses: 2842 learn: 0 restart: 0 decision: 0 propagated: 156
 FOUND CONST: 1034= 87 | (!93)  = 1
 reduced size from 9885 to 9864
 TESTING HYPOTHESIS ITER 4
h = 1129  hasserts.size()= 2
SLICE SIZE = 270
c# %assign: 16 clauses: 2842 learn: 0 restart: 0 decision: 0 propagated: 156
 FOUND CONST: 1129= 987 < (4)  = 1
 reduced size from 9864 to 9849
 * Simulation optimized it to = 9849
Simulation didn't find a cex:  999.166 ms 
After all optim
c# %assign: 6 clauses: 158026 learn: 40099 restart: 6 decision: 141351 propagated: 5259205
END CHECK
********  15	ftime= 999.943	ctime= 1000.09
 *GOT THE CORRECT ANSWER IN 16 iterations.
 *FIND TIME 9998.45 CHECK TIME 3001.9 TOTAL TIME 13000.4
RESULT = 0  
**ROUND 0 : 0 Round time:  13000.8 ms 
RNDDEG = -1
return 0

----- Statistics -----
Total elapsed time (ms):  14999.5
Model building time (ms): 999.254
Solution time (ms):       13000.8
Max virtual mem (bytes):  407183360
Max resident mem (bytes): 302563328
Max private mem (bytes):  402812928
ALL CORRECT
[SATBackend] Stats for last run:
      [solution stats]
      successful? ---------------------> true
      elapsed time (s) ----------------> 14.629
      model building time (s) ---------> 0.999
      solution time (s) ---------------> 13.0
      max memory usage (MiB) ----------> 388.3203
      [SAT-specific solution stats]
      initial number of nodes ---------> -1
      number of nodes after opts ------> -1
      number of controls --------------> -1
      total number of control bits ----> -1

[SATBackend] Solver exit value: 0
    [0;32m[1491836628.3920 - DEBUG] Running stage 'subst' -- Substitute a solution (assignment to ??'s) into the sketch[0m
    [0;32m[1491836628.3950 - DEBUG] Running stage 'cleanup' -- Clean up sketch after substitutions for readability[0m
    [0;32m[1491836628.5440 - DEBUG] Running stage 'outputc' -- Output C code (to console or file)[0m
[SKETCH] DONE
Total time = 15985
