SKETCH version 1.7.2
Benchmark = list/sll_len_rec.sk
    [0;32m[1484669092.6520 - DEBUG] Running stage 'parse' -- Parse the program from a file[0m
    [0;32m[1484669092.9960 - DEBUG] Running stage 'preproc' -- Preprocessing (used for all further transformations)[0m
    [0;32m[1484669093.3220 - DEBUG] Running stage SpmdLowLevelCStage[0m
    [0;32m[1484669093.3250 - DEBUG]    Running visitor FlattenStmtBlocks2[0m
    [0;32m[1484669093.3270 - DEBUG]    Running visitor SplitAssignFromVarDef[0m
    [0;32m[1484669093.3310 - DEBUG]    Running visitor EliminateComplexForLoops[0m
    [0;32m[1484669093.3350 - DEBUG] Running stage 'lowering' -- Lower for SKETCH backend[0m
    [0;32m[1484669093.3840 - DEBUG] Running stage 'sten' -- Stencil transformations[0m

//// After stage lowering
/* BEGIN PACKAGE ANONYMOUS*/
/*aux.skh:77*/

void assertPost (bit b_18e, ref global bit error_flag__ANONYMOUS_s772_18f)/*aux.skh:77*/
{
  {
    {
      if(error_flag__ANONYMOUS_s772_18f)/*aux.skh:78*/
      {
        return;
      }
      else
      {
        assert (b_18e); //Assert at aux.skh:79 (1712938731995810399)
      }
    }
  }
}
/*aux.skh:73*/

void assumePre (bit b_319, ref global bit error_flag__ANONYMOUS_s714_31a)/*aux.skh:73*/
{
  {
    {
      if(!(b_319))/*aux.skh:74*/
      {
        error_flag__ANONYMOUS_s714_31a = 1;
      }
    }
  }
}
/*aux.skh:277*/

void basic_assumptions (ref bit _out_82, ref global bit[4] active__ANONYMOUS_s800_83, ref global int[4] key__ANONYMOUS_s801_84, ref global int[4] left__ANONYMOUS_s802_85, ref global int[3] locvars__ANONYMOUS_s803_86, ref global int[4] next__ANONYMOUS_s804_87, ref global int[4] right__ANONYMOUS_s805_88, ref global int[4] supernext__ANONYMOUS_s806_89, ref global bit[4] symbolic__ANONYMOUS_s807_8a)/*aux.skh:277*/
{
  {
    {
      _out_82 = 0;
      bit _pac_sc_s1760;
      {
        bit _pac_sc_s1761;
        {
          bit _pac_sc_s1762;
          {
            bit _pac_sc_s1763;
            {
              bit _pac_sc_s1764;
              {
                bit _pac_sc_s1765;
                {
                  bit _pac_sc_s1766;
                  {
                    bit _pac_s1767;
                    _pac_s1767 = 0;
                    assert ((_pac_s1767 >= 0) && (_pac_s1767 < 3)); //aux.skh:279: Array out of bounds
                    _pac_sc_s1766 = (locvars__ANONYMOUS_s803_86[_pac_s1767]) == 0;
                    if(_pac_sc_s1766)/*aux.skh:279*/
                    {
                      bit _pac_s1768;
                      _pac_s1768 = 0;
                      assert ((_pac_s1768 >= 0) && (_pac_s1768 < 4)); //aux.skh:280: Array out of bounds
                      _pac_sc_s1766 = (next__ANONYMOUS_s804_87[_pac_s1768]) == 0;
                    }
                  }
                  _pac_sc_s1765 = _pac_sc_s1766;
                  if(_pac_sc_s1765)/*aux.skh:279*/
                  {
                    bit _pac_s1769;
                    _pac_s1769 = 0;
                    assert ((_pac_s1769 >= 0) && (_pac_s1769 < 4)); //aux.skh:281: Array out of bounds
                    _pac_sc_s1765 = (supernext__ANONYMOUS_s806_89[_pac_s1769]) == 0;
                  }
                }
                _pac_sc_s1764 = _pac_sc_s1765;
                if(_pac_sc_s1764)/*aux.skh:279*/
                {
                  bit _pac_s1770;
                  _pac_s1770 = 0;
                  assert ((_pac_s1770 >= 0) && (_pac_s1770 < 4)); //aux.skh:282: Array out of bounds
                  _pac_sc_s1764 = (left__ANONYMOUS_s802_85[_pac_s1770]) == 0;
                }
              }
              _pac_sc_s1763 = _pac_sc_s1764;
              if(_pac_sc_s1763)/*aux.skh:279*/
              {
                bit _pac_s1771;
                _pac_s1771 = 0;
                assert ((_pac_s1771 >= 0) && (_pac_s1771 < 4)); //aux.skh:283: Array out of bounds
                _pac_sc_s1763 = (right__ANONYMOUS_s805_88[_pac_s1771]) == 0;
              }
            }
            _pac_sc_s1762 = _pac_sc_s1763;
            if(_pac_sc_s1762)/*aux.skh:279*/
            {
              bit _pac_s1772;
              _pac_s1772 = 0;
              assert ((_pac_s1772 >= 0) && (_pac_s1772 < 4)); //aux.skh:284: Array out of bounds
              _pac_sc_s1762 = (key__ANONYMOUS_s801_84[_pac_s1772]) == 0;
            }
          }
          _pac_sc_s1761 = _pac_sc_s1762;
          if(_pac_sc_s1761)/*aux.skh:279*/
          {
            bit _pac_s1773;
            _pac_s1773 = 0;
            assert ((_pac_s1773 >= 0) && (_pac_s1773 < 4)); //aux.skh:285: Array out of bounds
            _pac_sc_s1761 = !(symbolic__ANONYMOUS_s807_8a[_pac_s1773]);
          }
        }
        _pac_sc_s1760 = _pac_sc_s1761;
        if(_pac_sc_s1760)/*aux.skh:279*/
        {
          bit _pac_s1774;
          _pac_s1774 = 0;
          assert ((_pac_s1774 >= 0) && (_pac_s1774 < 4)); //aux.skh:286: Array out of bounds
          _pac_sc_s1760 = active__ANONYMOUS_s800_83[_pac_s1774];
        }
      }
      _out_82 = _pac_sc_s1760;
      int idx_8b;
      idx_8b = 2;
      while((idx_8b <= 2) && _out_82)
      {
        assert ((idx_8b >= 0) && (idx_8b < 4)); //aux.skh:291: Array out of bounds
        _out_82 = !(active__ANONYMOUS_s800_83[idx_8b]);
        int uo_s36_8e;
        uo_s36_8e = idx_8b;
        idx_8b = idx_8b + 1;
        uo_s36_8e;
      }
      return;
    }
  }
}
/*lseg_header.skh:1414*/

void basic_axioms (ref bit _out_8f, ref global int[4] supernext__ANONYMOUS_s890_90, ref global int ts__ANONYMOUS_s891_91)/*lseg_header.skh:1414*/
{
  {
    {
      _out_8f = 0;
      bit _pac_sc_s288_92;
      bit _pac_sc_s289_93;
      int _pac_sc_s289_s291_94;
      len(0, ts__ANONYMOUS_s891_91, _pac_sc_s289_s291_94);
      _pac_sc_s289_93 = _pac_sc_s289_s291_94 == 0;
      if(_pac_sc_s289_93)/*lseg_header.skh:1415*/
      {
        int _pac_sc_s289_s293_95;
        min(0, ts__ANONYMOUS_s891_91, _pac_sc_s289_s293_95);
        _pac_sc_s289_93 = _pac_sc_s289_s293_95 == 7;
      }
      _pac_sc_s288_92 = _pac_sc_s289_93;
      if(_pac_sc_s288_92)/*lseg_header.skh:1415*/
      {
        int _pac_sc_s288_s295_96;
        max(0, ts__ANONYMOUS_s891_91, _pac_sc_s288_s295_96);
        _pac_sc_s288_92 = _pac_sc_s288_s295_96 == 0;
      }
      _out_8f = _pac_sc_s288_92;
      int idx_97;
      idx_97 = 1;
      while((idx_97 < 4) && _out_8f)
      {
        bit _pac_sc_s296_aa;
        bit _pac_sc_s297_ab;
        bit _pac_sc_s298_ac;
        assert ((idx_97 >= 0) && (idx_97 < 4)); //lseg_header.skh:1421: Array out of bounds
        _pac_sc_s298_ac = (supernext__ANONYMOUS_s890_90[idx_97]) != 0;
        if(_pac_sc_s298_ac)/*lseg_header.skh:1421*/
        {
          int _pac_sc_s298_s300_ad;
          len(idx_97, ts__ANONYMOUS_s891_91, _pac_sc_s298_s300_ad);
          _pac_sc_s298_ac = _pac_sc_s298_s300_ad > 0;
        }
        _pac_sc_s297_ab = _pac_sc_s298_ac;
        if(_pac_sc_s297_ab)/*lseg_header.skh:1421*/
        {
          int _pac_sc_s297_s302_ae;
          min(idx_97, ts__ANONYMOUS_s891_91, _pac_sc_s297_s302_ae);
          int _pac_sc_s297_s304_af;
          max(idx_97, ts__ANONYMOUS_s891_91, _pac_sc_s297_s304_af);
          _pac_sc_s297_ab = _pac_sc_s297_s302_ae <= _pac_sc_s297_s304_af;
        }
        _pac_sc_s296_aa = _pac_sc_s297_ab;
        if(_pac_sc_s296_aa)/*lseg_header.skh:1421*/
        {
          int _pac_sc_s296_s306_b0;
          minseg(idx_97, ts__ANONYMOUS_s891_91, _pac_sc_s296_s306_b0);
          int _pac_sc_s296_s308_b1;
          maxseg(idx_97, ts__ANONYMOUS_s891_91, _pac_sc_s296_s308_b1);
          _pac_sc_s296_aa = _pac_sc_s296_s306_b0 <= _pac_sc_s296_s308_b1;
        }
        _out_8f = _pac_sc_s296_aa;
        int uo_s35_b2;
        uo_s35_b2 = idx_97;
        idx_97 = idx_97 + 1;
        uo_s35_b2;
      }
      return;
    }
  }
}
/*sll_len_rec.sk:87*/

void basic_cond0 (int locrange_dc, int intrange_dd, ref bit _out_de, ref global bit[4] active__ANONYMOUS_s1100_df, ref global bit error_flag__ANONYMOUS_s1409_e0, ref global int fake_unfold__ANONYMOUS_s1331_e1, ref global int fake_unfold_to__ANONYMOUS_s1332_e2, ref global bit[4 * 4] history__ANONYMOUS_s988_e3, ref global int[2] intvars__ANONYMOUS_s1333_e4, ref global int[4] key__ANONYMOUS_s1101_e5, ref global int[3] locvars__ANONYMOUS_s1271_e6, ref global int[4] next__ANONYMOUS_s1102_e7, ref global bit[4 * 4] p_history__ANONYMOUS_s1024_e8, ref global int[4] supernext__ANONYMOUS_s1103_e9, ref global bit[4] symbolic__ANONYMOUS_s1104_ea, ref global int ts__ANONYMOUS_s989_eb)/*sll_len_rec.sk:87*/
{
  {
    {
      _out_de = 0;
      bit _out_s238_ec;
      int locrange_ed;
      locrange_ed = locrange_dc;
      int intrange_ee;
      intrange_ee = intrange_dd;
      bit _has_out__ef;
      _has_out__ef = 0;
      _out_s238_ec = 0;
      int lll_f0;
      int lll_s240_f1;
      int r_f2;
      r_f2 = locrange_ed;
      bit _has_out__f3;
      _has_out__f3 = 0;
      lll_s240_f1 = 0;
      int n_f4;
      n_f4 = ??/* H__0_393_175int:2 */;
      assert ((n_f4 >= 0) && (n_f4 < r_f2)); //Assert at aux.skh:57 (3414778316249547286)
      lll_s240_f1 = n_f4 + 1;
      _has_out__f3 = 1;
      lll_f0 = lll_s240_f1;
      bit res_f5;
      bit res_s242_f6;
      int v_f7;
      v_f7 = lll_f0;
      int locrange_f8;
      locrange_f8 = locrange_ed;
      int intrange_f9;
      intrange_f9 = intrange_ee;
      bit _has_out__fa;
      _has_out__fa = 0;
      res_s242_f6 = 0;
      bit d_fb;
      d_fb = ??/* H__4_393_176bit:1 */;
      if(intrange_f9 == 0)/*lseg_header.skh:731*/
      {
        d_fb = 0;
      }
      if(d_fb)/*lseg_header.skh:732*/
      {
        assert (intrange_f9 > 0); //Assert at lseg_header.skh:733 (-7564163993047457451)
        int rrr_fc;
        int rrr_s244_fd;
        int r_fe;
        r_fe = intrange_f9;
        bit _has_out__ff;
        _has_out__ff = 0;
        rrr_s244_fd = 0;
        rrr_s244_fd = ??/* H__1_393_176_165int:3 */;
        assert ((rrr_s244_fd >= 0) && (rrr_s244_fd < r_fe)); //Assert at aux.skh:63 (1955052870986062035)
        _has_out__ff = 1;
        rrr_fc = rrr_s244_fd;
        bit _pac_sc_s245_100;
        bit _pac_sc_s245_s247_101;
        locvar_eq@ANONYMOUS(v_f7, 0, _pac_sc_s245_s247_101, locvars__ANONYMOUS_s1271_e6);
        _pac_sc_s245_100 = !(_pac_sc_s245_s247_101);
        if(_pac_sc_s245_100)/*lseg_header.skh:735*/
        {
          bit _pac_sc_s245_s249_102;
          intderef_lt_var@ANONYMOUS(v_f7, rrr_fc, _pac_sc_s245_s249_102, active__ANONYMOUS_s1100_df, error_flag__ANONYMOUS_s1409_e0, fake_unfold__ANONYMOUS_s1331_e1, fake_unfold_to__ANONYMOUS_s1332_e2, history__ANONYMOUS_s988_e3, intvars__ANONYMOUS_s1333_e4, key__ANONYMOUS_s1101_e5, locvars__ANONYMOUS_s1271_e6, next__ANONYMOUS_s1102_e7, p_history__ANONYMOUS_s1024_e8, supernext__ANONYMOUS_s1103_e9, symbolic__ANONYMOUS_s1104_ea, ts__ANONYMOUS_s989_eb);
          _pac_sc_s245_100 = _pac_sc_s245_s249_102;
        }
        res_s242_f6 = _pac_sc_s245_100;
        _has_out__fa = 1;
      }
      else
      {
        int _out_s251_103;
        int r_104;
        r_104 = locrange_f8 + 1;
        bit _has_out__105;
        _has_out__105 = 0;
        _out_s251_103 = 0;
        _out_s251_103 = ??/* H__1_393_176_168int:3 */;
        assert ((_out_s251_103 >= 0) && (_out_s251_103 < r_104)); //Assert at aux.skh:63 (1955052870986062035)
        _has_out__105 = 1;
        bit _out_s253_106;
        locvar_eq@ANONYMOUS(v_f7, _out_s251_103, _out_s253_106, locvars__ANONYMOUS_s1271_e6);
        res_s242_f6 = _out_s253_106;
        _has_out__fa = 1;
      }
      res_f5 = res_s242_f6;
      if(??/* H__6_393bit:1 */)/*lseg_header.skh:758*/
      {
        _out_s238_ec = res_f5;
        _has_out__ef = 1;
      }
      else
      {
        _out_s238_ec = !(res_f5);
        _has_out__ef = 1;
      }
      _out_de = _out_s238_ec;
      return;
    }
  }
}
/*lseg_header.skh:312*/

void check_p_treeness (int t1_32b, int t2_32c, ref bit[4] m_32d, int bnd_32e, ref bit _out_32f, ref global bit[4] active__ANONYMOUS_s936_330, ref global int[4] next__ANONYMOUS_s937_331, ref global int[4] supernext__ANONYMOUS_s938_332, ref global bit[4] symbolic__ANONYMOUS_s939_333)/*lseg_header.skh:312*/
{
  {
    {
      _out_32f = 0;
      if(bnd_32e < 0)/*lseg_header.skh:313*/
      {
        _out_32f = 0;
        return;
      }
      else
      {
        if((((t1_32b < 0) || (t1_32b >= 4)) || (t2_32c < 0)) || (t2_32c >= 4))/*lseg_header.skh:314*/
        {
          _out_32f = 0;
          return;
        }
        else
        {
          bit _pac_sc_s1814;
          {
            assert ((t1_32b >= 0) && (t1_32b < 4)); //lseg_header.skh:315: Array out of bounds
            _pac_sc_s1814 = !(active__ANONYMOUS_s936_330[t1_32b]);
            if(!(_pac_sc_s1814))/*lseg_header.skh:315*/
            {
              assert ((t2_32c >= 0) && (t2_32c < 4)); //lseg_header.skh:315: Array out of bounds
              _pac_sc_s1814 = !(active__ANONYMOUS_s936_330[t2_32c]);
            }
          }
          if(_pac_sc_s1814)/*lseg_header.skh:315*/
          {
            _out_32f = 0;
            return;
          }
          else
          {
            if(t1_32b == t2_32c)/*lseg_header.skh:316*/
            {
              _out_32f = 1;
              return;
            }
            else
            {
              if(t1_32b == 0)/*lseg_header.skh:317*/
              {
                _out_32f = 0;
                return;
              }
              else
              {
                assert ((t1_32b >= 0) && (t1_32b < 4)); //lseg_header.skh:318: Array out of bounds
                if(symbolic__ANONYMOUS_s939_333[t1_32b])/*lseg_header.skh:318*/
                {
                  assert ((t1_32b >= 0) && (t1_32b < 4)); //lseg_header.skh:319: Array out of bounds
                  if(m_32d[t1_32b])/*lseg_header.skh:319*/
                  {
                    _out_32f = 0;
                    return;
                  }
                  else
                  {
                    assert ((t1_32b >= 0) && (t1_32b < 4)); //lseg_header.skh:321: Either null pointer or Array out of bounds
                    m_32d[t1_32b] = 1;
                    _out_32f = t2_32c == 0;
                    return;
                  }
                }
                else
                {
                  assert ((t1_32b >= 0) && (t1_32b < 4)); //lseg_header.skh:326: Array out of bounds
                  if(m_32d[t1_32b])/*lseg_header.skh:326*/
                  {
                    _out_32f = 0;
                    return;
                  }
                  else
                  {
                    assert ((t1_32b >= 0) && (t1_32b < 4)); //lseg_header.skh:328: Either null pointer or Array out of bounds
                    m_32d[t1_32b] = 1;
                    int nxt_334;
                    assert ((t1_32b >= 0) && (t1_32b < 4)); //lseg_header.skh:329: Array out of bounds
                    nxt_334 = next__ANONYMOUS_s937_331[t1_32b];
                    if((nxt_334 < 0) || (nxt_334 >= 4))/*lseg_header.skh:330*/
                    {
                      assert ((t1_32b >= 0) && (t1_32b < 4)); //lseg_header.skh:330: Array out of bounds
                      nxt_334 = supernext__ANONYMOUS_s938_332[t1_32b];
                    }
                    if(nxt_334 == 0)/*lseg_header.skh:331*/
                    {
                      _out_32f = t2_32c == 0;
                      return;
                    }
                    else
                    {
                      if((nxt_334 < 0) || (nxt_334 >= 4))/*lseg_header.skh:332*/
                      {
                        _out_32f = 0;
                        return;
                      }
                      else
                      {
                        bit _out_s79_335;
                        int bnd_32e_s1726;
                        bnd_32e_s1726 = bnd_32e - 1;
                        check_p_treeness@ANONYMOUS(nxt_334, t2_32c, m_32d, bnd_32e_s1726, _out_s79_335, active__ANONYMOUS_s936_330, next__ANONYMOUS_s937_331, supernext__ANONYMOUS_s938_332, symbolic__ANONYMOUS_s939_333);
                        _out_32f = _out_s79_335;
                        return;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
/*lseg_header.skh:409*/

void compute_reach (int init_388, int stop_389, ref bit[4] reach_38a, ref global bit[4] active__ANONYMOUS_s864_38b, ref global int[4] next__ANONYMOUS_s1623_38c, ref global int[4] supernext__ANONYMOUS_s1624_38d, ref global bit[4] symbolic__ANONYMOUS_s1625_38e)/*lseg_header.skh:409*/
{
  {
    {
      if((init_388 < 0) || (init_388 >= 4))/*lseg_header.skh:410*/
      {
        return;
      }
      else
      {
        assert ((init_388 >= 0) && (init_388 < 4)); //lseg_header.skh:411: Array out of bounds
        if(!(active__ANONYMOUS_s864_38b[init_388]))/*lseg_header.skh:411*/
        {
          return;
        }
      }
      assert ((init_388 >= 0) && (init_388 < 4)); //lseg_header.skh:412: Either null pointer or Array out of bounds
      reach_38a[init_388] = (init_388 == stop_389 ? 0 : 1);
      bit updated_38f;
      updated_38f = 0;
      bit __sa1655_390;
      __sa1655_390 = 1;
      while(__sa1655_390)
      {
        updated_38f = 0;
        update_reach@ANONYMOUS(updated_38f, reach_38a, stop_389, active__ANONYMOUS_s864_38b, next__ANONYMOUS_s1623_38c, supernext__ANONYMOUS_s1624_38d, symbolic__ANONYMOUS_s1625_38e);
        __sa1655_390 = updated_38f;
      }
    }
  }
}
/*aux.skh:82*/

void connect_defs (ref global bit[4] active__ANONYMOUS_s764_381, ref global bit[4 * 4] history__ANONYMOUS_s765_382, ref global int[4] next__ANONYMOUS_s766_383, ref global bit[4 * 4] p_history__ANONYMOUS_s767_384, ref global bit[4] symbolic__ANONYMOUS_s768_385, ref global int ts__ANONYMOUS_s769_386)/*aux.skh:82*/
{
  {
    {
      int i_387;
      if(0 < 4)/*aux.skh:83*/
      {
      }
      for(i_387 = 0; i_387 < 4; i_387 = i_387 + 1)/*Canonical*/
      {
        if(active__ANONYMOUS_s764_381[i_387])/*aux.skh:84*/
        {
          assert ((i_387 >= 0) && (i_387 < 4)); //aux.skh:85: Array out of bounds
          if(symbolic__ANONYMOUS_s768_385[i_387])/*aux.skh:85*/
          {
            assert ((i_387 >= 0) && (i_387 < 4)); //aux.skh:86: Array out of bounds
            assert ((ts__ANONYMOUS_s769_386 >= 0) && (ts__ANONYMOUS_s769_386 < 4)); //aux.skh:86: Either null pointer or Array out of bounds
            history__ANONYMOUS_s765_382[(4 * i_387) + ts__ANONYMOUS_s769_386] = 1;
            assert ((i_387 >= 0) && (i_387 < 4)); //aux.skh:87: Array out of bounds
            assert ((ts__ANONYMOUS_s769_386 >= 0) && (ts__ANONYMOUS_s769_386 < 4)); //aux.skh:87: Either null pointer or Array out of bounds
            p_history__ANONYMOUS_s767_384[(4 * i_387) + ts__ANONYMOUS_s769_386] = 1;
          }
          else
          {
            bit _pac_sc_s1832;
            {
              assert ((i_387 >= 0) && (i_387 < 4)); //aux.skh:89: Array out of bounds
              _pac_sc_s1832 = (next__ANONYMOUS_s766_383[i_387]) < 0;
              if(!(_pac_sc_s1832))/*aux.skh:89*/
              {
                assert ((i_387 >= 0) && (i_387 < 4)); //aux.skh:89: Array out of bounds
                _pac_sc_s1832 = (next__ANONYMOUS_s766_383[i_387]) >= 4;
              }
            }
            if(_pac_sc_s1832)/*aux.skh:89*/
            {
              assert ((i_387 >= 0) && (i_387 < 4)); //aux.skh:90: Array out of bounds
              assert ((ts__ANONYMOUS_s769_386 >= 0) && (ts__ANONYMOUS_s769_386 < 4)); //aux.skh:90: Either null pointer or Array out of bounds
              p_history__ANONYMOUS_s767_384[(4 * i_387) + ts__ANONYMOUS_s769_386] = 1;
            }
          }
        }
      }
    }
  }
}
/*lseg_header.skh:590*/

void free (int c_2d0, ref global bit[4] active__ANONYMOUS_s726_2d1, ref global bit error_flag__ANONYMOUS_s1572_2d2, ref global bit[4 * 4] history__ANONYMOUS_s1205_2d3, ref global int[3] locvars__ANONYMOUS_s727_2d4, ref global int malloc_budget__ANONYMOUS_s728_2d5, ref global int[4] next__ANONYMOUS_s1206_2d6, ref global bit[4 * 4] p_history__ANONYMOUS_s1207_2d7, ref global bit[4] symbolic__ANONYMOUS_s729_2d8, ref global int ts__ANONYMOUS_s730_2d9)/*lseg_header.skh:590*/
{
  {
    {
      int choice_2da;
      choice_2da = c_2d0;
      assert (choice_2da > 0); //Assert at lseg_header.skh:594 (2559000779193981927)
      assert (choice_2da < 3); //Assert at lseg_header.skh:595 (-3440271761891008813)
      int l_2db;
      assert ((choice_2da >= 0) && (choice_2da < 3)); //lseg_header.skh:597: Array out of bounds
      l_2db = locvars__ANONYMOUS_s727_2d4[choice_2da];
      bit b_18e_s1715;
      bit _pac_sc_s1794;
      {
        assert ((l_2db >= 0) && (l_2db < 4)); //lseg_header.skh:600: Array out of bounds
        _pac_sc_s1794 = active__ANONYMOUS_s726_2d1[l_2db];
        if(_pac_sc_s1794)/*lseg_header.skh:600*/
        {
          assert ((l_2db >= 0) && (l_2db < 4)); //lseg_header.skh:600: Array out of bounds
          _pac_sc_s1794 = !(symbolic__ANONYMOUS_s729_2d8[l_2db]);
        }
      }
      b_18e_s1715 = _pac_sc_s1794;
      assertPost@ANONYMOUS(b_18e_s1715, error_flag__ANONYMOUS_s1572_2d2);
      bit _pac_sc_s1795;
      {
        assert ((l_2db >= 0) && (l_2db < 4)); //lseg_header.skh:601: Array out of bounds
        _pac_sc_s1795 = !(active__ANONYMOUS_s726_2d1[l_2db]);
        if(!(_pac_sc_s1795))/*lseg_header.skh:601*/
        {
          assert ((l_2db >= 0) && (l_2db < 4)); //lseg_header.skh:601: Array out of bounds
          _pac_sc_s1795 = symbolic__ANONYMOUS_s729_2d8[l_2db];
        }
      }
      if(_pac_sc_s1795)/*lseg_header.skh:601*/
      {
        return;
      }
      if((l_2db > 0) && (l_2db < 4))/*lseg_header.skh:603*/
      {
        assert ((l_2db >= 0) && (l_2db < 4)); //lseg_header.skh:604: Either null pointer or Array out of bounds
        active__ANONYMOUS_s726_2d1[l_2db] = 0;
        int uo_s17_2dc;
        uo_s17_2dc = malloc_budget__ANONYMOUS_s728_2d5;
        malloc_budget__ANONYMOUS_s728_2d5 = malloc_budget__ANONYMOUS_s728_2d5 + 1;
        uo_s17_2dc;
        int uo_s18_2dd;
        uo_s18_2dd = ts__ANONYMOUS_s730_2d9;
        ts__ANONYMOUS_s730_2d9 = ts__ANONYMOUS_s730_2d9 + 1;
        uo_s18_2dd;
        connect_defs@ANONYMOUS(active__ANONYMOUS_s726_2d1, history__ANONYMOUS_s1205_2d3, next__ANONYMOUS_s1206_2d6, p_history__ANONYMOUS_s1207_2d7, symbolic__ANONYMOUS_s729_2d8, ts__ANONYMOUS_s730_2d9);
      }
    }
  }
}
/*aux.skh:32*/

void glblInit_error_flag__ANONYMOUS_s1642 (ref bit error_flag__ANONYMOUS_s1641_2e)/*aux.skh:32*/
{
  {
    {
      error_flag__ANONYMOUS_s1641_2e = 0;
    }
  }
}
/*aux.skh:35*/

void glblInit_fake_unfold__ANONYMOUS_s1644 (ref int fake_unfold__ANONYMOUS_s1643_2f)/*aux.skh:35*/
{
  {
    {
      fake_unfold__ANONYMOUS_s1643_2f = 0;
    }
  }
}
/*aux.skh:36*/

void glblInit_fake_unfold_to__ANONYMOUS_s1646 (ref int fake_unfold_to__ANONYMOUS_s1645_30)/*aux.skh:36*/
{
  {
    {
      fake_unfold_to__ANONYMOUS_s1645_30 = 0;
    }
  }
}
/*sll_len_rec.sk:9*/

void glblInit_malloc_budget__ANONYMOUS_s1648 (ref int malloc_budget__ANONYMOUS_s1647_31)/*sll_len_rec.sk:9*/
{
  {
    {
      malloc_budget__ANONYMOUS_s1647_31 = 1;
    }
  }
}
/*aux.skh:30*/

void glblInit_ranking__ANONYMOUS_s1650 (ref int ranking__ANONYMOUS_s1649_32)/*aux.skh:30*/
{
  {
    {
      ranking__ANONYMOUS_s1649_32 = 0;
    }
  }
}
/*aux.skh:29*/

void glblInit_ret__ANONYMOUS_s1652 (ref int ret__ANONYMOUS_s1651_33)/*aux.skh:29*/
{
  {
    {
      ret__ANONYMOUS_s1651_33 = 0;
    }
  }
}
/*aux.skh:33*/

void glblInit_ts__ANONYMOUS_s1654 (ref int ts__ANONYMOUS_s1653_34)/*aux.skh:33*/
{
  {
    {
      ts__ANONYMOUS_s1653_34 = 0;
    }
  }
}
/*lseg_header.skh:422*/

void havoc (int r_303, ref bit[3] new_symbolic_304, ref int[3] new_next_305, ref int[3] new_supernext_306, ref int[3] new_key_307, ref int _out_308, ref global bit[4] active__ANONYMOUS_s899_309, ref global bit[4 * 4] history__ANONYMOUS_s1543_30a, ref global int[4] key__ANONYMOUS_s900_30b, ref global int[4] next__ANONYMOUS_s901_30c, ref global bit[4 * 4] p_history__ANONYMOUS_s1544_30d, ref global int[4] supernext__ANONYMOUS_s902_30e, ref global bit[4] symbolic__ANONYMOUS_s903_30f, ref global int ts__ANONYMOUS_s904_310)/*lseg_header.skh:422*/
{
  {
    {
      _out_308 = 0;
      bit[4] reach_311;
      {
        for(int __sa1867 = 0; __sa1867 < 4; __sa1867 = __sa1867 + 1)/*Canonical*/
        {
          reach_311[__sa1867] = 0;
        }
      }
      compute_reach@ANONYMOUS(r_303, 0, reach_311, active__ANONYMOUS_s899_309, next__ANONYMOUS_s901_30c, supernext__ANONYMOUS_s902_30e, symbolic__ANONYMOUS_s903_30f);
      int idx_312;
      if(1 < 4)/*lseg_header.skh:426*/
      {
      }
      for(idx_312 = 1; idx_312 < 4; idx_312 = idx_312 + 1)/*Canonical*/
      {
        if(reach_311[idx_312])/*lseg_header.skh:427*/
        {
          assert ((idx_312 >= 0) && (idx_312 < 4)); //lseg_header.skh:427: Either null pointer or Array out of bounds
          active__ANONYMOUS_s899_309[idx_312] = 0;
        }
        if(!(active__ANONYMOUS_s899_309[idx_312]))/*lseg_header.skh:428*/
        {
          int _pac_s1799;
          _pac_s1799 = idx_312 - 1;
          assert ((_pac_s1799 >= 0) && (_pac_s1799 < 3)); //lseg_header.skh:429: Array out of bounds
          assert ((idx_312 >= 0) && (idx_312 < 4)); //lseg_header.skh:429: Either null pointer or Array out of bounds
          symbolic__ANONYMOUS_s903_30f[idx_312] = new_symbolic_304[_pac_s1799];
          int _pac_s1800;
          _pac_s1800 = idx_312 - 1;
          assert ((_pac_s1800 >= 0) && (_pac_s1800 < 3)); //lseg_header.skh:430: Array out of bounds
          assert ((idx_312 >= 0) && (idx_312 < 4)); //lseg_header.skh:430: Either null pointer or Array out of bounds
          next__ANONYMOUS_s901_30c[idx_312] = new_next_305[_pac_s1800];
          int _pac_s1801;
          _pac_s1801 = idx_312 - 1;
          assert ((_pac_s1801 >= 0) && (_pac_s1801 < 3)); //lseg_header.skh:431: Array out of bounds
          assert ((idx_312 >= 0) && (idx_312 < 4)); //lseg_header.skh:431: Either null pointer or Array out of bounds
          supernext__ANONYMOUS_s902_30e[idx_312] = new_supernext_306[_pac_s1801];
          int _pac_s1802;
          _pac_s1802 = idx_312 - 1;
          assert ((_pac_s1802 >= 0) && (_pac_s1802 < 3)); //lseg_header.skh:432: Array out of bounds
          assert ((idx_312 >= 0) && (idx_312 < 4)); //lseg_header.skh:432: Either null pointer or Array out of bounds
          key__ANONYMOUS_s900_30b[idx_312] = new_key_307[_pac_s1802];
        }
      }
      int loc_313;
      loc_313 = 1;
      bit __sa10_314;
      bit _pac_sc_s1803;
      {
        _pac_sc_s1803 = 1;
        if(_pac_sc_s1803)/*lseg_header.skh:437*/
        {
          bit _pac_sc_s1804;
          {
            bit _pac_s1805;
            _pac_s1805 = 1;
            assert ((_pac_s1805 >= 0) && (_pac_s1805 < 4)); //lseg_header.skh:437: Array out of bounds
            _pac_sc_s1804 = active__ANONYMOUS_s899_309[_pac_s1805];
            if(!(_pac_sc_s1804))/*lseg_header.skh:437*/
            {
              bit _pac_s1806;
              _pac_s1806 = 1;
              assert ((_pac_s1806 >= 0) && (_pac_s1806 < 4)); //lseg_header.skh:437: Array out of bounds
              _pac_sc_s1804 = !(symbolic__ANONYMOUS_s903_30f[_pac_s1806]);
            }
          }
          _pac_sc_s1803 = _pac_sc_s1804;
        }
      }
      __sa10_314 = _pac_sc_s1803;
      while(__sa10_314)
      {
        int uo_s32_317;
        uo_s32_317 = loc_313;
        loc_313 = loc_313 + 1;
        uo_s32_317;
        bit _pac_sc_s1807;
        {
          _pac_sc_s1807 = loc_313 < 4;
          if(_pac_sc_s1807)/*lseg_header.skh:437*/
          {
            bit _pac_sc_s1808;
            {
              assert ((loc_313 >= 0) && (loc_313 < 4)); //lseg_header.skh:437: Array out of bounds
              _pac_sc_s1808 = active__ANONYMOUS_s899_309[loc_313];
              if(!(_pac_sc_s1808))/*lseg_header.skh:437*/
              {
                assert ((loc_313 >= 0) && (loc_313 < 4)); //lseg_header.skh:437: Array out of bounds
                _pac_sc_s1808 = !(symbolic__ANONYMOUS_s903_30f[loc_313]);
              }
            }
            _pac_sc_s1807 = _pac_sc_s1808;
          }
        }
        __sa10_314 = _pac_sc_s1807;
      }
      if(loc_313 >= 4)/*lseg_header.skh:440*/
      {
        _out_308 = 0;
        return;
      }
      int uo_s33_318;
      uo_s33_318 = ts__ANONYMOUS_s904_310;
      ts__ANONYMOUS_s904_310 = ts__ANONYMOUS_s904_310 + 1;
      uo_s33_318;
      connect_defs@ANONYMOUS(active__ANONYMOUS_s899_309, history__ANONYMOUS_s1543_30a, next__ANONYMOUS_s901_30c, p_history__ANONYMOUS_s1544_30d, symbolic__ANONYMOUS_s903_30f, ts__ANONYMOUS_s904_310);
      assert ((loc_313 >= 0) && (loc_313 < 4)); //lseg_header.skh:446: Either null pointer or Array out of bounds
      active__ANONYMOUS_s899_309[loc_313] = 1;
      _out_308 = loc_313;
      return;
    }
  }
}
/*aux.skh:264*/

void init (ref int[2] llocvars_70, ref int[2] lintvars_71, ref int[3] lnext_72, ref int[3] lsupernext_73, ref int[3] lleft_74, ref int[3] lright_75, ref int[3] lkey_76, ref bit[3] lsymbolic_77, ref bit[3] lactive_78, ref global bit[4] active__ANONYMOUS_s731_79, ref global int[2] intvars__ANONYMOUS_s732_7a, ref global int[4] key__ANONYMOUS_s733_7b, ref global int[4] left__ANONYMOUS_s734_7c, ref global int[3] locvars__ANONYMOUS_s735_7d, ref global int[4] next__ANONYMOUS_s736_7e, ref global int[4] right__ANONYMOUS_s737_7f, ref global int[4] supernext__ANONYMOUS_s738_80, ref global bit[4] symbolic__ANONYMOUS_s739_81)/*aux.skh:264*/
{
  {
    {
      int[2] __sa1743;
      __sa1743 = llocvars_70;
      bit _pac_s1751;
      _pac_s1751 = 1;
      assert ((_pac_s1751 >= 0) && ((_pac_s1751 + 2) <= 3)); //aux.skh:265: Either null pointer or Array out of bounds
      {
        for(int __sa1856 = 0; __sa1856 < 2; __sa1856 = __sa1856 + 1)/*Canonical*/
        {
          locvars__ANONYMOUS_s735_7d[_pac_s1751 + __sa1856] = __sa1743[__sa1856];
        }
      }
      {
        for(int __sa1857 = 0; __sa1857 < 2; __sa1857 = __sa1857 + 1)/*Canonical*/
        {
          intvars__ANONYMOUS_s732_7a[__sa1857] = lintvars_71[__sa1857];
        }
      }
      int[3] __sa1744;
      __sa1744 = lnext_72;
      bit _pac_s1752;
      _pac_s1752 = 1;
      assert ((_pac_s1752 >= 0) && ((_pac_s1752 + 3) <= 4)); //aux.skh:267: Either null pointer or Array out of bounds
      {
        for(int __sa1858 = 0; __sa1858 < 3; __sa1858 = __sa1858 + 1)/*Canonical*/
        {
          next__ANONYMOUS_s736_7e[_pac_s1752 + __sa1858] = __sa1744[__sa1858];
        }
      }
      int[3] __sa1745;
      __sa1745 = lsupernext_73;
      bit _pac_s1753;
      _pac_s1753 = 1;
      assert ((_pac_s1753 >= 0) && ((_pac_s1753 + 3) <= 4)); //aux.skh:268: Either null pointer or Array out of bounds
      {
        for(int __sa1859 = 0; __sa1859 < 3; __sa1859 = __sa1859 + 1)/*Canonical*/
        {
          supernext__ANONYMOUS_s738_80[_pac_s1753 + __sa1859] = __sa1745[__sa1859];
        }
      }
      int[3] __sa1746;
      __sa1746 = lleft_74;
      bit _pac_s1754;
      _pac_s1754 = 1;
      assert ((_pac_s1754 >= 0) && ((_pac_s1754 + 3) <= 4)); //aux.skh:269: Either null pointer or Array out of bounds
      {
        for(int __sa1860 = 0; __sa1860 < 3; __sa1860 = __sa1860 + 1)/*Canonical*/
        {
          left__ANONYMOUS_s734_7c[_pac_s1754 + __sa1860] = __sa1746[__sa1860];
        }
      }
      int[3] __sa1747;
      __sa1747 = lright_75;
      bit _pac_s1755;
      _pac_s1755 = 1;
      assert ((_pac_s1755 >= 0) && ((_pac_s1755 + 3) <= 4)); //aux.skh:270: Either null pointer or Array out of bounds
      {
        for(int __sa1861 = 0; __sa1861 < 3; __sa1861 = __sa1861 + 1)/*Canonical*/
        {
          right__ANONYMOUS_s737_7f[_pac_s1755 + __sa1861] = __sa1747[__sa1861];
        }
      }
      int[3] __sa1748;
      __sa1748 = lkey_76;
      bit _pac_s1756;
      _pac_s1756 = 1;
      assert ((_pac_s1756 >= 0) && ((_pac_s1756 + 3) <= 4)); //aux.skh:271: Either null pointer or Array out of bounds
      {
        for(int __sa1862 = 0; __sa1862 < 3; __sa1862 = __sa1862 + 1)/*Canonical*/
        {
          key__ANONYMOUS_s733_7b[_pac_s1756 + __sa1862] = __sa1748[__sa1862];
        }
      }
      bit[3] __sa1749;
      __sa1749 = lsymbolic_77;
      bit _pac_s1757;
      _pac_s1757 = 1;
      assert ((_pac_s1757 >= 0) && ((_pac_s1757 + 3) <= 4)); //aux.skh:272: Either null pointer or Array out of bounds
      {
        for(int __sa1863 = 0; __sa1863 < 3; __sa1863 = __sa1863 + 1)/*Canonical*/
        {
          symbolic__ANONYMOUS_s739_81[_pac_s1757 + __sa1863] = __sa1749[__sa1863];
        }
      }
      bit[3] __sa1750;
      __sa1750 = lactive_78;
      bit _pac_s1758;
      _pac_s1758 = 1;
      assert ((_pac_s1758 >= 0) && ((_pac_s1758 + 3) <= 4)); //aux.skh:273: Either null pointer or Array out of bounds
      {
        for(int __sa1864 = 0; __sa1864 < 3; __sa1864 = __sa1864 + 1)/*Canonical*/
        {
          active__ANONYMOUS_s731_79[_pac_s1758 + __sa1864] = __sa1750[__sa1864];
        }
      }
      bit _pac_s1759;
      _pac_s1759 = 0;
      assert ((_pac_s1759 >= 0) && (_pac_s1759 < 4)); //aux.skh:274: Either null pointer or Array out of bounds
      active__ANONYMOUS_s731_79[_pac_s1759] = 1;
    }
  }
}
/*aux.skh:174*/

void intMutate (int c1_2f1, int c2_2f2, ref global bit[4] active__ANONYMOUS_s870_2f3, ref global bit error_flag__ANONYMOUS_s1616_2f4, ref global int fake_unfold__ANONYMOUS_s871_2f5, ref global bit[4 * 4] history__ANONYMOUS_s942_2f6, ref global int[2] intvars__ANONYMOUS_s872_2f7, ref global int[4] key__ANONYMOUS_s873_2f8, ref global int[3] locvars__ANONYMOUS_s874_2f9, ref global int[4] next__ANONYMOUS_s943_2fa, ref global bit[4 * 4] p_history__ANONYMOUS_s944_2fb, ref global bit[4] symbolic__ANONYMOUS_s875_2fc, ref global int ts__ANONYMOUS_s876_2fd)/*aux.skh:174*/
{
  {
    {
      int choice_2fe;
      choice_2fe = c1_2f1;
      assert (choice_2fe > 0); //Assert at aux.skh:177 (-6019683098484786185)
      assert (choice_2fe < 3); //Assert at aux.skh:178 (4763679666406568598)
      int choice2_2ff;
      choice2_2ff = c2_2f2;
      assert (choice2_2ff >= 0); //Assert at aux.skh:180 (-919021114529902745)
      assert (choice2_2ff < 2); //Assert at aux.skh:181 (-8675315373493617061)
      int df_300;
      assert ((choice_2fe >= 0) && (choice_2fe < 3)); //aux.skh:184: Array out of bounds
      df_300 = locvars__ANONYMOUS_s874_2f9[choice_2fe];
      bit b_319_s1720;
      b_319_s1720 = df_300 >= 0;
      assumePre@ANONYMOUS(b_319_s1720, error_flag__ANONYMOUS_s1616_2f4);
      bit b_319_s1721;
      b_319_s1721 = df_300 < 4;
      assumePre@ANONYMOUS(b_319_s1721, error_flag__ANONYMOUS_s1616_2f4);
      if((df_300 < 0) || (df_300 >= 4))/*aux.skh:187*/
      {
        return;
      }
      if(df_300 == 0)/*aux.skh:190*/
      {
        return;
      }
      assert ((df_300 >= 0) && (df_300 < 4)); //aux.skh:191: Array out of bounds
      if(!(active__ANONYMOUS_s870_2f3[df_300]))/*aux.skh:191*/
      {
        return;
      }
      bit _pac_sc_s1798;
      {
        assert ((df_300 >= 0) && (df_300 < 4)); //aux.skh:192: Array out of bounds
        _pac_sc_s1798 = symbolic__ANONYMOUS_s875_2fc[df_300];
        if(_pac_sc_s1798)/*aux.skh:192*/
        {
          _pac_sc_s1798 = fake_unfold__ANONYMOUS_s871_2f5 != df_300;
        }
      }
      if(_pac_sc_s1798)/*aux.skh:192*/
      {
        return;
      }
      int k_301;
      assert ((choice2_2ff >= 0) && (choice2_2ff < 2)); //aux.skh:194: Array out of bounds
      k_301 = intvars__ANONYMOUS_s872_2f7[choice2_2ff];
      int uo_s15_302;
      uo_s15_302 = ts__ANONYMOUS_s876_2fd;
      ts__ANONYMOUS_s876_2fd = ts__ANONYMOUS_s876_2fd + 1;
      uo_s15_302;
      assert ((df_300 >= 0) && (df_300 < 4)); //aux.skh:197: Either null pointer or Array out of bounds
      key__ANONYMOUS_s873_2f8[df_300] = k_301;
      connect_defs@ANONYMOUS(active__ANONYMOUS_s870_2f3, history__ANONYMOUS_s942_2f6, next__ANONYMOUS_s943_2fa, p_history__ANONYMOUS_s944_2fb, symbolic__ANONYMOUS_s875_2fc, ts__ANONYMOUS_s876_2fd);
    }
  }
}
/*aux.skh:121*/

void intVarAssign (int c1_2ba, int c2_2bb, int c3_2bc, ref global int[2] intvars__ANONYMOUS_s925_2bd)/*aux.skh:121*/
{
  {
    {
      int choice_2be;
      choice_2be = c1_2ba;
      assert (choice_2be >= 0); //Assert at aux.skh:124 (1359182931277413820)
      assert (choice_2be < 2); //Assert at aux.skh:125 (2338604081878362564)
      int choice2_2bf;
      choice2_2bf = c2_2bb;
      assert (choice2_2bf >= 0); //Assert at aux.skh:128 (1738577540031325296)
      assert (choice2_2bf < 2); //Assert at aux.skh:129 (-9104302101463195539)
      int val_choice_2c0;
      val_choice_2c0 = c3_2bc;
      if(val_choice_2c0 == 0)/*aux.skh:132*/
      {
        assert ((choice_2be >= 0) && (choice_2be < 2)); //aux.skh:132: Either null pointer or Array out of bounds
        intvars__ANONYMOUS_s925_2bd[choice_2be] = 0;
      }
      else
      {
        if(val_choice_2c0 == 7)/*aux.skh:133*/
        {
          assert ((choice_2be >= 0) && (choice_2be < 2)); //aux.skh:133: Either null pointer or Array out of bounds
          intvars__ANONYMOUS_s925_2bd[choice_2be] = 7;
        }
        else
        {
          if(val_choice_2c0 == 1)/*aux.skh:134*/
          {
            assert ((choice2_2bf >= 0) && (choice2_2bf < 2)); //aux.skh:134: Array out of bounds
            assert ((choice_2be >= 0) && (choice_2be < 2)); //aux.skh:134: Either null pointer or Array out of bounds
            intvars__ANONYMOUS_s925_2bd[choice_2be] = intvars__ANONYMOUS_s925_2bd[choice2_2bf];
          }
          else
          {
            if(val_choice_2c0 == 2)/*aux.skh:135*/
            {
              assert ((choice2_2bf >= 0) && (choice2_2bf < 2)); //aux.skh:135: Array out of bounds
              assert ((choice_2be >= 0) && (choice_2be < 2)); //aux.skh:135: Either null pointer or Array out of bounds
              intvars__ANONYMOUS_s925_2bd[choice_2be] = (intvars__ANONYMOUS_s925_2bd[choice2_2bf]) + 1;
            }
            else
            {
              if(val_choice_2c0 == 3)/*aux.skh:136*/
              {
                assert ((choice2_2bf >= 0) && (choice2_2bf < 2)); //aux.skh:136: Array out of bounds
                assert ((choice_2be >= 0) && (choice_2be < 2)); //aux.skh:136: Either null pointer or Array out of bounds
                intvars__ANONYMOUS_s925_2bd[choice_2be] = (intvars__ANONYMOUS_s925_2bd[choice2_2bf]) - 1;
              }
            }
          }
        }
      }
    }
  }
}
/*sll_len_rec.sk:93*/

void int_id0 (int intrange_190, ref int _out_191)/*sll_len_rec.sk:93*/
{
  {
    {
      _out_191 = 0;
      int _out_s206_192;
      int r_193;
      r_193 = intrange_190;
      bit _has_out__194;
      _has_out__194 = 0;
      _out_s206_192 = 0;
      _out_s206_192 = ??/* H__1_395int:3 */;
      assert ((_out_s206_192 >= 0) && (_out_s206_192 < r_193)); //Assert at aux.skh:63 (1955052870986062035)
      _has_out__194 = 1;
      _out_191 = _out_s206_192;
      return;
    }
  }
}
/*sll_len_rec.sk:96*/

void int_id1 (int intrange_1e2, ref int _out_1e3)/*sll_len_rec.sk:96*/
{
  {
    {
      _out_1e3 = 0;
      int _out_s81_1e4;
      int r_1e5;
      r_1e5 = intrange_1e2;
      bit _has_out__1e6;
      _has_out__1e6 = 0;
      _out_s81_1e4 = 0;
      _out_s81_1e4 = ??/* H__1_396int:3 */;
      assert ((_out_s81_1e4 >= 0) && (_out_s81_1e4 < r_1e5)); //Assert at aux.skh:63 (1955052870986062035)
      _has_out__1e6 = 1;
      _out_1e3 = _out_s81_1e4;
      return;
    }
  }
}
/*lseg_header.skh:509*/

void intderef2var (int c1_29c, int c2_29d, ref global bit[4] active__ANONYMOUS_s857_29e, ref global bit error_flag__ANONYMOUS_s1222_29f, ref global bit[4 * 4] history__ANONYMOUS_s1261_2a0, ref global int[2] intvars__ANONYMOUS_s858_2a1, ref global int[4] key__ANONYMOUS_s859_2a2, ref global int[3] locvars__ANONYMOUS_s860_2a3, ref global int[4] next__ANONYMOUS_s861_2a4, ref global bit[4 * 4] p_history__ANONYMOUS_s1223_2a5, ref global int[4] supernext__ANONYMOUS_s1224_2a6, ref global bit[4] symbolic__ANONYMOUS_s862_2a7, ref global int ts__ANONYMOUS_s863_2a8)/*lseg_header.skh:509*/
{
  {
    {
      int choice_2a9;
      choice_2a9 = c1_29c;
      assert (choice_2a9 > 0); //Assert at lseg_header.skh:512 (-6570540208712734236)
      assert (choice_2a9 < 3); //Assert at lseg_header.skh:513 (-4837555711648647335)
      int choice2_2aa;
      choice2_2aa = c2_29d;
      assert (choice2_2aa >= 0); //Assert at lseg_header.skh:515 (5142141467797464448)
      assert (choice2_2aa < 2); //Assert at lseg_header.skh:516 (-5740063747232863414)
      int l_2ab;
      assert ((choice_2a9 >= 0) && (choice_2a9 < 3)); //lseg_header.skh:519: Array out of bounds
      l_2ab = locvars__ANONYMOUS_s860_2a3[choice_2a9];
      bit b_18e_s1704;
      b_18e_s1704 = l_2ab > 0;
      assertPost@ANONYMOUS(b_18e_s1704, error_flag__ANONYMOUS_s1222_29f);
      bit b_18e_s1705;
      b_18e_s1705 = l_2ab < 4;
      assertPost@ANONYMOUS(b_18e_s1705, error_flag__ANONYMOUS_s1222_29f);
      if((l_2ab <= 0) || (l_2ab >= 4))/*lseg_header.skh:522*/
      {
        return;
      }
      assert ((l_2ab >= 0) && (l_2ab < 4)); //lseg_header.skh:523: Array out of bounds
      if(!(active__ANONYMOUS_s857_29e[l_2ab]))/*lseg_header.skh:523*/
      {
        return;
      }
      int test_2ac;
      assert ((l_2ab >= 0) && (l_2ab < 4)); //lseg_header.skh:526: Array out of bounds
      test_2ac = next__ANONYMOUS_s861_2a4[l_2ab];
      assert ((l_2ab >= 0) && (l_2ab < 4)); //lseg_header.skh:528: Array out of bounds
      if(!(symbolic__ANONYMOUS_s862_2a7[l_2ab]))/*lseg_header.skh:528*/
      {
        bit b_319_s1706;
        b_319_s1706 = test_2ac >= 0;
        assumePre@ANONYMOUS(b_319_s1706, error_flag__ANONYMOUS_s1222_29f);
        bit b_319_s1707;
        b_319_s1707 = test_2ac < 4;
        assumePre@ANONYMOUS(b_319_s1707, error_flag__ANONYMOUS_s1222_29f);
        if((test_2ac < 0) || (test_2ac >= 4))/*lseg_header.skh:531*/
        {
          return;
        }
        assert ((l_2ab >= 0) && (l_2ab < 4)); //lseg_header.skh:534: Array out of bounds
        assert ((choice2_2aa >= 0) && (choice2_2aa < 2)); //lseg_header.skh:534: Either null pointer or Array out of bounds
        intvars__ANONYMOUS_s858_2a1[choice2_2aa] = key__ANONYMOUS_s859_2a2[l_2ab];
        return;
      }
      int ln_2ad;
      ln_2ad = test_2ac;
      if(test_2ac > 0)/*lseg_header.skh:540*/
      {
        ln_2ad = 1;
        bit __sa12_2ae;
        bit _pac_sc_s1788;
        {
          _pac_sc_s1788 = 1;
          if(_pac_sc_s1788)/*lseg_header.skh:542*/
          {
            bit _pac_s1789;
            _pac_s1789 = 1;
            assert ((_pac_s1789 >= 0) && (_pac_s1789 < 4)); //lseg_header.skh:542: Array out of bounds
            _pac_sc_s1788 = active__ANONYMOUS_s857_29e[_pac_s1789];
          }
        }
        __sa12_2ae = _pac_sc_s1788;
        while(__sa12_2ae)
        {
          int uo_s21_2b1;
          uo_s21_2b1 = ln_2ad;
          ln_2ad = ln_2ad + 1;
          uo_s21_2b1;
          bit _pac_sc_s1790;
          {
            _pac_sc_s1790 = ln_2ad < 4;
            if(_pac_sc_s1790)/*lseg_header.skh:542*/
            {
              assert ((ln_2ad >= 0) && (ln_2ad < 4)); //lseg_header.skh:542: Array out of bounds
              _pac_sc_s1790 = active__ANONYMOUS_s857_29e[ln_2ad];
            }
          }
          __sa12_2ae = _pac_sc_s1790;
        }
        bit b_319_s1708;
        b_319_s1708 = ln_2ad < 4;
        assumePre@ANONYMOUS(b_319_s1708, error_flag__ANONYMOUS_s1222_29f);
        if(ln_2ad >= 4)/*lseg_header.skh:546*/
        {
          return;
        }
        assert ((ln_2ad >= 0) && (ln_2ad < 4)); //lseg_header.skh:549: Either null pointer or Array out of bounds
        active__ANONYMOUS_s857_29e[ln_2ad] = 1;
        assert ((ln_2ad >= 0) && (ln_2ad < 4)); //lseg_header.skh:550: Either null pointer or Array out of bounds
        symbolic__ANONYMOUS_s862_2a7[ln_2ad] = 1;
        assert ((l_2ab >= 0) && (l_2ab < 4)); //lseg_header.skh:551: Either null pointer or Array out of bounds
        next__ANONYMOUS_s861_2a4[l_2ab] = ln_2ad;
      }
      assert ((l_2ab >= 0) && (l_2ab < 4)); //lseg_header.skh:554: Array out of bounds
      assert ((choice2_2aa >= 0) && (choice2_2aa < 2)); //lseg_header.skh:554: Either null pointer or Array out of bounds
      intvars__ANONYMOUS_s858_2a1[choice2_2aa] = key__ANONYMOUS_s859_2a2[l_2ab];
      assert ((l_2ab >= 0) && (l_2ab < 4)); //lseg_header.skh:555: Either null pointer or Array out of bounds
      symbolic__ANONYMOUS_s862_2a7[l_2ab] = 0;
      bit _out_s99_2b2;
      sll(l_2ab, ts__ANONYMOUS_s863_2a8, _out_s99_2b2);
      bit _out_s101_2b3;
      sll_comp@ANONYMOUS(l_2ab, _out_s101_2b3, active__ANONYMOUS_s857_29e, history__ANONYMOUS_s1261_2a0, key__ANONYMOUS_s859_2a2, next__ANONYMOUS_s861_2a4, p_history__ANONYMOUS_s1223_2a5, supernext__ANONYMOUS_s1224_2a6, symbolic__ANONYMOUS_s862_2a7, ts__ANONYMOUS_s863_2a8);
      bit b_319_s1709;
      b_319_s1709 = _out_s99_2b2 == _out_s101_2b3;
      assumePre@ANONYMOUS(b_319_s1709, error_flag__ANONYMOUS_s1222_29f);
      int _out_s103_2b4;
      len(l_2ab, ts__ANONYMOUS_s863_2a8, _out_s103_2b4);
      int _out_s105_2b5;
      len_comp@ANONYMOUS(l_2ab, _out_s105_2b5, active__ANONYMOUS_s857_29e, history__ANONYMOUS_s1261_2a0, next__ANONYMOUS_s861_2a4, p_history__ANONYMOUS_s1223_2a5, supernext__ANONYMOUS_s1224_2a6, symbolic__ANONYMOUS_s862_2a7, ts__ANONYMOUS_s863_2a8);
      bit b_319_s1710;
      b_319_s1710 = _out_s103_2b4 == _out_s105_2b5;
      assumePre@ANONYMOUS(b_319_s1710, error_flag__ANONYMOUS_s1222_29f);
      int _out_s107_2b6;
      min(l_2ab, ts__ANONYMOUS_s863_2a8, _out_s107_2b6);
      int _out_s109_2b7;
      min_comp@ANONYMOUS(l_2ab, _out_s109_2b7, active__ANONYMOUS_s857_29e, history__ANONYMOUS_s1261_2a0, key__ANONYMOUS_s859_2a2, next__ANONYMOUS_s861_2a4, p_history__ANONYMOUS_s1223_2a5, supernext__ANONYMOUS_s1224_2a6, symbolic__ANONYMOUS_s862_2a7, ts__ANONYMOUS_s863_2a8);
      bit b_319_s1711;
      b_319_s1711 = _out_s107_2b6 == _out_s109_2b7;
      assumePre@ANONYMOUS(b_319_s1711, error_flag__ANONYMOUS_s1222_29f);
      int _out_s111_2b8;
      max(l_2ab, ts__ANONYMOUS_s863_2a8, _out_s111_2b8);
      int _out_s113_2b9;
      max_comp@ANONYMOUS(l_2ab, _out_s113_2b9, active__ANONYMOUS_s857_29e, history__ANONYMOUS_s1261_2a0, key__ANONYMOUS_s859_2a2, next__ANONYMOUS_s861_2a4, p_history__ANONYMOUS_s1223_2a5, supernext__ANONYMOUS_s1224_2a6, symbolic__ANONYMOUS_s862_2a7, ts__ANONYMOUS_s863_2a8);
      bit b_319_s1712;
      b_319_s1712 = _out_s111_2b8 == _out_s113_2b9;
      assumePre@ANONYMOUS(b_319_s1712, error_flag__ANONYMOUS_s1222_29f);
    }
  }
}
/*lseg_header.skh:648*/

void intderef_lt_var (int c1_257, int c2_258, ref bit _out_259, ref global bit[4] active__ANONYMOUS_s820_25a, ref global bit error_flag__ANONYMOUS_s1387_25b, ref global int fake_unfold__ANONYMOUS_s821_25c, ref global int fake_unfold_to__ANONYMOUS_s822_25d, ref global bit[4 * 4] history__ANONYMOUS_s1266_25e, ref global int[2] intvars__ANONYMOUS_s823_25f, ref global int[4] key__ANONYMOUS_s824_260, ref global int[3] locvars__ANONYMOUS_s825_261, ref global int[4] next__ANONYMOUS_s826_262, ref global bit[4 * 4] p_history__ANONYMOUS_s1171_263, ref global int[4] supernext__ANONYMOUS_s1191_264, ref global bit[4] symbolic__ANONYMOUS_s827_265, ref global int ts__ANONYMOUS_s828_266)/*lseg_header.skh:648*/
{
  {
    {
      _out_259 = 0;
      int choice_267;
      choice_267 = c1_257;
      assert (choice_267 > 0); //Assert at lseg_header.skh:651 (5201571079670302693)
      assert (choice_267 < 3); //Assert at lseg_header.skh:652 (-6148610762002477679)
      int choice2_268;
      choice2_268 = c2_258;
      assert (choice2_268 >= 0); //Assert at lseg_header.skh:654 (-6426909681043382619)
      assert (choice2_268 < 2); //Assert at lseg_header.skh:655 (-964031865840097259)
      int l_269;
      assert ((choice_267 >= 0) && (choice_267 < 3)); //lseg_header.skh:658: Array out of bounds
      l_269 = locvars__ANONYMOUS_s825_261[choice_267];
      bit b_18e_s1683;
      b_18e_s1683 = l_269 > 0;
      assertPost@ANONYMOUS(b_18e_s1683, error_flag__ANONYMOUS_s1387_25b);
      bit b_18e_s1684;
      b_18e_s1684 = l_269 < 4;
      assertPost@ANONYMOUS(b_18e_s1684, error_flag__ANONYMOUS_s1387_25b);
      if((l_269 <= 0) || (l_269 >= 4))/*lseg_header.skh:661*/
      {
        _out_259 = 0;
        return;
      }
      assert ((l_269 >= 0) && (l_269 < 4)); //lseg_header.skh:662: Array out of bounds
      if(!(active__ANONYMOUS_s820_25a[l_269]))/*lseg_header.skh:662*/
      {
        _out_259 = 0;
        return;
      }
      int test_26a;
      assert ((l_269 >= 0) && (l_269 < 4)); //lseg_header.skh:665: Array out of bounds
      test_26a = next__ANONYMOUS_s826_262[l_269];
      assert ((l_269 >= 0) && (l_269 < 4)); //lseg_header.skh:667: Array out of bounds
      if(!(symbolic__ANONYMOUS_s827_265[l_269]))/*lseg_header.skh:667*/
      {
        bit b_319_s1685;
        b_319_s1685 = test_26a >= 0;
        assumePre@ANONYMOUS(b_319_s1685, error_flag__ANONYMOUS_s1387_25b);
        bit b_319_s1686;
        b_319_s1686 = test_26a < 4;
        assumePre@ANONYMOUS(b_319_s1686, error_flag__ANONYMOUS_s1387_25b);
        if((test_26a < 0) || (test_26a >= 4))/*lseg_header.skh:670*/
        {
          _out_259 = 0;
          return;
        }
        assert ((l_269 >= 0) && (l_269 < 4)); //lseg_header.skh:673: Array out of bounds
        assert ((choice2_268 >= 0) && (choice2_268 < 2)); //lseg_header.skh:673: Array out of bounds
        _out_259 = (key__ANONYMOUS_s824_260[l_269]) < (intvars__ANONYMOUS_s823_25f[choice2_268]);
        return;
      }
      int ln_26b;
      ln_26b = test_26a;
      if(test_26a > 0)/*lseg_header.skh:678*/
      {
        ln_26b = 1;
        bit __sa14_26c;
        bit _pac_sc_s1782;
        {
          _pac_sc_s1782 = 1;
          if(_pac_sc_s1782)/*lseg_header.skh:680*/
          {
            bit _pac_s1783;
            _pac_s1783 = 1;
            assert ((_pac_s1783 >= 0) && (_pac_s1783 < 4)); //lseg_header.skh:680: Array out of bounds
            _pac_sc_s1782 = active__ANONYMOUS_s820_25a[_pac_s1783];
          }
        }
        __sa14_26c = _pac_sc_s1782;
        while(__sa14_26c)
        {
          int uo_s34_26f;
          uo_s34_26f = ln_26b;
          ln_26b = ln_26b + 1;
          uo_s34_26f;
          bit _pac_sc_s1784;
          {
            _pac_sc_s1784 = ln_26b < 4;
            if(_pac_sc_s1784)/*lseg_header.skh:680*/
            {
              assert ((ln_26b >= 0) && (ln_26b < 4)); //lseg_header.skh:680: Array out of bounds
              _pac_sc_s1784 = active__ANONYMOUS_s820_25a[ln_26b];
            }
          }
          __sa14_26c = _pac_sc_s1784;
        }
        bit b_319_s1687;
        b_319_s1687 = ln_26b < 4;
        assumePre@ANONYMOUS(b_319_s1687, error_flag__ANONYMOUS_s1387_25b);
        if(ln_26b >= 4)/*lseg_header.skh:684*/
        {
          _out_259 = 0;
          return;
        }
        bit b_18e_s1688;
        b_18e_s1688 = (fake_unfold__ANONYMOUS_s821_25c == 0) || (fake_unfold__ANONYMOUS_s821_25c == l_269);
        assertPost@ANONYMOUS(b_18e_s1688, error_flag__ANONYMOUS_s1387_25b);
        bit b_18e_s1689;
        b_18e_s1689 = (fake_unfold_to__ANONYMOUS_s822_25d == 0) || (fake_unfold_to__ANONYMOUS_s822_25d == ln_26b);
        assertPost@ANONYMOUS(b_18e_s1689, error_flag__ANONYMOUS_s1387_25b);
        fake_unfold__ANONYMOUS_s821_25c = l_269;
        fake_unfold_to__ANONYMOUS_s822_25d = ln_26b;
        assert ((ln_26b >= 0) && (ln_26b < 4)); //lseg_header.skh:691: Either null pointer or Array out of bounds
        active__ANONYMOUS_s820_25a[ln_26b] = 1;
        assert ((ln_26b >= 0) && (ln_26b < 4)); //lseg_header.skh:692: Either null pointer or Array out of bounds
        symbolic__ANONYMOUS_s827_265[ln_26b] = 1;
        assert ((l_269 >= 0) && (l_269 < 4)); //lseg_header.skh:693: Either null pointer or Array out of bounds
        next__ANONYMOUS_s826_262[l_269] = ln_26b;
      }
      assert ((l_269 >= 0) && (l_269 < 4)); //lseg_header.skh:696: Either null pointer or Array out of bounds
      symbolic__ANONYMOUS_s827_265[l_269] = 0;
      bit _out_s255_270;
      sll(l_269, ts__ANONYMOUS_s828_266, _out_s255_270);
      bit _out_s257_271;
      sll_comp@ANONYMOUS(l_269, _out_s257_271, active__ANONYMOUS_s820_25a, history__ANONYMOUS_s1266_25e, key__ANONYMOUS_s824_260, next__ANONYMOUS_s826_262, p_history__ANONYMOUS_s1171_263, supernext__ANONYMOUS_s1191_264, symbolic__ANONYMOUS_s827_265, ts__ANONYMOUS_s828_266);
      bit b_319_s1690;
      b_319_s1690 = _out_s255_270 == _out_s257_271;
      assumePre@ANONYMOUS(b_319_s1690, error_flag__ANONYMOUS_s1387_25b);
      int _out_s259_272;
      len(l_269, ts__ANONYMOUS_s828_266, _out_s259_272);
      int _out_s261_273;
      len_comp@ANONYMOUS(l_269, _out_s261_273, active__ANONYMOUS_s820_25a, history__ANONYMOUS_s1266_25e, next__ANONYMOUS_s826_262, p_history__ANONYMOUS_s1171_263, supernext__ANONYMOUS_s1191_264, symbolic__ANONYMOUS_s827_265, ts__ANONYMOUS_s828_266);
      bit b_319_s1691;
      b_319_s1691 = _out_s259_272 == _out_s261_273;
      assumePre@ANONYMOUS(b_319_s1691, error_flag__ANONYMOUS_s1387_25b);
      int _out_s263_274;
      min(l_269, ts__ANONYMOUS_s828_266, _out_s263_274);
      int _out_s265_275;
      min_comp@ANONYMOUS(l_269, _out_s265_275, active__ANONYMOUS_s820_25a, history__ANONYMOUS_s1266_25e, key__ANONYMOUS_s824_260, next__ANONYMOUS_s826_262, p_history__ANONYMOUS_s1171_263, supernext__ANONYMOUS_s1191_264, symbolic__ANONYMOUS_s827_265, ts__ANONYMOUS_s828_266);
      bit b_319_s1692;
      b_319_s1692 = _out_s263_274 == _out_s265_275;
      assumePre@ANONYMOUS(b_319_s1692, error_flag__ANONYMOUS_s1387_25b);
      int _out_s267_276;
      max(l_269, ts__ANONYMOUS_s828_266, _out_s267_276);
      int _out_s269_277;
      max_comp@ANONYMOUS(l_269, _out_s269_277, active__ANONYMOUS_s820_25a, history__ANONYMOUS_s1266_25e, key__ANONYMOUS_s824_260, next__ANONYMOUS_s826_262, p_history__ANONYMOUS_s1171_263, supernext__ANONYMOUS_s1191_264, symbolic__ANONYMOUS_s827_265, ts__ANONYMOUS_s828_266);
      bit b_319_s1693;
      b_319_s1693 = _out_s267_276 == _out_s269_277;
      assumePre@ANONYMOUS(b_319_s1693, error_flag__ANONYMOUS_s1387_25b);
      if(test_26a > 0)/*lseg_header.skh:704*/
      {
        assert ((ln_26b >= 0) && (ln_26b < 4)); //lseg_header.skh:705: Either null pointer or Array out of bounds
        active__ANONYMOUS_s820_25a[ln_26b] = 0;
      }
      assert ((l_269 >= 0) && (l_269 < 4)); //lseg_header.skh:707: Either null pointer or Array out of bounds
      symbolic__ANONYMOUS_s827_265[l_269] = 1;
      assert ((l_269 >= 0) && (l_269 < 4)); //lseg_header.skh:709: Array out of bounds
      assert ((choice2_268 >= 0) && (choice2_268 < 2)); //lseg_header.skh:709: Array out of bounds
      _out_259 = (key__ANONYMOUS_s824_260[l_269]) < (intvars__ANONYMOUS_s823_25f[choice2_268]);
      return;
    }
  }
}
/*lseg_header.skh:20*/

uninterp void len (int l, int t, ref int _out)/*lseg_header.skh:20*/
/*lseg_header.skh:129*/

void len_comp (int l_1fd, ref int _out_1fe, ref global bit[4] active__ANONYMOUS_s1600_1ff, ref global bit[4 * 4] history__ANONYMOUS_s1578_200, ref global int[4] next__ANONYMOUS_s1601_201, ref global bit[4 * 4] p_history__ANONYMOUS_s1602_202, ref global int[4] supernext__ANONYMOUS_s1603_203, ref global bit[4] symbolic__ANONYMOUS_s1604_204, ref global int ts__ANONYMOUS_s1579_205)/*lseg_header.skh:129*/
{
  {
    {
      _out_1fe = 0;
      int _out_s151_206;
      len_recursive@ANONYMOUS(l_1fd, 0, 3, _out_s151_206, active__ANONYMOUS_s1600_1ff, history__ANONYMOUS_s1578_200, next__ANONYMOUS_s1601_201, p_history__ANONYMOUS_s1602_202, supernext__ANONYMOUS_s1603_203, symbolic__ANONYMOUS_s1604_204, ts__ANONYMOUS_s1579_205);
      _out_1fe = _out_s151_206;
      return;
    }
  }
}
/*lseg_header.skh:158*/

void len_history (int l_391, int ts_0_392, ref int _out_393, ref global bit[4 * 4] history__ANONYMOUS_s878_394, ref global int ts__ANONYMOUS_s879_395)/*lseg_header.skh:158*/
{
  {
    {
      _out_393 = 0;
      int ts_396;
      ts_396 = ts_0_392;
      bit __sa4_397;
      bit _pac_sc_s1833;
      {
        _pac_sc_s1833 = ts_396 > 0;
        if(_pac_sc_s1833)/*lseg_header.skh:159*/
        {
          assert ((l_391 >= 0) && (l_391 < 4)); //lseg_header.skh:159: Array out of bounds
          assert ((ts_396 >= 0) && (ts_396 < 4)); //lseg_header.skh:159: Array out of bounds
          _pac_sc_s1833 = history__ANONYMOUS_s878_394[(4 * l_391) + ts_396];
        }
      }
      __sa4_397 = _pac_sc_s1833;
      while(__sa4_397)
      {
        int uo_s27_399;
        uo_s27_399 = ts_396;
        ts_396 = ts_396 - 1;
        uo_s27_399;
        bit _pac_sc_s1834;
        {
          _pac_sc_s1834 = ts_396 > 0;
          if(_pac_sc_s1834)/*lseg_header.skh:159*/
          {
            assert ((l_391 >= 0) && (l_391 < 4)); //lseg_header.skh:159: Array out of bounds
            assert ((ts_396 >= 0) && (ts_396 < 4)); //lseg_header.skh:159: Array out of bounds
            _pac_sc_s1834 = history__ANONYMOUS_s878_394[(4 * l_391) + ts_396];
          }
        }
        __sa4_397 = _pac_sc_s1834;
      }
      int _out_s165_39a;
      len(l_391, ts_396, _out_s165_39a);
      _out_393 = _out_s165_39a;
      return;
    }
  }
}
/*lseg_header.skh:134*/

void len_recursive (int l1_31b, int l2_31c, int bnd_31d, ref int _out_31e, ref global bit[4] active__ANONYMOUS_s715_31f, ref global bit[4 * 4] history__ANONYMOUS_s1626_320, ref global int[4] next__ANONYMOUS_s716_321, ref global bit[4 * 4] p_history__ANONYMOUS_s957_322, ref global int[4] supernext__ANONYMOUS_s717_323, ref global bit[4] symbolic__ANONYMOUS_s718_324, ref global int ts__ANONYMOUS_s719_325)/*lseg_header.skh:134*/
{
  {
    {
      _out_31e = 0;
      if((((l1_31b < 0) || (l1_31b >= 4)) || (l2_31c < 0)) || (l2_31c >= 4))/*lseg_header.skh:135*/
      {
        _out_31e = -1;
        return;
      }
      else
      {
        bit _pac_sc_s1809;
        {
          assert ((l1_31b >= 0) && (l1_31b < 4)); //lseg_header.skh:136: Array out of bounds
          _pac_sc_s1809 = !(active__ANONYMOUS_s715_31f[l1_31b]);
          if(!(_pac_sc_s1809))/*lseg_header.skh:136*/
          {
            assert ((l2_31c >= 0) && (l2_31c < 4)); //lseg_header.skh:136: Array out of bounds
            _pac_sc_s1809 = !(active__ANONYMOUS_s715_31f[l2_31c]);
          }
        }
        if(_pac_sc_s1809)/*lseg_header.skh:136*/
        {
          _out_31e = -1;
          return;
        }
        else
        {
          if(l1_31b == l2_31c)/*lseg_header.skh:138*/
          {
            bit _pac_sc_s1810;
            {
              _pac_sc_s1810 = l1_31b == 0;
              if(!(_pac_sc_s1810))/*lseg_header.skh:138*/
              {
                assert ((l1_31b >= 0) && (l1_31b < 4)); //lseg_header.skh:138: Array out of bounds
                _pac_sc_s1810 = (next__ANONYMOUS_s716_321[l1_31b]) != l1_31b;
              }
            }
            _out_31e = (_pac_sc_s1810 ? 0 : 1);
            return;
          }
          else
          {
            if(l1_31b == 0)/*lseg_header.skh:140*/
            {
              _out_31e = -1;
              return;
            }
            else
            {
              if(bnd_31d < 0)/*lseg_header.skh:141*/
              {
                _out_31e = -1;
                return;
              }
              else
              {
                assert ((l1_31b >= 0) && (l1_31b < 4)); //lseg_header.skh:143: Array out of bounds
                if(symbolic__ANONYMOUS_s718_324[l1_31b])/*lseg_header.skh:143*/
                {
                  if(l2_31c == 0)/*lseg_header.skh:144*/
                  {
                    int _out_s153_326;
                    len_history@ANONYMOUS(l1_31b, ts__ANONYMOUS_s719_325, _out_s153_326, history__ANONYMOUS_s1626_320, ts__ANONYMOUS_s719_325);
                    _out_31e = _out_s153_326;
                    return;
                  }
                  else
                  {
                    _out_31e = -1;
                    return;
                  }
                }
                else
                {
                  assert ((l1_31b >= 0) && (l1_31b < 4)); //lseg_header.skh:148: Array out of bounds
                  if(l2_31c == (next__ANONYMOUS_s716_321[l1_31b]))/*lseg_header.skh:148*/
                  {
                    bit _pac_sc_s1811;
                    {
                      _pac_sc_s1811 = l2_31c == 0;
                      if(!(_pac_sc_s1811))/*lseg_header.skh:148*/
                      {
                        assert ((l2_31c >= 0) && (l2_31c < 4)); //lseg_header.skh:148: Array out of bounds
                        _pac_sc_s1811 = (next__ANONYMOUS_s716_321[l2_31c]) != l2_31c;
                      }
                    }
                    _out_31e = (_pac_sc_s1811 ? 1 : 2);
                    return;
                  }
                  else
                  {
                    assert ((l1_31b >= 0) && (l1_31b < 4)); //lseg_header.skh:149: Array out of bounds
                    if(0 == (next__ANONYMOUS_s716_321[l1_31b]))/*lseg_header.skh:149*/
                    {
                      _out_31e = -1;
                      return;
                    }
                    else
                    {
                      bit _pac_sc_s1812;
                      {
                        assert ((l1_31b >= 0) && (l1_31b < 4)); //lseg_header.skh:150: Array out of bounds
                        _pac_sc_s1812 = 0 < (next__ANONYMOUS_s716_321[l1_31b]);
                        if(_pac_sc_s1812)/*lseg_header.skh:150*/
                        {
                          assert ((l1_31b >= 0) && (l1_31b < 4)); //lseg_header.skh:150: Array out of bounds
                          _pac_sc_s1812 = (next__ANONYMOUS_s716_321[l1_31b]) < 4;
                        }
                      }
                      if(_pac_sc_s1812)/*lseg_header.skh:150*/
                      {
                        int _out_s155_327;
                        int l1_31b_s1722;
                        assert ((l1_31b >= 0) && (l1_31b < 4)); //lseg_header.skh:150: Array out of bounds
                        l1_31b_s1722 = next__ANONYMOUS_s716_321[l1_31b];
                        int bnd_31d_s1723;
                        bnd_31d_s1723 = bnd_31d - 1;
                        len_recursive@ANONYMOUS(l1_31b_s1722, l2_31c, bnd_31d_s1723, _out_s155_327, active__ANONYMOUS_s715_31f, history__ANONYMOUS_s1626_320, next__ANONYMOUS_s716_321, p_history__ANONYMOUS_s957_322, supernext__ANONYMOUS_s717_323, symbolic__ANONYMOUS_s718_324, ts__ANONYMOUS_s719_325);
                        _out_31e = _out_s155_327 + 1;
                        return;
                      }
                      else
                      {
                        assert ((l1_31b >= 0) && (l1_31b < 4)); //lseg_header.skh:151: Array out of bounds
                        if(l2_31c == (supernext__ANONYMOUS_s717_323[l1_31b]))/*lseg_header.skh:151*/
                        {
                          int _out_s157_328;
                          lenseg_history@ANONYMOUS(l1_31b, ts__ANONYMOUS_s719_325, _out_s157_328, p_history__ANONYMOUS_s957_322, ts__ANONYMOUS_s719_325);
                          _out_31e = _out_s157_328;
                          return;
                        }
                        else
                        {
                          assert ((l1_31b >= 0) && (l1_31b < 4)); //lseg_header.skh:152: Array out of bounds
                          if(0 == (supernext__ANONYMOUS_s717_323[l1_31b]))/*lseg_header.skh:152*/
                          {
                            _out_31e = -1;
                            return;
                          }
                          else
                          {
                            bit _pac_sc_s1813;
                            {
                              assert ((l1_31b >= 0) && (l1_31b < 4)); //lseg_header.skh:153: Array out of bounds
                              _pac_sc_s1813 = 0 < (supernext__ANONYMOUS_s717_323[l1_31b]);
                              if(_pac_sc_s1813)/*lseg_header.skh:153*/
                              {
                                assert ((l1_31b >= 0) && (l1_31b < 4)); //lseg_header.skh:153: Array out of bounds
                                _pac_sc_s1813 = (supernext__ANONYMOUS_s717_323[l1_31b]) < 4;
                              }
                            }
                            if(_pac_sc_s1813)/*lseg_header.skh:153*/
                            {
                              int _out_s159_329;
                              lenseg_history@ANONYMOUS(l1_31b, ts__ANONYMOUS_s719_325, _out_s159_329, p_history__ANONYMOUS_s957_322, ts__ANONYMOUS_s719_325);
                              int _out_s161_32a;
                              int l1_31b_s1724;
                              assert ((l1_31b >= 0) && (l1_31b < 4)); //lseg_header.skh:153: Array out of bounds
                              l1_31b_s1724 = supernext__ANONYMOUS_s717_323[l1_31b];
                              int bnd_31d_s1725;
                              bnd_31d_s1725 = bnd_31d - 1;
                              len_recursive@ANONYMOUS(l1_31b_s1724, l2_31c, bnd_31d_s1725, _out_s161_32a, active__ANONYMOUS_s715_31f, history__ANONYMOUS_s1626_320, next__ANONYMOUS_s716_321, p_history__ANONYMOUS_s957_322, supernext__ANONYMOUS_s717_323, symbolic__ANONYMOUS_s718_324, ts__ANONYMOUS_s719_325);
                              _out_31e = _out_s159_329 + _out_s161_32a;
                              return;
                            }
                            else
                            {
                              _out_31e = -1;
                              return;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
/*lseg_header.skh:27*/

uninterp void lenseg (int l1, int t, ref int _out)/*lseg_header.skh:27*/
/*lseg_header.skh:163*/

void lenseg_comp (int l1_22e, int l2_22f, ref int _out_230, ref global bit[4] active__ANONYMOUS_s1381_231, ref global bit[4 * 4] history__ANONYMOUS_s1410_232, ref global int[4] next__ANONYMOUS_s1382_233, ref global bit[4 * 4] p_history__ANONYMOUS_s1269_234, ref global int[4] supernext__ANONYMOUS_s1383_235, ref global bit[4] symbolic__ANONYMOUS_s1384_236, ref global int ts__ANONYMOUS_s1270_237)/*lseg_header.skh:163*/
{
  {
    {
      _out_230 = 0;
      int _out_s234_238;
      len_recursive@ANONYMOUS(l1_22e, l2_22f, 3, _out_s234_238, active__ANONYMOUS_s1381_231, history__ANONYMOUS_s1410_232, next__ANONYMOUS_s1382_233, p_history__ANONYMOUS_s1269_234, supernext__ANONYMOUS_s1383_235, symbolic__ANONYMOUS_s1384_236, ts__ANONYMOUS_s1270_237);
      _out_230 = _out_s234_238;
      return;
    }
  }
}
/*lseg_header.skh:168*/

void lenseg_history (int l1_39b, int ts_0_39c, ref int _out_39d, ref global bit[4 * 4] p_history__ANONYMOUS_s880_39e, ref global int ts__ANONYMOUS_s881_39f)/*lseg_header.skh:168*/
{
  {
    {
      _out_39d = 0;
      int ts_3a0;
      ts_3a0 = ts_0_39c;
      bit __sa5_3a1;
      bit _pac_sc_s1835;
      {
        _pac_sc_s1835 = ts_3a0 > 0;
        if(_pac_sc_s1835)/*lseg_header.skh:169*/
        {
          assert ((l1_39b >= 0) && (l1_39b < 4)); //lseg_header.skh:169: Array out of bounds
          assert ((ts_3a0 >= 0) && (ts_3a0 < 4)); //lseg_header.skh:169: Array out of bounds
          _pac_sc_s1835 = p_history__ANONYMOUS_s880_39e[(4 * l1_39b) + ts_3a0];
        }
      }
      __sa5_3a1 = _pac_sc_s1835;
      while(__sa5_3a1)
      {
        int uo_s26_3a3;
        uo_s26_3a3 = ts_3a0;
        ts_3a0 = ts_3a0 - 1;
        uo_s26_3a3;
        bit _pac_sc_s1836;
        {
          _pac_sc_s1836 = ts_3a0 > 0;
          if(_pac_sc_s1836)/*lseg_header.skh:169*/
          {
            assert ((l1_39b >= 0) && (l1_39b < 4)); //lseg_header.skh:169: Array out of bounds
            assert ((ts_3a0 >= 0) && (ts_3a0 < 4)); //lseg_header.skh:169: Array out of bounds
            _pac_sc_s1836 = p_history__ANONYMOUS_s880_39e[(4 * l1_39b) + ts_3a0];
          }
        }
        __sa5_3a1 = _pac_sc_s1836;
      }
      int _out_s163_3a4;
      lenseg(l1_39b, ts_3a0, _out_s163_3a4);
      _out_39d = _out_s163_3a4;
      return;
    }
  }
}
/*sll_len_rec.sk:45*/

void list_comp_len_rec0 (int[2] llocvars_0_35, int[2] lintvars_1_36, int[3] lnext_2_37, int[3] lsupernext_3_38, int[3] lkey_4_39, bit[3] lsymbolic_5_3a, bit[3] lactive_6_3b, int ret_value_7_3c, bit[3] new_symbolic_8_3d, int[3] new_next_9_3e, int[3] new_supernext_10_3f, int[3] new_key_11_40, ref global bit[4] active__ANONYMOUS_s1155_41, ref global bit error_flag__ANONYMOUS_s1007_42, ref global int fake_unfold__ANONYMOUS_s1202_43, ref global int fake_unfold_to__ANONYMOUS_s1545_44, ref global bit[4 * 4] history__ANONYMOUS_s954_45, ref global int[2] intvars__ANONYMOUS_s1203_46, ref global int[4] key__ANONYMOUS_s1156_47, ref global int[4] left__ANONYMOUS_s1292_48, ref global int[3] locvars__ANONYMOUS_s1204_49, ref global int malloc_budget__ANONYMOUS_s1254_4a, ref global int newer_len__ANONYMOUS_s1610_4b, ref global int newer_sll__ANONYMOUS_s1611_4c, ref global int[4] next__ANONYMOUS_s1157_4d, ref global int old_len__ANONYMOUS_s810_4e, ref global int old_sll__ANONYMOUS_s811_4f, ref global bit[4 * 4] p_history__ANONYMOUS_s1158_50, ref global int ranking__ANONYMOUS_s1435_51, ref global int ret__ANONYMOUS_s812_52, ref global int[4] right__ANONYMOUS_s1293_53, ref global int[4] supernext__ANONYMOUS_s1159_54, ref global bit[4] symbolic__ANONYMOUS_s1160_55, ref global int ts__ANONYMOUS_s955_56)/*sll_len_rec.sk:45*/
{
  {
    {
      int[3] new_key_57;
      new_key_57 = new_key_11_40;
      int[3] new_supernext_58;
      new_supernext_58 = new_supernext_10_3f;
      int[3] new_next_59;
      new_next_59 = new_next_9_3e;
      bit[3] new_symbolic_5a;
      new_symbolic_5a = new_symbolic_8_3d;
      int ret_value_5b;
      ret_value_5b = ret_value_7_3c;
      bit[3] lactive_5c;
      lactive_5c = lactive_6_3b;
      bit[3] lsymbolic_5d;
      lsymbolic_5d = lsymbolic_5_3a;
      int[3] lkey_5e;
      lkey_5e = lkey_4_39;
      int[3] lsupernext_5f;
      lsupernext_5f = lsupernext_3_38;
      int[3] lnext_60;
      lnext_60 = lnext_2_37;
      int[2] lintvars_61;
      lintvars_61 = lintvars_1_36;
      int[2] llocvars_62;
      llocvars_62 = llocvars_0_35;
      int[3] lleft_63;
      {
        for(int __sa1868 = 0; __sa1868 < 0; __sa1868 = __sa1868 + 1)/*Canonical*/
        {
          lleft_63[__sa1868] = {}[__sa1868];
        }
        for(int __sa1869 = 0; __sa1869 < 3; __sa1869 = __sa1869 + 1)/*Canonical*/
        {
          lleft_63[__sa1869] = '\0';
        }
      }
      int[3] lright_64;
      {
        for(int __sa1870 = 0; __sa1870 < 0; __sa1870 = __sa1870 + 1)/*Canonical*/
        {
          lright_64[__sa1870] = {}[__sa1870];
        }
        for(int __sa1871 = 0; __sa1871 < 3; __sa1871 = __sa1871 + 1)/*Canonical*/
        {
          lright_64[__sa1871] = '\0';
        }
      }
      init@ANONYMOUS(llocvars_62, lintvars_61, lnext_60, lsupernext_5f, lleft_63, lright_64, lkey_5e, lsymbolic_5d, lactive_5c, active__ANONYMOUS_s1155_41, intvars__ANONYMOUS_s1203_46, key__ANONYMOUS_s1156_47, left__ANONYMOUS_s1292_48, locvars__ANONYMOUS_s1204_49, next__ANONYMOUS_s1157_4d, right__ANONYMOUS_s1293_53, supernext__ANONYMOUS_s1159_54, symbolic__ANONYMOUS_s1160_55);
      bit _pac_sc_s52_65;
      bit _pac_sc_s52_s54_66;
      basic_assumptions@ANONYMOUS(_pac_sc_s52_s54_66, active__ANONYMOUS_s1155_41, key__ANONYMOUS_s1156_47, left__ANONYMOUS_s1292_48, locvars__ANONYMOUS_s1204_49, next__ANONYMOUS_s1157_4d, right__ANONYMOUS_s1293_53, supernext__ANONYMOUS_s1159_54, symbolic__ANONYMOUS_s1160_55);
      _pac_sc_s52_65 = _pac_sc_s52_s54_66;
      if(_pac_sc_s52_65)/*sll_len_rec.sk:51*/
      {
        bit _pac_sc_s52_s56_67;
        basic_axioms@ANONYMOUS(_pac_sc_s52_s56_67, supernext__ANONYMOUS_s1159_54, ts__ANONYMOUS_s955_56);
        _pac_sc_s52_65 = _pac_sc_s52_s56_67;
      }
      assume (_pac_sc_s52_65): "Assume at sll_len_rec.sk:51"; //Assume at sll_len_rec.sk:51
      bit _out_s58_68;
      pre_cond_list_comp_len_rec@ANONYMOUS(2, _out_s58_68, active__ANONYMOUS_s1155_41, locvars__ANONYMOUS_s1204_49, next__ANONYMOUS_s1157_4d, supernext__ANONYMOUS_s1159_54, symbolic__ANONYMOUS_s1160_55);
      assume (_out_s58_68): "Assume at sll_len_rec.sk:53"; //Assume at sll_len_rec.sk:53
      snapshot_list_comp_len_rec@ANONYMOUS(2, old_sll__ANONYMOUS_s811_4f, old_len__ANONYMOUS_s810_4e, active__ANONYMOUS_s1155_41, history__ANONYMOUS_s954_45, locvars__ANONYMOUS_s1204_49, next__ANONYMOUS_s1157_4d, p_history__ANONYMOUS_s1158_50, supernext__ANONYMOUS_s1159_54, symbolic__ANONYMOUS_s1160_55, ts__ANONYMOUS_s955_56);
      ranking_snapshot@ANONYMOUS(1, 2, 1, active__ANONYMOUS_s1155_41, history__ANONYMOUS_s954_45, key__ANONYMOUS_s1156_47, locvars__ANONYMOUS_s1204_49, next__ANONYMOUS_s1157_4d, p_history__ANONYMOUS_s1158_50, ranking__ANONYMOUS_s1435_51, supernext__ANONYMOUS_s1159_54, symbolic__ANONYMOUS_s1160_55, ts__ANONYMOUS_s955_56);
      bit _out_s60_69;
      basic_cond0@ANONYMOUS(2, 2, _out_s60_69, active__ANONYMOUS_s1155_41, error_flag__ANONYMOUS_s1007_42, fake_unfold__ANONYMOUS_s1202_43, fake_unfold_to__ANONYMOUS_s1545_44, history__ANONYMOUS_s954_45, intvars__ANONYMOUS_s1203_46, key__ANONYMOUS_s1156_47, locvars__ANONYMOUS_s1204_49, next__ANONYMOUS_s1157_4d, p_history__ANONYMOUS_s1158_50, supernext__ANONYMOUS_s1159_54, symbolic__ANONYMOUS_s1160_55, ts__ANONYMOUS_s955_56);
      if(_out_s60_69)/*sll_len_rec.sk:59*/
      {
        statement0@ANONYMOUS(1, 2, 1, 0, active__ANONYMOUS_s1155_41, error_flag__ANONYMOUS_s1007_42, fake_unfold__ANONYMOUS_s1202_43, history__ANONYMOUS_s954_45, intvars__ANONYMOUS_s1203_46, key__ANONYMOUS_s1156_47, left__ANONYMOUS_s1292_48, locvars__ANONYMOUS_s1204_49, malloc_budget__ANONYMOUS_s1254_4a, next__ANONYMOUS_s1157_4d, p_history__ANONYMOUS_s1158_50, right__ANONYMOUS_s1293_53, supernext__ANONYMOUS_s1159_54, symbolic__ANONYMOUS_s1160_55, ts__ANONYMOUS_s955_56);
      }
      else
      {
        statement1@ANONYMOUS(1, 2, 1, 0, active__ANONYMOUS_s1155_41, error_flag__ANONYMOUS_s1007_42, fake_unfold__ANONYMOUS_s1202_43, history__ANONYMOUS_s954_45, intvars__ANONYMOUS_s1203_46, key__ANONYMOUS_s1156_47, left__ANONYMOUS_s1292_48, locvars__ANONYMOUS_s1204_49, malloc_budget__ANONYMOUS_s1254_4a, next__ANONYMOUS_s1157_4d, p_history__ANONYMOUS_s1158_50, right__ANONYMOUS_s1293_53, supernext__ANONYMOUS_s1159_54, symbolic__ANONYMOUS_s1160_55, ts__ANONYMOUS_s955_56);
        int rank_var_for_call_0_6a;
        int rank_var_for_call_0_s62_6b;
        loc_id0@ANONYMOUS(2, rank_var_for_call_0_s62_6b);
        rank_var_for_call_0_6a = rank_var_for_call_0_s62_6b;
        bit _out_s64_6c;
        ranking_decreases@ANONYMOUS(1, rank_var_for_call_0_6a, 1, _out_s64_6c, active__ANONYMOUS_s1155_41, history__ANONYMOUS_s954_45, key__ANONYMOUS_s1156_47, locvars__ANONYMOUS_s1204_49, next__ANONYMOUS_s1157_4d, p_history__ANONYMOUS_s1158_50, ranking__ANONYMOUS_s1435_51, supernext__ANONYMOUS_s1159_54, symbolic__ANONYMOUS_s1160_55, ts__ANONYMOUS_s955_56);
        assertPost@ANONYMOUS(_out_s64_6c, error_flag__ANONYMOUS_s1007_42);
        int _out_s66_6d;
        int_id0@ANONYMOUS(2, _out_s66_6d);
        rec_list_comp_len_rec@ANONYMOUS(rank_var_for_call_0_6a, _out_s66_6d, ret_value_5b, new_symbolic_5a, new_next_59, new_supernext_58, new_key_57, active__ANONYMOUS_s1155_41, error_flag__ANONYMOUS_s1007_42, history__ANONYMOUS_s954_45, intvars__ANONYMOUS_s1203_46, key__ANONYMOUS_s1156_47, locvars__ANONYMOUS_s1204_49, newer_len__ANONYMOUS_s1610_4b, newer_sll__ANONYMOUS_s1611_4c, next__ANONYMOUS_s1157_4d, p_history__ANONYMOUS_s1158_50, supernext__ANONYMOUS_s1159_54, symbolic__ANONYMOUS_s1160_55, ts__ANONYMOUS_s955_56);
        statement2@ANONYMOUS(1, 2, 1, 0, active__ANONYMOUS_s1155_41, error_flag__ANONYMOUS_s1007_42, fake_unfold__ANONYMOUS_s1202_43, history__ANONYMOUS_s954_45, intvars__ANONYMOUS_s1203_46, key__ANONYMOUS_s1156_47, left__ANONYMOUS_s1292_48, locvars__ANONYMOUS_s1204_49, malloc_budget__ANONYMOUS_s1254_4a, next__ANONYMOUS_s1157_4d, p_history__ANONYMOUS_s1158_50, right__ANONYMOUS_s1293_53, supernext__ANONYMOUS_s1159_54, symbolic__ANONYMOUS_s1160_55, ts__ANONYMOUS_s955_56);
      }
      int _out_s68_6e;
      int_id1@ANONYMOUS(2, _out_s68_6e);
      ret_int@ANONYMOUS(_out_s68_6e, ret__ANONYMOUS_s812_52);
      bit _out_s70_6f;
      post_cond_list_comp_len_rec@ANONYMOUS(ret__ANONYMOUS_s812_52, 2, old_len__ANONYMOUS_s810_4e, _out_s70_6f, active__ANONYMOUS_s1155_41, intvars__ANONYMOUS_s1203_46, locvars__ANONYMOUS_s1204_49, next__ANONYMOUS_s1157_4d, supernext__ANONYMOUS_s1159_54, symbolic__ANONYMOUS_s1160_55);
      assertPost@ANONYMOUS(_out_s70_6f, error_flag__ANONYMOUS_s1007_42);
    }
  }
}
/*sll_len_rec.sk:45*/

void list_comp_len_rec__Wrapper (int[2] llocvars_22, int[2] lintvars_23, int[3] lnext_24, int[3] lsupernext_25, int[3] lkey_26, bit[3] lsymbolic_27, bit[3] lactive_28, int ret_value_29, bit[3] new_symbolic_2a, int[3] new_next_2b, int[3] new_supernext_2c, int[3] new_key_2d)  implements list_comp_len_rec__WrapperNospec/*sll_len_rec.sk:45*/
{
  {
    {
      global int ts__ANONYMOUS_s1004_c;
      glblInit_ts__ANONYMOUS_s1654@ANONYMOUS(ts__ANONYMOUS_s1004_c);
      global bit[4] symbolic__ANONYMOUS_s1003_d;
      global int[4] supernext__ANONYMOUS_s1002_e;
      global int[4] right__ANONYMOUS_s1210_f;
      global int ret__ANONYMOUS_s1562_10;
      glblInit_ret__ANONYMOUS_s1652@ANONYMOUS(ret__ANONYMOUS_s1562_10);
      global int ranking__ANONYMOUS_s1561_11;
      glblInit_ranking__ANONYMOUS_s1650@ANONYMOUS(ranking__ANONYMOUS_s1561_11);
      global bit[4 * 4] p_history__ANONYMOUS_s1022_12;
      global int old_sll__ANONYMOUS_s1560_13;
      global int old_len__ANONYMOUS_s1559_14;
      global int[4] next__ANONYMOUS_s1001_15;
      global int newer_sll__ANONYMOUS_s1531_16;
      global int newer_len__ANONYMOUS_s1530_17;
      global int malloc_budget__ANONYMOUS_s1111_18;
      glblInit_malloc_budget__ANONYMOUS_s1648@ANONYMOUS(malloc_budget__ANONYMOUS_s1111_18);
      global int[3] locvars__ANONYMOUS_s972_19;
      global int[4] left__ANONYMOUS_s1209_1a;
      global int[4] key__ANONYMOUS_s1000_1b;
      global int[2] intvars__ANONYMOUS_s1021_1c;
      global bit[4 * 4] history__ANONYMOUS_s1020_1d;
      global int fake_unfold_to__ANONYMOUS_s1338_1e;
      glblInit_fake_unfold_to__ANONYMOUS_s1646@ANONYMOUS(fake_unfold_to__ANONYMOUS_s1338_1e);
      global int fake_unfold__ANONYMOUS_s1019_1f;
      glblInit_fake_unfold__ANONYMOUS_s1644@ANONYMOUS(fake_unfold__ANONYMOUS_s1019_1f);
      global bit error_flag__ANONYMOUS_s1208_20;
      glblInit_error_flag__ANONYMOUS_s1642@ANONYMOUS(error_flag__ANONYMOUS_s1208_20);
      global bit[4] active__ANONYMOUS_s999_21;
      list_comp_len_rec0@ANONYMOUS(llocvars_22, lintvars_23, lnext_24, lsupernext_25, lkey_26, lsymbolic_27, lactive_28, ret_value_29, new_symbolic_2a, new_next_2b, new_supernext_2c, new_key_2d, active__ANONYMOUS_s999_21, error_flag__ANONYMOUS_s1208_20, fake_unfold__ANONYMOUS_s1019_1f, fake_unfold_to__ANONYMOUS_s1338_1e, history__ANONYMOUS_s1020_1d, intvars__ANONYMOUS_s1021_1c, key__ANONYMOUS_s1000_1b, left__ANONYMOUS_s1209_1a, locvars__ANONYMOUS_s972_19, malloc_budget__ANONYMOUS_s1111_18, newer_len__ANONYMOUS_s1530_17, newer_sll__ANONYMOUS_s1531_16, next__ANONYMOUS_s1001_15, old_len__ANONYMOUS_s1559_14, old_sll__ANONYMOUS_s1560_13, p_history__ANONYMOUS_s1022_12, ranking__ANONYMOUS_s1561_11, ret__ANONYMOUS_s1562_10, right__ANONYMOUS_s1210_f, supernext__ANONYMOUS_s1002_e, symbolic__ANONYMOUS_s1003_d, ts__ANONYMOUS_s1004_c);
    }
  }
}
/*sll_len_rec.sk:45*/

void list_comp_len_rec__WrapperNospec (int[2] llocvars_22, int[2] lintvars_23, int[3] lnext_24, int[3] lsupernext_25, int[3] lkey_26, bit[3] lsymbolic_27, bit[3] lactive_28, int ret_value_29, bit[3] new_symbolic_2a, int[3] new_next_2b, int[3] new_supernext_2c, int[3] new_key_2d)/*sll_len_rec.sk:45*/
{
  {
    {
    }
  }
}
/*aux.skh:141*/

void locMutate (int c1_2de, int c2_2df, int dir_2e0, ref global bit[4] active__ANONYMOUS_s744_2e1, ref global bit error_flag__ANONYMOUS_s1012_2e2, ref global int fake_unfold__ANONYMOUS_s745_2e3, ref global bit[4 * 4] history__ANONYMOUS_s1605_2e4, ref global int[4] left__ANONYMOUS_s746_2e5, ref global int[3] locvars__ANONYMOUS_s747_2e6, ref global int[4] next__ANONYMOUS_s748_2e7, ref global bit[4 * 4] p_history__ANONYMOUS_s1606_2e8, ref global int[4] right__ANONYMOUS_s749_2e9, ref global bit[4] symbolic__ANONYMOUS_s750_2ea, ref global int ts__ANONYMOUS_s751_2eb)/*aux.skh:141*/
{
  {
    {
      int choice_2ec;
      choice_2ec = c1_2de;
      assert (choice_2ec > 0); //Assert at aux.skh:144 (-7166148377879439511)
      assert (choice_2ec < 3); //Assert at aux.skh:145 (-5154008513600261543)
      int choice2_2ed;
      choice2_2ed = c2_2df;
      assert (choice2_2ed >= 0); //Assert at aux.skh:147 (3451383961233403059)
      assert (choice2_2ed < 3); //Assert at aux.skh:148 (-9111523313798733251)
      int df_2ee;
      assert ((choice_2ec >= 0) && (choice_2ec < 3)); //aux.skh:151: Array out of bounds
      df_2ee = locvars__ANONYMOUS_s747_2e6[choice_2ec];
      bit b_319_s1716;
      b_319_s1716 = df_2ee >= 0;
      assumePre@ANONYMOUS(b_319_s1716, error_flag__ANONYMOUS_s1012_2e2);
      bit b_319_s1717;
      b_319_s1717 = df_2ee < 4;
      assumePre@ANONYMOUS(b_319_s1717, error_flag__ANONYMOUS_s1012_2e2);
      if((df_2ee < 0) || (df_2ee >= 4))/*aux.skh:154*/
      {
        return;
      }
      if(df_2ee == 0)/*aux.skh:157*/
      {
        return;
      }
      assert ((df_2ee >= 0) && (df_2ee < 4)); //aux.skh:158: Array out of bounds
      if(!(active__ANONYMOUS_s744_2e1[df_2ee]))/*aux.skh:158*/
      {
        return;
      }
      bit _pac_sc_s1796;
      {
        assert ((df_2ee >= 0) && (df_2ee < 4)); //aux.skh:159: Array out of bounds
        _pac_sc_s1796 = symbolic__ANONYMOUS_s750_2ea[df_2ee];
        if(_pac_sc_s1796)/*aux.skh:159*/
        {
          _pac_sc_s1796 = fake_unfold__ANONYMOUS_s745_2e3 != df_2ee;
        }
      }
      if(_pac_sc_s1796)/*aux.skh:159*/
      {
        return;
      }
      int to_2ef;
      assert ((choice2_2ed >= 0) && (choice2_2ed < 3)); //aux.skh:161: Array out of bounds
      to_2ef = locvars__ANONYMOUS_s747_2e6[choice2_2ed];
      bit b_319_s1718;
      b_319_s1718 = to_2ef >= 0;
      assumePre@ANONYMOUS(b_319_s1718, error_flag__ANONYMOUS_s1012_2e2);
      bit b_319_s1719;
      b_319_s1719 = to_2ef < 4;
      assumePre@ANONYMOUS(b_319_s1719, error_flag__ANONYMOUS_s1012_2e2);
      bit _pac_sc_s1797;
      {
        _pac_sc_s1797 = to_2ef >= 4;
        if(!(_pac_sc_s1797))/*aux.skh:164*/
        {
          assert ((to_2ef >= 0) && (to_2ef < 4)); //aux.skh:164: Array out of bounds
          _pac_sc_s1797 = !(active__ANONYMOUS_s744_2e1[to_2ef]);
        }
      }
      if(_pac_sc_s1797)/*aux.skh:164*/
      {
        return;
      }
      int uo_s16_2f0;
      uo_s16_2f0 = ts__ANONYMOUS_s751_2eb;
      ts__ANONYMOUS_s751_2eb = ts__ANONYMOUS_s751_2eb + 1;
      uo_s16_2f0;
      if(dir_2e0 == 0)/*aux.skh:167*/
      {
        assert ((df_2ee >= 0) && (df_2ee < 4)); //aux.skh:167: Either null pointer or Array out of bounds
        next__ANONYMOUS_s748_2e7[df_2ee] = to_2ef;
      }
      else
      {
        if(dir_2e0 == 1)/*aux.skh:168*/
        {
          assert ((df_2ee >= 0) && (df_2ee < 4)); //aux.skh:168: Either null pointer or Array out of bounds
          left__ANONYMOUS_s746_2e5[df_2ee] = to_2ef;
        }
        else
        {
          if(dir_2e0 == 2)/*aux.skh:169*/
          {
            assert ((df_2ee >= 0) && (df_2ee < 4)); //aux.skh:169: Either null pointer or Array out of bounds
            right__ANONYMOUS_s749_2e9[df_2ee] = to_2ef;
          }
        }
      }
      connect_defs@ANONYMOUS(active__ANONYMOUS_s744_2e1, history__ANONYMOUS_s1605_2e4, next__ANONYMOUS_s748_2e7, p_history__ANONYMOUS_s1606_2e8, symbolic__ANONYMOUS_s750_2ea, ts__ANONYMOUS_s751_2eb);
    }
  }
}
/*aux.skh:108*/

void locVarAssign (int c1_297, int c2_298, ref global int[3] locvars__ANONYMOUS_s755_299)/*aux.skh:108*/
{
  {
    {
      int choice_29a;
      choice_29a = c1_297;
      assert (choice_29a > 0); //Assert at aux.skh:111 (-7203734650538271766)
      assert (choice_29a < 3); //Assert at aux.skh:112 (-5893746762227548352)
      int choice2_29b;
      choice2_29b = c2_298;
      assert (choice2_29b >= 0); //Assert at aux.skh:115 (3599253123416319475)
      assert (choice2_29b < 3); //Assert at aux.skh:116 (-3798182885373038092)
      assert ((choice2_29b >= 0) && (choice2_29b < 3)); //aux.skh:118: Array out of bounds
      assert ((choice_29a >= 0) && (choice_29a < 3)); //aux.skh:118: Either null pointer or Array out of bounds
      locvars__ANONYMOUS_s755_299[choice_29a] = locvars__ANONYMOUS_s755_299[choice2_29b];
    }
  }
}
/*sll_len_rec.sk:90*/

void loc_id0 (int locrange_173, ref int _out_174)/*sll_len_rec.sk:90*/
{
  {
    {
      _out_174 = 0;
      int _out_s236_175;
      int r_176;
      r_176 = locrange_173;
      bit _has_out__177;
      _has_out__177 = 0;
      _out_s236_175 = 0;
      int n_178;
      n_178 = ??/* H__0_394int:2 */;
      assert ((n_178 >= 0) && (n_178 < r_176)); //Assert at aux.skh:57 (-668512780354138040)
      _out_s236_175 = n_178 + 1;
      _has_out__177 = 1;
      _out_174 = _out_s236_175;
      return;
    }
  }
}
/*lseg_header.skh:451*/

void locderef2var (int c1_278, int c2_279, ref global bit[4] active__ANONYMOUS_s720_27a, ref global bit error_flag__ANONYMOUS_s1510_27b, ref global bit[4 * 4] history__ANONYMOUS_s1238_27c, ref global int[4] key__ANONYMOUS_s1017_27d, ref global int[3] locvars__ANONYMOUS_s721_27e, ref global int malloc_budget__ANONYMOUS_s722_27f, ref global int[4] next__ANONYMOUS_s723_280, ref global bit[4 * 4] p_history__ANONYMOUS_s1281_281, ref global int[4] supernext__ANONYMOUS_s1018_282, ref global bit[4] symbolic__ANONYMOUS_s724_283, ref global int ts__ANONYMOUS_s725_284)/*lseg_header.skh:451*/
{
  {
    {
      int choice_285;
      choice_285 = c1_278;
      assert (choice_285 > 0); //Assert at lseg_header.skh:454 (6945563197494269719)
      assert (choice_285 < 3); //Assert at lseg_header.skh:455 (9057465668911873868)
      int choice2_286;
      choice2_286 = c2_279;
      assert (choice2_286 > 0); //Assert at lseg_header.skh:457 (836219808848412941)
      assert (choice2_286 < 3); //Assert at lseg_header.skh:458 (-388397331817517125)
      int l_287;
      assert ((choice_285 >= 0) && (choice_285 < 3)); //lseg_header.skh:461: Array out of bounds
      l_287 = locvars__ANONYMOUS_s721_27e[choice_285];
      bit b_18e_s1694;
      b_18e_s1694 = l_287 > 0;
      assertPost@ANONYMOUS(b_18e_s1694, error_flag__ANONYMOUS_s1510_27b);
      bit b_18e_s1695;
      b_18e_s1695 = l_287 < 4;
      assertPost@ANONYMOUS(b_18e_s1695, error_flag__ANONYMOUS_s1510_27b);
      if((l_287 <= 0) || (l_287 >= 4))/*lseg_header.skh:464*/
      {
        return;
      }
      assert ((l_287 >= 0) && (l_287 < 4)); //lseg_header.skh:465: Array out of bounds
      if(!(active__ANONYMOUS_s720_27a[l_287]))/*lseg_header.skh:465*/
      {
        return;
      }
      int test_288;
      assert ((l_287 >= 0) && (l_287 < 4)); //lseg_header.skh:468: Array out of bounds
      test_288 = next__ANONYMOUS_s723_280[l_287];
      assert ((l_287 >= 0) && (l_287 < 4)); //lseg_header.skh:470: Array out of bounds
      if(!(symbolic__ANONYMOUS_s724_283[l_287]))/*lseg_header.skh:470*/
      {
        bit b_319_s1696;
        b_319_s1696 = test_288 >= 0;
        assumePre@ANONYMOUS(b_319_s1696, error_flag__ANONYMOUS_s1510_27b);
        bit b_319_s1697;
        b_319_s1697 = test_288 < 4;
        assumePre@ANONYMOUS(b_319_s1697, error_flag__ANONYMOUS_s1510_27b);
        if((test_288 < 0) || (test_288 >= 4))/*lseg_header.skh:473*/
        {
          return;
        }
        assert ((choice2_286 >= 0) && (choice2_286 < 3)); //lseg_header.skh:476: Either null pointer or Array out of bounds
        locvars__ANONYMOUS_s721_27e[choice2_286] = test_288;
        return;
      }
      int ln_289;
      ln_289 = test_288;
      if(test_288 > 0)/*lseg_header.skh:481*/
      {
        bit b_319_s1698;
        b_319_s1698 = malloc_budget__ANONYMOUS_s722_27f >= 1;
        assumePre@ANONYMOUS(b_319_s1698, error_flag__ANONYMOUS_s1510_27b);
        if(malloc_budget__ANONYMOUS_s722_27f < 1)/*lseg_header.skh:483*/
        {
          return;
        }
        int uo_s30_28a;
        uo_s30_28a = malloc_budget__ANONYMOUS_s722_27f;
        malloc_budget__ANONYMOUS_s722_27f = malloc_budget__ANONYMOUS_s722_27f - 1;
        uo_s30_28a;
        ln_289 = 1;
        bit __sa11_28b;
        bit _pac_sc_s1785;
        {
          _pac_sc_s1785 = 1;
          if(_pac_sc_s1785)/*lseg_header.skh:487*/
          {
            bit _pac_s1786;
            _pac_s1786 = 1;
            assert ((_pac_s1786 >= 0) && (_pac_s1786 < 4)); //lseg_header.skh:487: Array out of bounds
            _pac_sc_s1785 = active__ANONYMOUS_s720_27a[_pac_s1786];
          }
        }
        __sa11_28b = _pac_sc_s1785;
        while(__sa11_28b)
        {
          int uo_s31_28e;
          uo_s31_28e = ln_289;
          ln_289 = ln_289 + 1;
          uo_s31_28e;
          bit _pac_sc_s1787;
          {
            _pac_sc_s1787 = ln_289 < 4;
            if(_pac_sc_s1787)/*lseg_header.skh:487*/
            {
              assert ((ln_289 >= 0) && (ln_289 < 4)); //lseg_header.skh:487: Array out of bounds
              _pac_sc_s1787 = active__ANONYMOUS_s720_27a[ln_289];
            }
          }
          __sa11_28b = _pac_sc_s1787;
        }
        bit b_319_s1699;
        b_319_s1699 = ln_289 < 4;
        assumePre@ANONYMOUS(b_319_s1699, error_flag__ANONYMOUS_s1510_27b);
        if(ln_289 >= 4)/*lseg_header.skh:491*/
        {
          return;
        }
        assert ((ln_289 >= 0) && (ln_289 < 4)); //lseg_header.skh:494: Either null pointer or Array out of bounds
        active__ANONYMOUS_s720_27a[ln_289] = 1;
        assert ((ln_289 >= 0) && (ln_289 < 4)); //lseg_header.skh:495: Either null pointer or Array out of bounds
        symbolic__ANONYMOUS_s724_283[ln_289] = 1;
        assert ((l_287 >= 0) && (l_287 < 4)); //lseg_header.skh:496: Either null pointer or Array out of bounds
        next__ANONYMOUS_s723_280[l_287] = ln_289;
      }
      assert ((choice2_286 >= 0) && (choice2_286 < 3)); //lseg_header.skh:499: Either null pointer or Array out of bounds
      locvars__ANONYMOUS_s721_27e[choice2_286] = ln_289;
      assert ((l_287 >= 0) && (l_287 < 4)); //lseg_header.skh:500: Either null pointer or Array out of bounds
      symbolic__ANONYMOUS_s724_283[l_287] = 0;
      bit _out_s190_28f;
      sll(l_287, ts__ANONYMOUS_s725_284, _out_s190_28f);
      bit _out_s192_290;
      sll_comp@ANONYMOUS(l_287, _out_s192_290, active__ANONYMOUS_s720_27a, history__ANONYMOUS_s1238_27c, key__ANONYMOUS_s1017_27d, next__ANONYMOUS_s723_280, p_history__ANONYMOUS_s1281_281, supernext__ANONYMOUS_s1018_282, symbolic__ANONYMOUS_s724_283, ts__ANONYMOUS_s725_284);
      bit b_319_s1700;
      b_319_s1700 = _out_s190_28f == _out_s192_290;
      assumePre@ANONYMOUS(b_319_s1700, error_flag__ANONYMOUS_s1510_27b);
      int _out_s194_291;
      len(l_287, ts__ANONYMOUS_s725_284, _out_s194_291);
      int _out_s196_292;
      len_comp@ANONYMOUS(l_287, _out_s196_292, active__ANONYMOUS_s720_27a, history__ANONYMOUS_s1238_27c, next__ANONYMOUS_s723_280, p_history__ANONYMOUS_s1281_281, supernext__ANONYMOUS_s1018_282, symbolic__ANONYMOUS_s724_283, ts__ANONYMOUS_s725_284);
      bit b_319_s1701;
      b_319_s1701 = _out_s194_291 == _out_s196_292;
      assumePre@ANONYMOUS(b_319_s1701, error_flag__ANONYMOUS_s1510_27b);
      int _out_s198_293;
      min(l_287, ts__ANONYMOUS_s725_284, _out_s198_293);
      int _out_s200_294;
      min_comp@ANONYMOUS(l_287, _out_s200_294, active__ANONYMOUS_s720_27a, history__ANONYMOUS_s1238_27c, key__ANONYMOUS_s1017_27d, next__ANONYMOUS_s723_280, p_history__ANONYMOUS_s1281_281, supernext__ANONYMOUS_s1018_282, symbolic__ANONYMOUS_s724_283, ts__ANONYMOUS_s725_284);
      bit b_319_s1702;
      b_319_s1702 = _out_s198_293 == _out_s200_294;
      assumePre@ANONYMOUS(b_319_s1702, error_flag__ANONYMOUS_s1510_27b);
      int _out_s202_295;
      max(l_287, ts__ANONYMOUS_s725_284, _out_s202_295);
      int _out_s204_296;
      max_comp@ANONYMOUS(l_287, _out_s204_296, active__ANONYMOUS_s720_27a, history__ANONYMOUS_s1238_27c, key__ANONYMOUS_s1017_27d, next__ANONYMOUS_s723_280, p_history__ANONYMOUS_s1281_281, supernext__ANONYMOUS_s1018_282, symbolic__ANONYMOUS_s724_283, ts__ANONYMOUS_s725_284);
      bit b_319_s1703;
      b_319_s1703 = _out_s202_295 == _out_s204_296;
      assumePre@ANONYMOUS(b_319_s1703, error_flag__ANONYMOUS_s1510_27b);
    }
  }
}
/*aux.skh:203*/

void locvar_eq (int c1_251, int c2_252, ref bit _out_253, ref global int[3] locvars__ANONYMOUS_s773_254)/*aux.skh:203*/
{
  {
    {
      _out_253 = 0;
      int choice_255;
      choice_255 = c1_251;
      assert (choice_255 > 0); //Assert at aux.skh:206 (2865152945088049808)
      assert (choice_255 < 3); //Assert at aux.skh:207 (-776328940001721267)
      int choice2_256;
      choice2_256 = c2_252;
      assert (choice2_256 >= 0); //Assert at aux.skh:209 (2947038182194725013)
      assert (choice2_256 < 3); //Assert at aux.skh:210 (-3869819424471125081)
      assert ((choice_255 >= 0) && (choice_255 < 3)); //aux.skh:212: Array out of bounds
      assert ((choice2_256 >= 0) && (choice2_256 < 3)); //aux.skh:212: Array out of bounds
      _out_253 = (locvars__ANONYMOUS_s773_254[choice_255]) == (locvars__ANONYMOUS_s773_254[choice2_256]);
      return;
    }
  }
}
/*lseg_header.skh:564*/

void malloc (int c_2c1, ref global bit[4] active__ANONYMOUS_s787_2c2, ref global bit error_flag__ANONYMOUS_s1555_2c3, ref global int[4] key__ANONYMOUS_s788_2c4, ref global int[3] locvars__ANONYMOUS_s789_2c5, ref global int malloc_budget__ANONYMOUS_s790_2c6, ref global int[4] next__ANONYMOUS_s791_2c7, ref global bit[4] symbolic__ANONYMOUS_s792_2c8)/*lseg_header.skh:564*/
{
  {
    {
      int choice_2c9;
      choice_2c9 = c_2c1;
      assert (choice_2c9 > 0); //Assert at lseg_header.skh:568 (-8116170905672145014)
      assert (choice_2c9 < 3); //Assert at lseg_header.skh:569 (-2686943463915215707)
      assert (malloc_budget__ANONYMOUS_s790_2c6 >= 1); //Assert at lseg_header.skh:571 (610150665038376813)
      bit b_319_s1713;
      b_319_s1713 = malloc_budget__ANONYMOUS_s790_2c6 >= 1;
      assumePre@ANONYMOUS(b_319_s1713, error_flag__ANONYMOUS_s1555_2c3);
      if(malloc_budget__ANONYMOUS_s790_2c6 < 1)/*lseg_header.skh:573*/
      {
        return;
      }
      int uo_s19_2ca;
      uo_s19_2ca = malloc_budget__ANONYMOUS_s790_2c6;
      malloc_budget__ANONYMOUS_s790_2c6 = malloc_budget__ANONYMOUS_s790_2c6 - 1;
      uo_s19_2ca;
      int l_2cb;
      l_2cb = 1;
      bit __sa13_2cc;
      bit _pac_sc_s1791;
      {
        _pac_sc_s1791 = 1;
        if(_pac_sc_s1791)/*lseg_header.skh:577*/
        {
          bit _pac_s1792;
          _pac_s1792 = 1;
          assert ((_pac_s1792 >= 0) && (_pac_s1792 < 4)); //lseg_header.skh:577: Array out of bounds
          _pac_sc_s1791 = active__ANONYMOUS_s787_2c2[_pac_s1792];
        }
      }
      __sa13_2cc = _pac_sc_s1791;
      while(__sa13_2cc)
      {
        int uo_s20_2cf;
        uo_s20_2cf = l_2cb;
        l_2cb = l_2cb + 1;
        uo_s20_2cf;
        bit _pac_sc_s1793;
        {
          _pac_sc_s1793 = l_2cb < 4;
          if(_pac_sc_s1793)/*lseg_header.skh:577*/
          {
            assert ((l_2cb >= 0) && (l_2cb < 4)); //lseg_header.skh:577: Array out of bounds
            _pac_sc_s1793 = active__ANONYMOUS_s787_2c2[l_2cb];
          }
        }
        __sa13_2cc = _pac_sc_s1793;
      }
      bit b_319_s1714;
      b_319_s1714 = l_2cb < 4;
      assumePre@ANONYMOUS(b_319_s1714, error_flag__ANONYMOUS_s1555_2c3);
      if(l_2cb >= 4)/*lseg_header.skh:581*/
      {
        return;
      }
      assert ((l_2cb >= 0) && (l_2cb < 4)); //lseg_header.skh:583: Either null pointer or Array out of bounds
      next__ANONYMOUS_s791_2c7[l_2cb] = 0;
      assert ((l_2cb >= 0) && (l_2cb < 4)); //lseg_header.skh:584: Either null pointer or Array out of bounds
      key__ANONYMOUS_s788_2c4[l_2cb] = 0;
      assert ((l_2cb >= 0) && (l_2cb < 4)); //lseg_header.skh:585: Either null pointer or Array out of bounds
      symbolic__ANONYMOUS_s792_2c8[l_2cb] = 0;
      assert ((l_2cb >= 0) && (l_2cb < 4)); //lseg_header.skh:586: Either null pointer or Array out of bounds
      active__ANONYMOUS_s787_2c2[l_2cb] = 1;
      assert ((choice_2c9 >= 0) && (choice_2c9 < 3)); //lseg_header.skh:587: Either null pointer or Array out of bounds
      locvars__ANONYMOUS_s789_2c5[choice_2c9] = l_2cb;
    }
  }
}
/*lseg_header.skh:22*/

uninterp void max (int l, int t, ref int _out)/*lseg_header.skh:22*/
/*lseg_header.skh:227*/

void max_comp (int l_20f, ref int _out_210, ref global bit[4] active__ANONYMOUS_s1628_211, ref global bit[4 * 4] history__ANONYMOUS_s1299_212, ref global int[4] key__ANONYMOUS_s1629_213, ref global int[4] next__ANONYMOUS_s1630_214, ref global bit[4 * 4] p_history__ANONYMOUS_s1499_215, ref global int[4] supernext__ANONYMOUS_s1631_216, ref global bit[4] symbolic__ANONYMOUS_s1632_217, ref global int ts__ANONYMOUS_s1300_218)/*lseg_header.skh:227*/
{
  {
    {
      _out_210 = 0;
      int _out_s115_219;
      max_recursive@ANONYMOUS(l_20f, 3, _out_s115_219, active__ANONYMOUS_s1628_211, history__ANONYMOUS_s1299_212, key__ANONYMOUS_s1629_213, next__ANONYMOUS_s1630_214, p_history__ANONYMOUS_s1499_215, supernext__ANONYMOUS_s1631_216, symbolic__ANONYMOUS_s1632_217, ts__ANONYMOUS_s1300_218);
      _out_210 = _out_s115_219;
      return;
    }
  }
}
/*lseg_header.skh:236*/

void max_history (int l_3a5, int ts_0_3a6, ref int _out_3a7, ref global bit[4 * 4] history__ANONYMOUS_s905_3a8, ref global int ts__ANONYMOUS_s906_3a9)/*lseg_header.skh:236*/
{
  {
    {
      _out_3a7 = 0;
      int ts_3aa;
      ts_3aa = ts_0_3a6;
      bit __sa8_3ab;
      bit _pac_sc_s1837;
      {
        _pac_sc_s1837 = ts_3aa > 0;
        if(_pac_sc_s1837)/*lseg_header.skh:237*/
        {
          assert ((l_3a5 >= 0) && (l_3a5 < 4)); //lseg_header.skh:237: Array out of bounds
          assert ((ts_3aa >= 0) && (ts_3aa < 4)); //lseg_header.skh:237: Array out of bounds
          _pac_sc_s1837 = history__ANONYMOUS_s905_3a8[(4 * l_3a5) + ts_3aa];
        }
      }
      __sa8_3ab = _pac_sc_s1837;
      while(__sa8_3ab)
      {
        int uo_s23_3ad;
        uo_s23_3ad = ts_3aa;
        ts_3aa = ts_3aa - 1;
        uo_s23_3ad;
        bit _pac_sc_s1838;
        {
          _pac_sc_s1838 = ts_3aa > 0;
          if(_pac_sc_s1838)/*lseg_header.skh:237*/
          {
            assert ((l_3a5 >= 0) && (l_3a5 < 4)); //lseg_header.skh:237: Array out of bounds
            assert ((ts_3aa >= 0) && (ts_3aa < 4)); //lseg_header.skh:237: Array out of bounds
            _pac_sc_s1838 = history__ANONYMOUS_s905_3a8[(4 * l_3a5) + ts_3aa];
          }
        }
        __sa8_3ab = _pac_sc_s1838;
      }
      int _out_s131_3ae;
      max(l_3a5, ts_3aa, _out_s131_3ae);
      _out_3a7 = _out_s131_3ae;
      return;
    }
  }
}
/*lseg_header.skh:232*/

void max_recursive (int l_336, int bnd_337, ref int _out_338, ref global bit[4] active__ANONYMOUS_s1592_339, ref global bit[4 * 4] history__ANONYMOUS_s1388_33a, ref global int[4] key__ANONYMOUS_s1593_33b, ref global int[4] next__ANONYMOUS_s1594_33c, ref global bit[4 * 4] p_history__ANONYMOUS_s1432_33d, ref global int[4] supernext__ANONYMOUS_s1595_33e, ref global bit[4] symbolic__ANONYMOUS_s1596_33f, ref global int ts__ANONYMOUS_s1389_340)/*lseg_header.skh:232*/
{
  {
    {
      _out_338 = 0;
      int _out_s117_341;
      maxseg_recursive@ANONYMOUS(l_336, 0, bnd_337, _out_s117_341, active__ANONYMOUS_s1592_339, history__ANONYMOUS_s1388_33a, key__ANONYMOUS_s1593_33b, next__ANONYMOUS_s1594_33c, p_history__ANONYMOUS_s1432_33d, supernext__ANONYMOUS_s1595_33e, symbolic__ANONYMOUS_s1596_33f, ts__ANONYMOUS_s1389_340);
      _out_338 = _out_s117_341;
      return;
    }
  }
}
/*lseg_header.skh:26*/

uninterp void maxseg (int l1, int t, ref int _out)/*lseg_header.skh:26*/
/*lseg_header.skh:241*/

void maxseg_comp (int l1_239, int l2_23a, ref int _out_23b, ref global bit[4] active__ANONYMOUS_s1635_23c, ref global bit[4 * 4] history__ANONYMOUS_s1581_23d, ref global int[4] key__ANONYMOUS_s1636_23e, ref global int[4] next__ANONYMOUS_s1637_23f, ref global bit[4 * 4] p_history__ANONYMOUS_s1049_240, ref global int[4] supernext__ANONYMOUS_s1638_241, ref global bit[4] symbolic__ANONYMOUS_s1639_242, ref global int ts__ANONYMOUS_s1050_243)/*lseg_header.skh:241*/
{
  {
    {
      _out_23b = 0;
      int _out_s232_244;
      maxseg_recursive@ANONYMOUS(l1_239, l2_23a, 3, _out_s232_244, active__ANONYMOUS_s1635_23c, history__ANONYMOUS_s1581_23d, key__ANONYMOUS_s1636_23e, next__ANONYMOUS_s1637_23f, p_history__ANONYMOUS_s1049_240, supernext__ANONYMOUS_s1638_241, symbolic__ANONYMOUS_s1639_242, ts__ANONYMOUS_s1050_243);
      _out_23b = _out_s232_244;
      return;
    }
  }
}
/*lseg_header.skh:275*/

void maxseg_history (int l1_3af, int ts_0_3b0, ref int _out_3b1, ref global bit[4 * 4] p_history__ANONYMOUS_s897_3b2, ref global int ts__ANONYMOUS_s898_3b3)/*lseg_header.skh:275*/
{
  {
    {
      _out_3b1 = 0;
      int ts_3b4;
      ts_3b4 = ts_0_3b0;
      bit __sa9_3b5;
      bit _pac_sc_s1839;
      {
        _pac_sc_s1839 = ts_3b4 > 0;
        if(_pac_sc_s1839)/*lseg_header.skh:276*/
        {
          assert ((l1_3af >= 0) && (l1_3af < 4)); //lseg_header.skh:276: Array out of bounds
          assert ((ts_3b4 >= 0) && (ts_3b4 < 4)); //lseg_header.skh:276: Array out of bounds
          _pac_sc_s1839 = p_history__ANONYMOUS_s897_3b2[(4 * l1_3af) + ts_3b4];
        }
      }
      __sa9_3b5 = _pac_sc_s1839;
      while(__sa9_3b5)
      {
        int uo_s22_3b7;
        uo_s22_3b7 = ts_3b4;
        ts_3b4 = ts_3b4 - 1;
        uo_s22_3b7;
        bit _pac_sc_s1840;
        {
          _pac_sc_s1840 = ts_3b4 > 0;
          if(_pac_sc_s1840)/*lseg_header.skh:276*/
          {
            assert ((l1_3af >= 0) && (l1_3af < 4)); //lseg_header.skh:276: Array out of bounds
            assert ((ts_3b4 >= 0) && (ts_3b4 < 4)); //lseg_header.skh:276: Array out of bounds
            _pac_sc_s1840 = p_history__ANONYMOUS_s897_3b2[(4 * l1_3af) + ts_3b4];
          }
        }
        __sa9_3b5 = _pac_sc_s1840;
      }
      int _out_s129_3b8;
      maxseg(l1_3af, ts_3b4, _out_s129_3b8);
      _out_3b1 = _out_s129_3b8;
      return;
    }
  }
}
/*lseg_header.skh:246*/

void maxseg_recursive (int l1_34e, int l2_34f, int bnd_350, ref int _out_351, ref global bit[4] active__ANONYMOUS_s814_352, ref global bit[4 * 4] history__ANONYMOUS_s1640_353, ref global int[4] key__ANONYMOUS_s815_354, ref global int[4] next__ANONYMOUS_s816_355, ref global bit[4 * 4] p_history__ANONYMOUS_s1529_356, ref global int[4] supernext__ANONYMOUS_s817_357, ref global bit[4] symbolic__ANONYMOUS_s818_358, ref global int ts__ANONYMOUS_s819_359)/*lseg_header.skh:246*/
{
  {
    {
      _out_351 = 0;
      if((((l1_34e < 0) || (l1_34e >= 4)) || (l2_34f < 0)) || (l2_34f >= 4))/*lseg_header.skh:247*/
      {
        _out_351 = -1;
        return;
      }
      else
      {
        bit _pac_sc_s1815;
        {
          assert ((l1_34e >= 0) && (l1_34e < 4)); //lseg_header.skh:248: Array out of bounds
          _pac_sc_s1815 = !(active__ANONYMOUS_s814_352[l1_34e]);
          if(!(_pac_sc_s1815))/*lseg_header.skh:248*/
          {
            assert ((l2_34f >= 0) && (l2_34f < 4)); //lseg_header.skh:248: Array out of bounds
            _pac_sc_s1815 = !(active__ANONYMOUS_s814_352[l2_34f]);
          }
        }
        if(_pac_sc_s1815)/*lseg_header.skh:248*/
        {
          _out_351 = -1;
          return;
        }
        else
        {
          if(l1_34e == l2_34f)/*lseg_header.skh:249*/
          {
            bit _pac_sc_s1816;
            {
              _pac_sc_s1816 = l1_34e == 0;
              if(!(_pac_sc_s1816))/*lseg_header.skh:249*/
              {
                assert ((l1_34e >= 0) && (l1_34e < 4)); //lseg_header.skh:249: Array out of bounds
                _pac_sc_s1816 = (next__ANONYMOUS_s816_355[l1_34e]) != l1_34e;
              }
            }
            int _pac_sc_s1817;
            if(_pac_sc_s1816)/*lseg_header.skh:249*/
            {
              _pac_sc_s1817 = 0;
            }
            else
            {
              assert ((l1_34e >= 0) && (l1_34e < 4)); //lseg_header.skh:249: Array out of bounds
              _pac_sc_s1817 = key__ANONYMOUS_s815_354[l1_34e];
            }
            _out_351 = _pac_sc_s1817;
            return;
          }
          else
          {
            if(l1_34e == 0)/*lseg_header.skh:251*/
            {
              _out_351 = 0;
              return;
            }
            else
            {
              if(bnd_350 < 0)/*lseg_header.skh:252*/
              {
                _out_351 = -1;
                return;
              }
              else
              {
                assert ((l1_34e >= 0) && (l1_34e < 4)); //lseg_header.skh:254: Array out of bounds
                if(symbolic__ANONYMOUS_s818_358[l1_34e])/*lseg_header.skh:254*/
                {
                  if(l2_34f == 0)/*lseg_header.skh:255*/
                  {
                    int _out_s119_35a;
                    max_history@ANONYMOUS(l1_34e, ts__ANONYMOUS_s819_359, _out_s119_35a, history__ANONYMOUS_s1640_353, ts__ANONYMOUS_s819_359);
                    _out_351 = _out_s119_35a;
                    return;
                  }
                  else
                  {
                    _out_351 = -1;
                    return;
                  }
                }
                else
                {
                  assert ((l1_34e >= 0) && (l1_34e < 4)); //lseg_header.skh:258: Array out of bounds
                  if(l2_34f == (next__ANONYMOUS_s816_355[l1_34e]))/*lseg_header.skh:258*/
                  {
                    bit _pac_sc_s1818;
                    {
                      bit _pac_sc_s1819;
                      {
                        _pac_sc_s1819 = l2_34f == 0;
                        if(!(_pac_sc_s1819))/*lseg_header.skh:258*/
                        {
                          assert ((l2_34f >= 0) && (l2_34f < 4)); //lseg_header.skh:258: Array out of bounds
                          _pac_sc_s1819 = (next__ANONYMOUS_s816_355[l2_34f]) != l2_34f;
                        }
                      }
                      _pac_sc_s1818 = _pac_sc_s1819;
                      if(!(_pac_sc_s1818))/*lseg_header.skh:258*/
                      {
                        assert ((l2_34f >= 0) && (l2_34f < 4)); //lseg_header.skh:258: Array out of bounds
                        assert ((l1_34e >= 0) && (l1_34e < 4)); //lseg_header.skh:258: Array out of bounds
                        _pac_sc_s1818 = (key__ANONYMOUS_s815_354[l2_34f]) <= (key__ANONYMOUS_s815_354[l1_34e]);
                      }
                    }
                    int _pac_sc_s1820;
                    if(_pac_sc_s1818)/*lseg_header.skh:258*/
                    {
                      assert ((l1_34e >= 0) && (l1_34e < 4)); //lseg_header.skh:258: Array out of bounds
                      _pac_sc_s1820 = key__ANONYMOUS_s815_354[l1_34e];
                    }
                    else
                    {
                      assert ((l2_34f >= 0) && (l2_34f < 4)); //lseg_header.skh:258: Array out of bounds
                      _pac_sc_s1820 = key__ANONYMOUS_s815_354[l2_34f];
                    }
                    _out_351 = _pac_sc_s1820;
                    return;
                  }
                  else
                  {
                    assert ((l1_34e >= 0) && (l1_34e < 4)); //lseg_header.skh:259: Array out of bounds
                    if(0 == (next__ANONYMOUS_s816_355[l1_34e]))/*lseg_header.skh:259*/
                    {
                      _out_351 = -1;
                      return;
                    }
                    else
                    {
                      bit _pac_sc_s1821;
                      {
                        assert ((l1_34e >= 0) && (l1_34e < 4)); //lseg_header.skh:260: Array out of bounds
                        _pac_sc_s1821 = 0 < (next__ANONYMOUS_s816_355[l1_34e]);
                        if(_pac_sc_s1821)/*lseg_header.skh:260*/
                        {
                          assert ((l1_34e >= 0) && (l1_34e < 4)); //lseg_header.skh:260: Array out of bounds
                          _pac_sc_s1821 = (next__ANONYMOUS_s816_355[l1_34e]) < 4;
                        }
                      }
                      if(_pac_sc_s1821)/*lseg_header.skh:260*/
                      {
                        int r_35b;
                        int r_s121_35c;
                        int l1_34e_s1727;
                        assert ((l1_34e >= 0) && (l1_34e < 4)); //lseg_header.skh:261: Array out of bounds
                        l1_34e_s1727 = next__ANONYMOUS_s816_355[l1_34e];
                        int bnd_350_s1728;
                        bnd_350_s1728 = bnd_350 - 1;
                        maxseg_recursive@ANONYMOUS(l1_34e_s1727, l2_34f, bnd_350_s1728, r_s121_35c, active__ANONYMOUS_s814_352, history__ANONYMOUS_s1640_353, key__ANONYMOUS_s815_354, next__ANONYMOUS_s816_355, p_history__ANONYMOUS_s1529_356, supernext__ANONYMOUS_s817_357, symbolic__ANONYMOUS_s818_358, ts__ANONYMOUS_s819_359);
                        r_35b = r_s121_35c;
                        assert ((l1_34e >= 0) && (l1_34e < 4)); //lseg_header.skh:262: Array out of bounds
                        int _pac_sc_s1822;
                        if((key__ANONYMOUS_s815_354[l1_34e]) >= r_35b)/*lseg_header.skh:262*/
                        {
                          assert ((l1_34e >= 0) && (l1_34e < 4)); //lseg_header.skh:262: Array out of bounds
                          _pac_sc_s1822 = key__ANONYMOUS_s815_354[l1_34e];
                        }
                        else
                        {
                          _pac_sc_s1822 = r_35b;
                        }
                        _out_351 = _pac_sc_s1822;
                        return;
                      }
                      else
                      {
                        assert ((l1_34e >= 0) && (l1_34e < 4)); //lseg_header.skh:264: Array out of bounds
                        if(l2_34f == (supernext__ANONYMOUS_s817_357[l1_34e]))/*lseg_header.skh:264*/
                        {
                          int _out_s123_35d;
                          maxseg_history@ANONYMOUS(l1_34e, ts__ANONYMOUS_s819_359, _out_s123_35d, p_history__ANONYMOUS_s1529_356, ts__ANONYMOUS_s819_359);
                          _out_351 = _out_s123_35d;
                          return;
                        }
                        else
                        {
                          assert ((l1_34e >= 0) && (l1_34e < 4)); //lseg_header.skh:265: Array out of bounds
                          if(0 == (supernext__ANONYMOUS_s817_357[l1_34e]))/*lseg_header.skh:265*/
                          {
                            _out_351 = -1;
                            return;
                          }
                          else
                          {
                            bit _pac_sc_s1823;
                            {
                              assert ((l1_34e >= 0) && (l1_34e < 4)); //lseg_header.skh:266: Array out of bounds
                              _pac_sc_s1823 = 0 < (supernext__ANONYMOUS_s817_357[l1_34e]);
                              if(_pac_sc_s1823)/*lseg_header.skh:266*/
                              {
                                assert ((l1_34e >= 0) && (l1_34e < 4)); //lseg_header.skh:266: Array out of bounds
                                _pac_sc_s1823 = (supernext__ANONYMOUS_s817_357[l1_34e]) < 4;
                              }
                            }
                            if(_pac_sc_s1823)/*lseg_header.skh:266*/
                            {
                              int p1_35e;
                              int p1_s125_35f;
                              maxseg_history@ANONYMOUS(l1_34e, ts__ANONYMOUS_s819_359, p1_s125_35f, p_history__ANONYMOUS_s1529_356, ts__ANONYMOUS_s819_359);
                              p1_35e = p1_s125_35f;
                              int p2_360;
                              int p2_s127_361;
                              int l1_34e_s1729;
                              assert ((l1_34e >= 0) && (l1_34e < 4)); //lseg_header.skh:268: Array out of bounds
                              l1_34e_s1729 = supernext__ANONYMOUS_s817_357[l1_34e];
                              int bnd_350_s1730;
                              bnd_350_s1730 = bnd_350 - 1;
                              maxseg_recursive@ANONYMOUS(l1_34e_s1729, l2_34f, bnd_350_s1730, p2_s127_361, active__ANONYMOUS_s814_352, history__ANONYMOUS_s1640_353, key__ANONYMOUS_s815_354, next__ANONYMOUS_s816_355, p_history__ANONYMOUS_s1529_356, supernext__ANONYMOUS_s817_357, symbolic__ANONYMOUS_s818_358, ts__ANONYMOUS_s819_359);
                              p2_360 = p2_s127_361;
                              _out_351 = (p1_35e >= p2_360 ? p1_35e : p2_360);
                              return;
                            }
                            else
                            {
                              _out_351 = -1;
                              return;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
/*lseg_header.skh:21*/

uninterp void min (int l, int t, ref int _out)/*lseg_header.skh:21*/
/*lseg_header.skh:173*/

void min_comp (int l_21a, ref int _out_21b, ref global bit[4] active__ANONYMOUS_s1484_21c, ref global bit[4 * 4] history__ANONYMOUS_s1057_21d, ref global int[4] key__ANONYMOUS_s1485_21e, ref global int[4] next__ANONYMOUS_s1486_21f, ref global bit[4 * 4] p_history__ANONYMOUS_s1298_220, ref global int[4] supernext__ANONYMOUS_s1487_221, ref global bit[4] symbolic__ANONYMOUS_s1488_222, ref global int ts__ANONYMOUS_s1058_223)/*lseg_header.skh:173*/
{
  {
    {
      _out_21b = 0;
      int _out_s133_224;
      min_recursive@ANONYMOUS(l_21a, 3, _out_s133_224, active__ANONYMOUS_s1484_21c, history__ANONYMOUS_s1057_21d, key__ANONYMOUS_s1485_21e, next__ANONYMOUS_s1486_21f, p_history__ANONYMOUS_s1298_220, supernext__ANONYMOUS_s1487_221, symbolic__ANONYMOUS_s1488_222, ts__ANONYMOUS_s1058_223);
      _out_21b = _out_s133_224;
      return;
    }
  }
}
/*lseg_header.skh:182*/

void min_history (int l_3b9, int ts_0_3ba, ref int _out_3bb, ref global bit[4 * 4] history__ANONYMOUS_s741_3bc, ref global int ts__ANONYMOUS_s742_3bd)/*lseg_header.skh:182*/
{
  {
    {
      _out_3bb = 0;
      int ts_3be;
      ts_3be = ts_0_3ba;
      bit __sa6_3bf;
      bit _pac_sc_s1841;
      {
        _pac_sc_s1841 = ts_3be > 0;
        if(_pac_sc_s1841)/*lseg_header.skh:183*/
        {
          assert ((l_3b9 >= 0) && (l_3b9 < 4)); //lseg_header.skh:183: Array out of bounds
          assert ((ts_3be >= 0) && (ts_3be < 4)); //lseg_header.skh:183: Array out of bounds
          _pac_sc_s1841 = history__ANONYMOUS_s741_3bc[(4 * l_3b9) + ts_3be];
        }
      }
      __sa6_3bf = _pac_sc_s1841;
      while(__sa6_3bf)
      {
        int uo_s25_3c1;
        uo_s25_3c1 = ts_3be;
        ts_3be = ts_3be - 1;
        uo_s25_3c1;
        bit _pac_sc_s1842;
        {
          _pac_sc_s1842 = ts_3be > 0;
          if(_pac_sc_s1842)/*lseg_header.skh:183*/
          {
            assert ((l_3b9 >= 0) && (l_3b9 < 4)); //lseg_header.skh:183: Array out of bounds
            assert ((ts_3be >= 0) && (ts_3be < 4)); //lseg_header.skh:183: Array out of bounds
            _pac_sc_s1842 = history__ANONYMOUS_s741_3bc[(4 * l_3b9) + ts_3be];
          }
        }
        __sa6_3bf = _pac_sc_s1842;
      }
      int _out_s149_3c2;
      min(l_3b9, ts_3be, _out_s149_3c2);
      _out_3bb = _out_s149_3c2;
      return;
    }
  }
}
/*lseg_header.skh:178*/

void min_recursive (int l_342, int bnd_343, ref int _out_344, ref global bit[4] active__ANONYMOUS_s1217_345, ref global bit[4 * 4] history__ANONYMOUS_s1142_346, ref global int[4] key__ANONYMOUS_s1218_347, ref global int[4] next__ANONYMOUS_s1219_348, ref global bit[4 * 4] p_history__ANONYMOUS_s1541_349, ref global int[4] supernext__ANONYMOUS_s1220_34a, ref global bit[4] symbolic__ANONYMOUS_s1221_34b, ref global int ts__ANONYMOUS_s1143_34c)/*lseg_header.skh:178*/
{
  {
    {
      _out_344 = 0;
      int _out_s135_34d;
      minseg_recursive@ANONYMOUS(l_342, 0, bnd_343, _out_s135_34d, active__ANONYMOUS_s1217_345, history__ANONYMOUS_s1142_346, key__ANONYMOUS_s1218_347, next__ANONYMOUS_s1219_348, p_history__ANONYMOUS_s1541_349, supernext__ANONYMOUS_s1220_34a, symbolic__ANONYMOUS_s1221_34b, ts__ANONYMOUS_s1143_34c);
      _out_344 = _out_s135_34d;
      return;
    }
  }
}
/*lseg_header.skh:25*/

uninterp void minseg (int l1, int t, ref int _out)/*lseg_header.skh:25*/
/*lseg_header.skh:187*/

void minseg_comp (int l1_245, int l2_246, ref int _out_247, ref global bit[4] active__ANONYMOUS_s1617_248, ref global bit[4 * 4] history__ANONYMOUS_s1278_249, ref global int[4] key__ANONYMOUS_s1618_24a, ref global int[4] next__ANONYMOUS_s1619_24b, ref global bit[4 * 4] p_history__ANONYMOUS_s1507_24c, ref global int[4] supernext__ANONYMOUS_s1620_24d, ref global bit[4] symbolic__ANONYMOUS_s1621_24e, ref global int ts__ANONYMOUS_s1279_24f)/*lseg_header.skh:187*/
{
  {
    {
      _out_247 = 0;
      int _out_s230_250;
      minseg_recursive@ANONYMOUS(l1_245, l2_246, 3, _out_s230_250, active__ANONYMOUS_s1617_248, history__ANONYMOUS_s1278_249, key__ANONYMOUS_s1618_24a, next__ANONYMOUS_s1619_24b, p_history__ANONYMOUS_s1507_24c, supernext__ANONYMOUS_s1620_24d, symbolic__ANONYMOUS_s1621_24e, ts__ANONYMOUS_s1279_24f);
      _out_247 = _out_s230_250;
      return;
    }
  }
}
/*lseg_header.skh:222*/

void minseg_history (int l1_3c3, int ts_0_3c4, ref int _out_3c5, ref global bit[4 * 4] p_history__ANONYMOUS_s921_3c6, ref global int ts__ANONYMOUS_s922_3c7)/*lseg_header.skh:222*/
{
  {
    {
      _out_3c5 = 0;
      int ts_3c8;
      ts_3c8 = ts_0_3c4;
      bit __sa7_3c9;
      bit _pac_sc_s1843;
      {
        _pac_sc_s1843 = ts_3c8 > 0;
        if(_pac_sc_s1843)/*lseg_header.skh:223*/
        {
          assert ((l1_3c3 >= 0) && (l1_3c3 < 4)); //lseg_header.skh:223: Array out of bounds
          assert ((ts_3c8 >= 0) && (ts_3c8 < 4)); //lseg_header.skh:223: Array out of bounds
          _pac_sc_s1843 = p_history__ANONYMOUS_s921_3c6[(4 * l1_3c3) + ts_3c8];
        }
      }
      __sa7_3c9 = _pac_sc_s1843;
      while(__sa7_3c9)
      {
        int uo_s24_3cb;
        uo_s24_3cb = ts_3c8;
        ts_3c8 = ts_3c8 - 1;
        uo_s24_3cb;
        bit _pac_sc_s1844;
        {
          _pac_sc_s1844 = ts_3c8 > 0;
          if(_pac_sc_s1844)/*lseg_header.skh:223*/
          {
            assert ((l1_3c3 >= 0) && (l1_3c3 < 4)); //lseg_header.skh:223: Array out of bounds
            assert ((ts_3c8 >= 0) && (ts_3c8 < 4)); //lseg_header.skh:223: Array out of bounds
            _pac_sc_s1844 = p_history__ANONYMOUS_s921_3c6[(4 * l1_3c3) + ts_3c8];
          }
        }
        __sa7_3c9 = _pac_sc_s1844;
      }
      int _out_s147_3cc;
      minseg(l1_3c3, ts_3c8, _out_s147_3cc);
      _out_3c5 = _out_s147_3cc;
      return;
    }
  }
}
/*lseg_header.skh:192*/

void minseg_recursive (int l1_362, int l2_363, int bnd_364, ref int _out_365, ref global bit[4] active__ANONYMOUS_s915_366, ref global bit[4 * 4] history__ANONYMOUS_s1556_367, ref global int[4] key__ANONYMOUS_s916_368, ref global int[4] next__ANONYMOUS_s917_369, ref global bit[4 * 4] p_history__ANONYMOUS_s1445_36a, ref global int[4] supernext__ANONYMOUS_s918_36b, ref global bit[4] symbolic__ANONYMOUS_s919_36c, ref global int ts__ANONYMOUS_s920_36d)/*lseg_header.skh:192*/
{
  {
    {
      _out_365 = 0;
      if((l1_362 < 0) || (l1_362 >= 4))/*lseg_header.skh:193*/
      {
        _out_365 = 7;
        return;
      }
      else
      {
        assert ((l1_362 >= 0) && (l1_362 < 4)); //lseg_header.skh:194: Array out of bounds
        if(!(active__ANONYMOUS_s915_366[l1_362]))/*lseg_header.skh:194*/
        {
          _out_365 = 7;
          return;
        }
        else
        {
          if(l1_362 == l2_363)/*lseg_header.skh:196*/
          {
            bit _pac_sc_s1824;
            {
              _pac_sc_s1824 = l1_362 == 0;
              if(!(_pac_sc_s1824))/*lseg_header.skh:196*/
              {
                assert ((l1_362 >= 0) && (l1_362 < 4)); //lseg_header.skh:196: Array out of bounds
                _pac_sc_s1824 = (next__ANONYMOUS_s917_369[l1_362]) != l1_362;
              }
            }
            int _pac_sc_s1825;
            if(_pac_sc_s1824)/*lseg_header.skh:196*/
            {
              _pac_sc_s1825 = 7;
            }
            else
            {
              assert ((l1_362 >= 0) && (l1_362 < 4)); //lseg_header.skh:196: Array out of bounds
              _pac_sc_s1825 = key__ANONYMOUS_s916_368[l1_362];
            }
            _out_365 = _pac_sc_s1825;
            return;
          }
          else
          {
            if(l1_362 == 0)/*lseg_header.skh:198*/
            {
              _out_365 = 7;
              return;
            }
            else
            {
              if(bnd_364 < 0)/*lseg_header.skh:199*/
              {
                _out_365 = -1;
                return;
              }
              else
              {
                assert ((l1_362 >= 0) && (l1_362 < 4)); //lseg_header.skh:201: Array out of bounds
                if(symbolic__ANONYMOUS_s919_36c[l1_362])/*lseg_header.skh:201*/
                {
                  if(l2_363 == 0)/*lseg_header.skh:202*/
                  {
                    int _out_s137_36e;
                    min_history@ANONYMOUS(l1_362, ts__ANONYMOUS_s920_36d, _out_s137_36e, history__ANONYMOUS_s1556_367, ts__ANONYMOUS_s920_36d);
                    _out_365 = _out_s137_36e;
                    return;
                  }
                  else
                  {
                    _out_365 = -1;
                    return;
                  }
                }
                else
                {
                  assert ((l1_362 >= 0) && (l1_362 < 4)); //lseg_header.skh:205: Array out of bounds
                  if(l2_363 == (next__ANONYMOUS_s917_369[l1_362]))/*lseg_header.skh:205*/
                  {
                    bit _pac_sc_s1826;
                    {
                      bit _pac_sc_s1827;
                      {
                        _pac_sc_s1827 = l2_363 == 0;
                        if(!(_pac_sc_s1827))/*lseg_header.skh:205*/
                        {
                          assert ((l2_363 >= 0) && (l2_363 < 4)); //lseg_header.skh:205: Array out of bounds
                          _pac_sc_s1827 = (next__ANONYMOUS_s917_369[l2_363]) != l2_363;
                        }
                      }
                      _pac_sc_s1826 = _pac_sc_s1827;
                      if(!(_pac_sc_s1826))/*lseg_header.skh:205*/
                      {
                        assert ((l1_362 >= 0) && (l1_362 < 4)); //lseg_header.skh:205: Array out of bounds
                        assert ((l2_363 >= 0) && (l2_363 < 4)); //lseg_header.skh:205: Array out of bounds
                        _pac_sc_s1826 = (key__ANONYMOUS_s916_368[l1_362]) <= (key__ANONYMOUS_s916_368[l2_363]);
                      }
                    }
                    int _pac_sc_s1828;
                    if(_pac_sc_s1826)/*lseg_header.skh:205*/
                    {
                      assert ((l1_362 >= 0) && (l1_362 < 4)); //lseg_header.skh:205: Array out of bounds
                      _pac_sc_s1828 = key__ANONYMOUS_s916_368[l1_362];
                    }
                    else
                    {
                      assert ((l2_363 >= 0) && (l2_363 < 4)); //lseg_header.skh:205: Array out of bounds
                      _pac_sc_s1828 = key__ANONYMOUS_s916_368[l2_363];
                    }
                    _out_365 = _pac_sc_s1828;
                    return;
                  }
                  else
                  {
                    assert ((l1_362 >= 0) && (l1_362 < 4)); //lseg_header.skh:206: Array out of bounds
                    if(0 == (next__ANONYMOUS_s917_369[l1_362]))/*lseg_header.skh:206*/
                    {
                      _out_365 = -1;
                      return;
                    }
                    else
                    {
                      bit _pac_sc_s1829;
                      {
                        assert ((l1_362 >= 0) && (l1_362 < 4)); //lseg_header.skh:207: Array out of bounds
                        _pac_sc_s1829 = 0 < (next__ANONYMOUS_s917_369[l1_362]);
                        if(_pac_sc_s1829)/*lseg_header.skh:207*/
                        {
                          assert ((l1_362 >= 0) && (l1_362 < 4)); //lseg_header.skh:207: Array out of bounds
                          _pac_sc_s1829 = (next__ANONYMOUS_s917_369[l1_362]) < 4;
                        }
                      }
                      if(_pac_sc_s1829)/*lseg_header.skh:207*/
                      {
                        int r_36f;
                        int r_s139_370;
                        int l1_362_s1731;
                        assert ((l1_362 >= 0) && (l1_362 < 4)); //lseg_header.skh:208: Array out of bounds
                        l1_362_s1731 = next__ANONYMOUS_s917_369[l1_362];
                        int bnd_364_s1732;
                        bnd_364_s1732 = bnd_364 - 1;
                        minseg_recursive@ANONYMOUS(l1_362_s1731, l2_363, bnd_364_s1732, r_s139_370, active__ANONYMOUS_s915_366, history__ANONYMOUS_s1556_367, key__ANONYMOUS_s916_368, next__ANONYMOUS_s917_369, p_history__ANONYMOUS_s1445_36a, supernext__ANONYMOUS_s918_36b, symbolic__ANONYMOUS_s919_36c, ts__ANONYMOUS_s920_36d);
                        r_36f = r_s139_370;
                        assert ((l1_362 >= 0) && (l1_362 < 4)); //lseg_header.skh:209: Array out of bounds
                        int _pac_sc_s1830;
                        if((key__ANONYMOUS_s916_368[l1_362]) <= r_36f)/*lseg_header.skh:209*/
                        {
                          assert ((l1_362 >= 0) && (l1_362 < 4)); //lseg_header.skh:209: Array out of bounds
                          _pac_sc_s1830 = key__ANONYMOUS_s916_368[l1_362];
                        }
                        else
                        {
                          _pac_sc_s1830 = r_36f;
                        }
                        _out_365 = _pac_sc_s1830;
                        return;
                      }
                      else
                      {
                        assert ((l1_362 >= 0) && (l1_362 < 4)); //lseg_header.skh:211: Array out of bounds
                        if(l2_363 == (supernext__ANONYMOUS_s918_36b[l1_362]))/*lseg_header.skh:211*/
                        {
                          int _out_s141_371;
                          minseg_history@ANONYMOUS(l1_362, ts__ANONYMOUS_s920_36d, _out_s141_371, p_history__ANONYMOUS_s1445_36a, ts__ANONYMOUS_s920_36d);
                          _out_365 = _out_s141_371;
                          return;
                        }
                        else
                        {
                          assert ((l1_362 >= 0) && (l1_362 < 4)); //lseg_header.skh:212: Array out of bounds
                          if(0 == (supernext__ANONYMOUS_s918_36b[l1_362]))/*lseg_header.skh:212*/
                          {
                            _out_365 = -1;
                            return;
                          }
                          else
                          {
                            bit _pac_sc_s1831;
                            {
                              assert ((l1_362 >= 0) && (l1_362 < 4)); //lseg_header.skh:213: Array out of bounds
                              _pac_sc_s1831 = 0 < (supernext__ANONYMOUS_s918_36b[l1_362]);
                              if(_pac_sc_s1831)/*lseg_header.skh:213*/
                              {
                                assert ((l1_362 >= 0) && (l1_362 < 4)); //lseg_header.skh:213: Array out of bounds
                                _pac_sc_s1831 = (supernext__ANONYMOUS_s918_36b[l1_362]) < 4;
                              }
                            }
                            if(_pac_sc_s1831)/*lseg_header.skh:213*/
                            {
                              int p1_372;
                              int p1_s143_373;
                              minseg_history@ANONYMOUS(l1_362, ts__ANONYMOUS_s920_36d, p1_s143_373, p_history__ANONYMOUS_s1445_36a, ts__ANONYMOUS_s920_36d);
                              p1_372 = p1_s143_373;
                              int p2_374;
                              int p2_s145_375;
                              int l1_362_s1733;
                              assert ((l1_362 >= 0) && (l1_362 < 4)); //lseg_header.skh:215: Array out of bounds
                              l1_362_s1733 = supernext__ANONYMOUS_s918_36b[l1_362];
                              int bnd_364_s1734;
                              bnd_364_s1734 = bnd_364 - 1;
                              minseg_recursive@ANONYMOUS(l1_362_s1733, l2_363, bnd_364_s1734, p2_s145_375, active__ANONYMOUS_s915_366, history__ANONYMOUS_s1556_367, key__ANONYMOUS_s916_368, next__ANONYMOUS_s917_369, p_history__ANONYMOUS_s1445_36a, supernext__ANONYMOUS_s918_36b, symbolic__ANONYMOUS_s919_36c, ts__ANONYMOUS_s920_36d);
                              p2_374 = p2_s145_375;
                              _out_365 = (p1_372 <= p2_374 ? p1_372 : p2_374);
                              return;
                            }
                            else
                            {
                              _out_365 = -1;
                              return;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
/*lseg_header.skh:341*/

void p_treeness (int t1_225, int t2_226, ref bit _out_227, ref global bit[4] active__ANONYMOUS_s1573_228, ref global int[4] next__ANONYMOUS_s1574_229, ref global int[4] supernext__ANONYMOUS_s1575_22a, ref global bit[4] symbolic__ANONYMOUS_s1576_22b)/*lseg_header.skh:341*/
{
  {
    {
      _out_227 = 0;
      bit[4] visited_22c;
      {
        for(int __sa1866 = 0; __sa1866 < 4; __sa1866 = __sa1866 + 1)/*Canonical*/
        {
          visited_22c[__sa1866] = 0;
        }
      }
      bit _out_s287_22d;
      check_p_treeness@ANONYMOUS(t1_225, t2_226, visited_22c, 3, _out_s287_22d, active__ANONYMOUS_s1573_228, next__ANONYMOUS_s1574_229, supernext__ANONYMOUS_s1575_22a, symbolic__ANONYMOUS_s1576_22b);
      _out_227 = _out_s287_22d;
      return;
    }
  }
}
/*sll_len_rec.sk:41*/

void post_cond_list_comp_len_rec (int r_1e9, int x_1ea, ref int old_len_x_1eb, ref bit _out_1ec, ref global bit[4] active__ANONYMOUS_s1494_1ed, ref global int[2] intvars__ANONYMOUS_s888_1ee, ref global int[3] locvars__ANONYMOUS_s1495_1ef, ref global int[4] next__ANONYMOUS_s1496_1f0, ref global int[4] supernext__ANONYMOUS_s1497_1f1, ref global bit[4] symbolic__ANONYMOUS_s1498_1f2)/*sll_len_rec.sk:41*/
{
  {
    {
      _out_1ec = 0;
      bit _pac_sc_s71_1f3;
      assert ((r_1e9 >= 0) && (r_1e9 < 2)); //sll_len_rec.sk:42: Array out of bounds
      _pac_sc_s71_1f3 = (intvars__ANONYMOUS_s888_1ee[r_1e9]) == old_len_x_1eb;
      if(_pac_sc_s71_1f3)/*sll_len_rec.sk:42*/
      {
        bit _pac_sc_s71_s73_1f4;
        tree_inv@ANONYMOUS(x_1ea, _pac_sc_s71_s73_1f4, active__ANONYMOUS_s1494_1ed, locvars__ANONYMOUS_s1495_1ef, next__ANONYMOUS_s1496_1f0, supernext__ANONYMOUS_s1497_1f1, symbolic__ANONYMOUS_s1498_1f2);
        _pac_sc_s71_1f3 = _pac_sc_s71_s73_1f4;
      }
      _out_1ec = _pac_sc_s71_1f3;
      return;
    }
  }
}
/*sll_len_rec.sk:37*/

void pre_cond_list_comp_len_rec (int x_b3, ref bit _out_b4, ref global bit[4] active__ANONYMOUS_s1405_b5, ref global int[3] locvars__ANONYMOUS_s1564_b6, ref global int[4] next__ANONYMOUS_s1406_b7, ref global int[4] supernext__ANONYMOUS_s1407_b8, ref global bit[4] symbolic__ANONYMOUS_s1408_b9)/*sll_len_rec.sk:37*/
{
  {
    {
      _out_b4 = 0;
      bit _out_s216_ba;
      tree_inv@ANONYMOUS(x_b3, _out_s216_ba, active__ANONYMOUS_s1405_b5, locvars__ANONYMOUS_s1564_b6, next__ANONYMOUS_s1406_b7, supernext__ANONYMOUS_s1407_b8, symbolic__ANONYMOUS_s1408_b9);
      _out_b4 = _out_s216_ba;
      return;
    }
  }
}
/*lseg_header.skh:1026*/

void ranking_decreases (int rec_179, int v_17a, int v2_17b, ref bit _out_17c, ref global bit[4] active__ANONYMOUS_s1150_17d, ref global bit[4 * 4] history__ANONYMOUS_s1013_17e, ref global int[4] key__ANONYMOUS_s1151_17f, ref global int[3] locvars__ANONYMOUS_s940_180, ref global int[4] next__ANONYMOUS_s1152_181, ref global bit[4 * 4] p_history__ANONYMOUS_s1172_182, ref global int ranking__ANONYMOUS_s941_183, ref global int[4] supernext__ANONYMOUS_s1153_184, ref global bit[4] symbolic__ANONYMOUS_s1154_185, ref global int ts__ANONYMOUS_s1014_186)/*lseg_header.skh:1026*/
{
  {
    {
      _out_17c = 0;
      assert ((v_17a > 0) && (v_17a < 3)); //Assert at lseg_header.skh:1027 (6732768999442903441)
      assert ((v2_17b > 0) && (v2_17b < 3)); //Assert at lseg_header.skh:1028 (-3236958289819293040)
      int new_ranking_187;
      new_ranking_187 = -1;
      if(((rec_179 == 1) || (rec_179 == 2)) || (rec_179 == 3))/*lseg_header.skh:1030*/
      {
        bit _pac_sc_s1778;
        {
          assert ((v_17a >= 0) && (v_17a < 3)); //lseg_header.skh:1031: Array out of bounds
          _pac_sc_s1778 = (locvars__ANONYMOUS_s940_180[v_17a]) >= 0;
          if(_pac_sc_s1778)/*lseg_header.skh:1031*/
          {
            assert ((v_17a >= 0) && (v_17a < 3)); //lseg_header.skh:1031: Array out of bounds
            _pac_sc_s1778 = (locvars__ANONYMOUS_s940_180[v_17a]) < 4;
          }
        }
        if(!(_pac_sc_s1778))/*lseg_header.skh:1031*/
        {
          _out_17c = ranking__ANONYMOUS_s941_183 == 0;
          return;
        }
        else
        {
          if(rec_179 == 1)/*lseg_header.skh:1033*/
          {
            int new_ranking_s218_188;
            int l_1fd_s1671;
            assert ((v_17a >= 0) && (v_17a < 3)); //lseg_header.skh:1033: Array out of bounds
            l_1fd_s1671 = locvars__ANONYMOUS_s940_180[v_17a];
            len_comp@ANONYMOUS(l_1fd_s1671, new_ranking_s218_188, active__ANONYMOUS_s1150_17d, history__ANONYMOUS_s1013_17e, next__ANONYMOUS_s1152_181, p_history__ANONYMOUS_s1172_182, supernext__ANONYMOUS_s1153_184, symbolic__ANONYMOUS_s1154_185, ts__ANONYMOUS_s1014_186);
            new_ranking_187 = new_ranking_s218_188;
          }
          else
          {
            if(rec_179 == 2)/*lseg_header.skh:1034*/
            {
              int new_ranking_s220_189;
              int l_20f_s1672;
              assert ((v_17a >= 0) && (v_17a < 3)); //lseg_header.skh:1034: Array out of bounds
              l_20f_s1672 = locvars__ANONYMOUS_s940_180[v_17a];
              max_comp@ANONYMOUS(l_20f_s1672, new_ranking_s220_189, active__ANONYMOUS_s1150_17d, history__ANONYMOUS_s1013_17e, key__ANONYMOUS_s1151_17f, next__ANONYMOUS_s1152_181, p_history__ANONYMOUS_s1172_182, supernext__ANONYMOUS_s1153_184, symbolic__ANONYMOUS_s1154_185, ts__ANONYMOUS_s1014_186);
              new_ranking_187 = new_ranking_s220_189;
            }
            else
            {
              if(rec_179 == 3)/*lseg_header.skh:1035*/
              {
                int new_ranking_s222_18a;
                int l_21a_s1673;
                assert ((v_17a >= 0) && (v_17a < 3)); //lseg_header.skh:1035: Array out of bounds
                l_21a_s1673 = locvars__ANONYMOUS_s940_180[v_17a];
                min_comp@ANONYMOUS(l_21a_s1673, new_ranking_s222_18a, active__ANONYMOUS_s1150_17d, history__ANONYMOUS_s1013_17e, key__ANONYMOUS_s1151_17f, next__ANONYMOUS_s1152_181, p_history__ANONYMOUS_s1172_182, supernext__ANONYMOUS_s1153_184, symbolic__ANONYMOUS_s1154_185, ts__ANONYMOUS_s1014_186);
                new_ranking_187 = new_ranking_s222_18a;
              }
            }
          }
        }
      }
      else
      {
        if(((rec_179 == 5) || (rec_179 == 6)) || (rec_179 == 7))/*lseg_header.skh:1037*/
        {
          bit _pac_sc_s1779;
          {
            assert ((v_17a >= 0) && (v_17a < 3)); //lseg_header.skh:1038: Array out of bounds
            _pac_sc_s1779 = (locvars__ANONYMOUS_s940_180[v_17a]) >= 0;
            if(_pac_sc_s1779)/*lseg_header.skh:1038*/
            {
              assert ((v_17a >= 0) && (v_17a < 3)); //lseg_header.skh:1038: Array out of bounds
              _pac_sc_s1779 = (locvars__ANONYMOUS_s940_180[v_17a]) < 4;
            }
          }
          if(!(_pac_sc_s1779))/*lseg_header.skh:1038*/
          {
            _out_17c = ranking__ANONYMOUS_s941_183 == 0;
            return;
          }
          else
          {
            bit _pac_sc_s1780;
            {
              assert ((v2_17b >= 0) && (v2_17b < 3)); //lseg_header.skh:1039: Array out of bounds
              _pac_sc_s1780 = (locvars__ANONYMOUS_s940_180[v2_17b]) >= 0;
              if(_pac_sc_s1780)/*lseg_header.skh:1039*/
              {
                assert ((v2_17b >= 0) && (v2_17b < 3)); //lseg_header.skh:1039: Array out of bounds
                _pac_sc_s1780 = (locvars__ANONYMOUS_s940_180[v2_17b]) < 4;
              }
            }
            if(!(_pac_sc_s1780))/*lseg_header.skh:1039*/
            {
              _out_17c = ranking__ANONYMOUS_s941_183 == 0;
              return;
            }
            else
            {
              if(rec_179 == 5)/*lseg_header.skh:1041*/
              {
                int new_ranking_s224_18b;
                int l1_22e_s1674;
                assert ((v_17a >= 0) && (v_17a < 3)); //lseg_header.skh:1041: Array out of bounds
                l1_22e_s1674 = locvars__ANONYMOUS_s940_180[v_17a];
                int l2_22f_s1675;
                assert ((v2_17b >= 0) && (v2_17b < 3)); //lseg_header.skh:1041: Array out of bounds
                l2_22f_s1675 = locvars__ANONYMOUS_s940_180[v2_17b];
                lenseg_comp@ANONYMOUS(l1_22e_s1674, l2_22f_s1675, new_ranking_s224_18b, active__ANONYMOUS_s1150_17d, history__ANONYMOUS_s1013_17e, next__ANONYMOUS_s1152_181, p_history__ANONYMOUS_s1172_182, supernext__ANONYMOUS_s1153_184, symbolic__ANONYMOUS_s1154_185, ts__ANONYMOUS_s1014_186);
                new_ranking_187 = new_ranking_s224_18b;
              }
              else
              {
                if(rec_179 == 6)/*lseg_header.skh:1042*/
                {
                  int new_ranking_s226_18c;
                  int l1_239_s1676;
                  assert ((v_17a >= 0) && (v_17a < 3)); //lseg_header.skh:1042: Array out of bounds
                  l1_239_s1676 = locvars__ANONYMOUS_s940_180[v_17a];
                  int l2_23a_s1677;
                  assert ((v2_17b >= 0) && (v2_17b < 3)); //lseg_header.skh:1042: Array out of bounds
                  l2_23a_s1677 = locvars__ANONYMOUS_s940_180[v2_17b];
                  maxseg_comp@ANONYMOUS(l1_239_s1676, l2_23a_s1677, new_ranking_s226_18c, active__ANONYMOUS_s1150_17d, history__ANONYMOUS_s1013_17e, key__ANONYMOUS_s1151_17f, next__ANONYMOUS_s1152_181, p_history__ANONYMOUS_s1172_182, supernext__ANONYMOUS_s1153_184, symbolic__ANONYMOUS_s1154_185, ts__ANONYMOUS_s1014_186);
                  new_ranking_187 = new_ranking_s226_18c;
                }
                else
                {
                  if(rec_179 == 7)/*lseg_header.skh:1043*/
                  {
                    int new_ranking_s228_18d;
                    int l1_245_s1678;
                    assert ((v_17a >= 0) && (v_17a < 3)); //lseg_header.skh:1043: Array out of bounds
                    l1_245_s1678 = locvars__ANONYMOUS_s940_180[v_17a];
                    int l2_246_s1679;
                    assert ((v2_17b >= 0) && (v2_17b < 3)); //lseg_header.skh:1043: Array out of bounds
                    l2_246_s1679 = locvars__ANONYMOUS_s940_180[v2_17b];
                    minseg_comp@ANONYMOUS(l1_245_s1678, l2_246_s1679, new_ranking_s228_18d, active__ANONYMOUS_s1150_17d, history__ANONYMOUS_s1013_17e, key__ANONYMOUS_s1151_17f, next__ANONYMOUS_s1152_181, p_history__ANONYMOUS_s1172_182, supernext__ANONYMOUS_s1153_184, symbolic__ANONYMOUS_s1154_185, ts__ANONYMOUS_s1014_186);
                    new_ranking_187 = new_ranking_s228_18d;
                  }
                }
              }
            }
          }
        }
      }
      _out_17c = (ranking__ANONYMOUS_s941_183 > new_ranking_187) && (new_ranking_187 >= 0);
      return;
    }
  }
}
/*lseg_header.skh:1006*/

void ranking_snapshot (int rec_c7, int v_c8, int v2_c9, ref global bit[4] active__ANONYMOUS_s1461_ca, ref global bit[4 * 4] history__ANONYMOUS_s1198_cb, ref global int[4] key__ANONYMOUS_s1462_cc, ref global int[3] locvars__ANONYMOUS_s850_cd, ref global int[4] next__ANONYMOUS_s1463_ce, ref global bit[4 * 4] p_history__ANONYMOUS_s1336_cf, ref global int ranking__ANONYMOUS_s851_d0, ref global int[4] supernext__ANONYMOUS_s1464_d1, ref global bit[4] symbolic__ANONYMOUS_s1465_d2, ref global int ts__ANONYMOUS_s1199_d3)/*lseg_header.skh:1006*/
{
  {
    {
      assert ((v_c8 > 0) && (v_c8 < 3)); //Assert at lseg_header.skh:1007 (4163127404308114577)
      assert ((v2_c9 > 0) && (v2_c9 < 3)); //Assert at lseg_header.skh:1008 (915258932542081777)
      if(((rec_c7 == 1) || (rec_c7 == 2)) || (rec_c7 == 3))/*lseg_header.skh:1009*/
      {
        bit _pac_sc_s1775;
        {
          assert ((v_c8 >= 0) && (v_c8 < 3)); //lseg_header.skh:1010: Array out of bounds
          _pac_sc_s1775 = (locvars__ANONYMOUS_s850_cd[v_c8]) >= 0;
          if(_pac_sc_s1775)/*lseg_header.skh:1010*/
          {
            assert ((v_c8 >= 0) && (v_c8 < 3)); //lseg_header.skh:1010: Array out of bounds
            _pac_sc_s1775 = (locvars__ANONYMOUS_s850_cd[v_c8]) < 4;
          }
        }
        if(!(_pac_sc_s1775))/*lseg_header.skh:1010*/
        {
          return;
        }
        else
        {
          bit _out_s271_d4;
          int t_207_s1657;
          assert ((v_c8 >= 0) && (v_c8 < 3)); //lseg_header.skh:1011: Array out of bounds
          t_207_s1657 = locvars__ANONYMOUS_s850_cd[v_c8];
          treeness@ANONYMOUS(t_207_s1657, _out_s271_d4, active__ANONYMOUS_s1461_ca, next__ANONYMOUS_s1463_ce, supernext__ANONYMOUS_s1464_d1, symbolic__ANONYMOUS_s1465_d2);
          if(!(_out_s271_d4))/*lseg_header.skh:1011*/
          {
            return;
          }
          else
          {
            if(rec_c7 == 1)/*lseg_header.skh:1012*/
            {
              int ranking_s273_d5;
              int l_1fd_s1658;
              assert ((v_c8 >= 0) && (v_c8 < 3)); //lseg_header.skh:1012: Array out of bounds
              l_1fd_s1658 = locvars__ANONYMOUS_s850_cd[v_c8];
              len_comp@ANONYMOUS(l_1fd_s1658, ranking_s273_d5, active__ANONYMOUS_s1461_ca, history__ANONYMOUS_s1198_cb, next__ANONYMOUS_s1463_ce, p_history__ANONYMOUS_s1336_cf, supernext__ANONYMOUS_s1464_d1, symbolic__ANONYMOUS_s1465_d2, ts__ANONYMOUS_s1199_d3);
              ranking__ANONYMOUS_s851_d0 = ranking_s273_d5;
            }
            else
            {
              if(rec_c7 == 2)/*lseg_header.skh:1013*/
              {
                int ranking_s275_d6;
                int l_20f_s1659;
                assert ((v_c8 >= 0) && (v_c8 < 3)); //lseg_header.skh:1013: Array out of bounds
                l_20f_s1659 = locvars__ANONYMOUS_s850_cd[v_c8];
                max_comp@ANONYMOUS(l_20f_s1659, ranking_s275_d6, active__ANONYMOUS_s1461_ca, history__ANONYMOUS_s1198_cb, key__ANONYMOUS_s1462_cc, next__ANONYMOUS_s1463_ce, p_history__ANONYMOUS_s1336_cf, supernext__ANONYMOUS_s1464_d1, symbolic__ANONYMOUS_s1465_d2, ts__ANONYMOUS_s1199_d3);
                ranking__ANONYMOUS_s851_d0 = ranking_s275_d6;
              }
              else
              {
                if(rec_c7 == 3)/*lseg_header.skh:1014*/
                {
                  int ranking_s277_d7;
                  int l_21a_s1660;
                  assert ((v_c8 >= 0) && (v_c8 < 3)); //lseg_header.skh:1014: Array out of bounds
                  l_21a_s1660 = locvars__ANONYMOUS_s850_cd[v_c8];
                  min_comp@ANONYMOUS(l_21a_s1660, ranking_s277_d7, active__ANONYMOUS_s1461_ca, history__ANONYMOUS_s1198_cb, key__ANONYMOUS_s1462_cc, next__ANONYMOUS_s1463_ce, p_history__ANONYMOUS_s1336_cf, supernext__ANONYMOUS_s1464_d1, symbolic__ANONYMOUS_s1465_d2, ts__ANONYMOUS_s1199_d3);
                  ranking__ANONYMOUS_s851_d0 = ranking_s277_d7;
                }
              }
            }
          }
        }
      }
      else
      {
        if(((rec_c7 == 5) || (rec_c7 == 6)) || (rec_c7 == 7))/*lseg_header.skh:1016*/
        {
          bit _pac_sc_s1776;
          {
            assert ((v_c8 >= 0) && (v_c8 < 3)); //lseg_header.skh:1017: Array out of bounds
            _pac_sc_s1776 = (locvars__ANONYMOUS_s850_cd[v_c8]) >= 0;
            if(_pac_sc_s1776)/*lseg_header.skh:1017*/
            {
              assert ((v_c8 >= 0) && (v_c8 < 3)); //lseg_header.skh:1017: Array out of bounds
              _pac_sc_s1776 = (locvars__ANONYMOUS_s850_cd[v_c8]) < 4;
            }
          }
          if(!(_pac_sc_s1776))/*lseg_header.skh:1017*/
          {
            return;
          }
          else
          {
            bit _pac_sc_s1777;
            {
              assert ((v2_c9 >= 0) && (v2_c9 < 3)); //lseg_header.skh:1018: Array out of bounds
              _pac_sc_s1777 = (locvars__ANONYMOUS_s850_cd[v2_c9]) >= 0;
              if(_pac_sc_s1777)/*lseg_header.skh:1018*/
              {
                assert ((v2_c9 >= 0) && (v2_c9 < 3)); //lseg_header.skh:1018: Array out of bounds
                _pac_sc_s1777 = (locvars__ANONYMOUS_s850_cd[v2_c9]) < 4;
              }
            }
            if(!(_pac_sc_s1777))/*lseg_header.skh:1018*/
            {
              return;
            }
            else
            {
              bit _out_s279_d8;
              int t1_225_s1661;
              assert ((v_c8 >= 0) && (v_c8 < 3)); //lseg_header.skh:1019: Array out of bounds
              t1_225_s1661 = locvars__ANONYMOUS_s850_cd[v_c8];
              int t2_226_s1662;
              assert ((v2_c9 >= 0) && (v2_c9 < 3)); //lseg_header.skh:1019: Array out of bounds
              t2_226_s1662 = locvars__ANONYMOUS_s850_cd[v2_c9];
              p_treeness@ANONYMOUS(t1_225_s1661, t2_226_s1662, _out_s279_d8, active__ANONYMOUS_s1461_ca, next__ANONYMOUS_s1463_ce, supernext__ANONYMOUS_s1464_d1, symbolic__ANONYMOUS_s1465_d2);
              if(!(_out_s279_d8))/*lseg_header.skh:1019*/
              {
                return;
              }
            }
          }
          if(rec_c7 == 5)/*lseg_header.skh:1020*/
          {
            int ranking_s281_d9;
            int l1_22e_s1663;
            assert ((v_c8 >= 0) && (v_c8 < 3)); //lseg_header.skh:1020: Array out of bounds
            l1_22e_s1663 = locvars__ANONYMOUS_s850_cd[v_c8];
            int l2_22f_s1664;
            assert ((v2_c9 >= 0) && (v2_c9 < 3)); //lseg_header.skh:1020: Array out of bounds
            l2_22f_s1664 = locvars__ANONYMOUS_s850_cd[v2_c9];
            lenseg_comp@ANONYMOUS(l1_22e_s1663, l2_22f_s1664, ranking_s281_d9, active__ANONYMOUS_s1461_ca, history__ANONYMOUS_s1198_cb, next__ANONYMOUS_s1463_ce, p_history__ANONYMOUS_s1336_cf, supernext__ANONYMOUS_s1464_d1, symbolic__ANONYMOUS_s1465_d2, ts__ANONYMOUS_s1199_d3);
            ranking__ANONYMOUS_s851_d0 = ranking_s281_d9;
          }
          else
          {
            if(rec_c7 == 6)/*lseg_header.skh:1021*/
            {
              int ranking_s283_da;
              int l1_239_s1665;
              assert ((v_c8 >= 0) && (v_c8 < 3)); //lseg_header.skh:1021: Array out of bounds
              l1_239_s1665 = locvars__ANONYMOUS_s850_cd[v_c8];
              int l2_23a_s1666;
              assert ((v2_c9 >= 0) && (v2_c9 < 3)); //lseg_header.skh:1021: Array out of bounds
              l2_23a_s1666 = locvars__ANONYMOUS_s850_cd[v2_c9];
              maxseg_comp@ANONYMOUS(l1_239_s1665, l2_23a_s1666, ranking_s283_da, active__ANONYMOUS_s1461_ca, history__ANONYMOUS_s1198_cb, key__ANONYMOUS_s1462_cc, next__ANONYMOUS_s1463_ce, p_history__ANONYMOUS_s1336_cf, supernext__ANONYMOUS_s1464_d1, symbolic__ANONYMOUS_s1465_d2, ts__ANONYMOUS_s1199_d3);
              ranking__ANONYMOUS_s851_d0 = ranking_s283_da;
            }
            else
            {
              if(rec_c7 == 7)/*lseg_header.skh:1022*/
              {
                int ranking_s285_db;
                int l1_245_s1667;
                assert ((v_c8 >= 0) && (v_c8 < 3)); //lseg_header.skh:1022: Array out of bounds
                l1_245_s1667 = locvars__ANONYMOUS_s850_cd[v_c8];
                int l2_246_s1668;
                assert ((v2_c9 >= 0) && (v2_c9 < 3)); //lseg_header.skh:1022: Array out of bounds
                l2_246_s1668 = locvars__ANONYMOUS_s850_cd[v2_c9];
                minseg_comp@ANONYMOUS(l1_245_s1667, l2_246_s1668, ranking_s285_db, active__ANONYMOUS_s1461_ca, history__ANONYMOUS_s1198_cb, key__ANONYMOUS_s1462_cc, next__ANONYMOUS_s1463_ce, p_history__ANONYMOUS_s1336_cf, supernext__ANONYMOUS_s1464_d1, symbolic__ANONYMOUS_s1465_d2, ts__ANONYMOUS_s1199_d3);
                ranking__ANONYMOUS_s851_d0 = ranking_s285_db;
              }
            }
          }
        }
      }
    }
  }
}
/*sll_len_rec.sk:17*/

void rec_list_comp_len_rec (int x_195, int recret_196, ref int rv_197, ref bit[3] new_symbolic_198, ref int[3] new_next_199, ref int[3] new_supernext_19a, ref int[3] new_key_19b, ref global bit[4] active__ANONYMOUS_s1287_19c, ref global bit error_flag__ANONYMOUS_s1549_19d, ref global bit[4 * 4] history__ANONYMOUS_s1262_19e, ref global int[2] intvars__ANONYMOUS_s775_19f, ref global int[4] key__ANONYMOUS_s1288_1a0, ref global int[3] locvars__ANONYMOUS_s776_1a1, ref global int newer_len__ANONYMOUS_s777_1a2, ref global int newer_sll__ANONYMOUS_s778_1a3, ref global int[4] next__ANONYMOUS_s1289_1a4, ref global bit[4 * 4] p_history__ANONYMOUS_s1542_1a5, ref global int[4] supernext__ANONYMOUS_s1290_1a6, ref global bit[4] symbolic__ANONYMOUS_s1291_1a7, ref global int ts__ANONYMOUS_s1263_1a8)/*sll_len_rec.sk:17*/
{
  {
    {
      bit _out_s208_1a9;
      pre_cond_list_comp_len_rec@ANONYMOUS(x_195, _out_s208_1a9, active__ANONYMOUS_s1287_19c, locvars__ANONYMOUS_s776_1a1, next__ANONYMOUS_s1289_1a4, supernext__ANONYMOUS_s1290_1a6, symbolic__ANONYMOUS_s1291_1a7);
      assertPost@ANONYMOUS(_out_s208_1a9, error_flag__ANONYMOUS_s1549_19d);
      snapshot_list_comp_len_rec@ANONYMOUS(x_195, newer_sll__ANONYMOUS_s778_1a3, newer_len__ANONYMOUS_s777_1a2, active__ANONYMOUS_s1287_19c, history__ANONYMOUS_s1262_19e, locvars__ANONYMOUS_s776_1a1, next__ANONYMOUS_s1289_1a4, p_history__ANONYMOUS_s1542_1a5, supernext__ANONYMOUS_s1290_1a6, symbolic__ANONYMOUS_s1291_1a7, ts__ANONYMOUS_s1263_1a8);
      int _out_s210_1aa;
      int r_303_s1680;
      assert ((x_195 >= 0) && (x_195 < 3)); //sll_len_rec.sk:23: Array out of bounds
      r_303_s1680 = locvars__ANONYMOUS_s776_1a1[x_195];
      havoc@ANONYMOUS(r_303_s1680, new_symbolic_198, new_next_199, new_supernext_19a, new_key_19b, _out_s210_1aa, active__ANONYMOUS_s1287_19c, history__ANONYMOUS_s1262_19e, key__ANONYMOUS_s1288_1a0, next__ANONYMOUS_s1289_1a4, p_history__ANONYMOUS_s1542_1a5, supernext__ANONYMOUS_s1290_1a6, symbolic__ANONYMOUS_s1291_1a7, ts__ANONYMOUS_s1263_1a8);
      _out_s210_1aa;
      assert ((recret_196 >= 0) && (recret_196 < 2)); //sll_len_rec.sk:25: Either null pointer or Array out of bounds
      intvars__ANONYMOUS_s775_19f[recret_196] = rv_197;
      bit _out_s212_1ab;
      post_cond_list_comp_len_rec@ANONYMOUS(recret_196, x_195, newer_len__ANONYMOUS_s777_1a2, _out_s212_1ab, active__ANONYMOUS_s1287_19c, intvars__ANONYMOUS_s775_19f, locvars__ANONYMOUS_s776_1a1, next__ANONYMOUS_s1289_1a4, supernext__ANONYMOUS_s1290_1a6, symbolic__ANONYMOUS_s1291_1a7);
      assumePre@ANONYMOUS(_out_s212_1ab, error_flag__ANONYMOUS_s1549_19d);
    }
  }
}
/*aux.skh:102*/

void ret_int (int v_1e7, ref global int ret__ANONYMOUS_s786_1e8)/*aux.skh:102*/
{
  {
    {
      assert (v_1e7 >= 0); //Assert at aux.skh:103 (4851818404366696273)
      assert (v_1e7 < 2); //Assert at aux.skh:104 (6236170160404536991)
      ret__ANONYMOUS_s786_1e8 = v_1e7;
    }
  }
}
/*lseg_header.skh:18*/

uninterp void sll (int l, int t, ref bit _out)/*lseg_header.skh:18*/
/*lseg_header.skh:30*/

void sll_comp (int l_376, ref bit _out_377, ref global bit[4] active__ANONYMOUS_s1094_378, ref global bit[4 * 4] history__ANONYMOUS_s1297_379, ref global int[4] key__ANONYMOUS_s1095_37a, ref global int[4] next__ANONYMOUS_s1096_37b, ref global bit[4 * 4] p_history__ANONYMOUS_s1444_37c, ref global int[4] supernext__ANONYMOUS_s1097_37d, ref global bit[4] symbolic__ANONYMOUS_s1098_37e, ref global int ts__ANONYMOUS_s1099_37f)/*lseg_header.skh:30*/
{
  {
    {
      _out_377 = 0;
      bit _out_s167_380;
      sll_recursive@ANONYMOUS(l_376, 3, _out_s167_380, active__ANONYMOUS_s1094_378, history__ANONYMOUS_s1297_379, key__ANONYMOUS_s1095_37a, next__ANONYMOUS_s1096_37b, p_history__ANONYMOUS_s1444_37c, supernext__ANONYMOUS_s1097_37d, symbolic__ANONYMOUS_s1098_37e, ts__ANONYMOUS_s1099_37f);
      _out_377 = _out_s167_380;
      return;
    }
  }
}
/*lseg_header.skh:50*/

void sll_history (int l_3ed, int ts_0_3ee, ref bit _out_3ef, ref global bit[4 * 4] history__ANONYMOUS_s770_3f0, ref global int ts__ANONYMOUS_s771_3f1)/*lseg_header.skh:50*/
{
  {
    {
      _out_3ef = 0;
      int ts_3f2;
      ts_3f2 = ts_0_3ee;
      bit __sa0_3f3;
      bit _pac_sc_s1852;
      {
        _pac_sc_s1852 = ts_3f2 > 0;
        if(_pac_sc_s1852)/*lseg_header.skh:51*/
        {
          assert ((l_3ed >= 0) && (l_3ed < 4)); //lseg_header.skh:51: Array out of bounds
          assert ((ts_3f2 >= 0) && (ts_3f2 < 4)); //lseg_header.skh:51: Array out of bounds
          _pac_sc_s1852 = history__ANONYMOUS_s770_3f0[(4 * l_3ed) + ts_3f2];
        }
      }
      __sa0_3f3 = _pac_sc_s1852;
      while(__sa0_3f3)
      {
        int uo_s29_3f5;
        uo_s29_3f5 = ts_3f2;
        ts_3f2 = ts_3f2 - 1;
        uo_s29_3f5;
        bit _pac_sc_s1853;
        {
          _pac_sc_s1853 = ts_3f2 > 0;
          if(_pac_sc_s1853)/*lseg_header.skh:51*/
          {
            assert ((l_3ed >= 0) && (l_3ed < 4)); //lseg_header.skh:51: Array out of bounds
            assert ((ts_3f2 >= 0) && (ts_3f2 < 4)); //lseg_header.skh:51: Array out of bounds
            _pac_sc_s1853 = history__ANONYMOUS_s770_3f0[(4 * l_3ed) + ts_3f2];
          }
        }
        __sa0_3f3 = _pac_sc_s1853;
      }
      bit _out_s188_3f6;
      sll(l_3ed, ts_3f2, _out_s188_3f6);
      _out_3ef = _out_s188_3f6;
      return;
    }
  }
}
/*lseg_header.skh:35*/

void sll_recursive (int l_3cd, int bnd_3ce, ref bit _out_3cf, ref global bit[4] active__ANONYMOUS_s909_3d0, ref global bit[4 * 4] history__ANONYMOUS_s1501_3d1, ref global int[4] key__ANONYMOUS_s910_3d2, ref global int[4] next__ANONYMOUS_s911_3d3, ref global bit[4 * 4] p_history__ANONYMOUS_s1051_3d4, ref global int[4] supernext__ANONYMOUS_s912_3d5, ref global bit[4] symbolic__ANONYMOUS_s913_3d6, ref global int ts__ANONYMOUS_s914_3d7)/*lseg_header.skh:35*/
{
  {
    {
      _out_3cf = 0;
      if((l_3cd < 0) || (l_3cd >= 4))/*lseg_header.skh:36*/
      {
        _out_3cf = 0;
        return;
      }
      assert ((l_3cd >= 0) && (l_3cd < 4)); //lseg_header.skh:37: Array out of bounds
      if(!(active__ANONYMOUS_s909_3d0[l_3cd]))/*lseg_header.skh:37*/
      {
        _out_3cf = 0;
        return;
      }
      if(l_3cd == 0)/*lseg_header.skh:38*/
      {
        _out_3cf = 1;
        return;
      }
      if(bnd_3ce < 0)/*lseg_header.skh:39*/
      {
        _out_3cf = 0;
        return;
      }
      else
      {
        assert ((l_3cd >= 0) && (l_3cd < 4)); //lseg_header.skh:41: Array out of bounds
        if(symbolic__ANONYMOUS_s913_3d6[l_3cd])/*lseg_header.skh:41*/
        {
          bit _out_s169_3d8;
          sll_history@ANONYMOUS(l_3cd, ts__ANONYMOUS_s914_3d7, _out_s169_3d8, history__ANONYMOUS_s1501_3d1, ts__ANONYMOUS_s914_3d7);
          _out_3cf = _out_s169_3d8;
          return;
        }
        else
        {
          assert ((l_3cd >= 0) && (l_3cd < 4)); //lseg_header.skh:42: Array out of bounds
          if(0 == (next__ANONYMOUS_s911_3d3[l_3cd]))/*lseg_header.skh:42*/
          {
            _out_3cf = 1;
            return;
          }
          else
          {
            bit _pac_sc_s1845;
            {
              assert ((l_3cd >= 0) && (l_3cd < 4)); //lseg_header.skh:43: Array out of bounds
              _pac_sc_s1845 = 0 < (next__ANONYMOUS_s911_3d3[l_3cd]);
              if(_pac_sc_s1845)/*lseg_header.skh:43*/
              {
                assert ((l_3cd >= 0) && (l_3cd < 4)); //lseg_header.skh:43: Array out of bounds
                _pac_sc_s1845 = (next__ANONYMOUS_s911_3d3[l_3cd]) < 4;
              }
            }
            if(_pac_sc_s1845)/*lseg_header.skh:43*/
            {
              bit _pac_sc_s170_3d9;
              bit _pac_sc_s170_s172_3da;
              int l_3cd_s1735;
              assert ((l_3cd >= 0) && (l_3cd < 4)); //lseg_header.skh:43: Array out of bounds
              l_3cd_s1735 = next__ANONYMOUS_s911_3d3[l_3cd];
              int bnd_3ce_s1736;
              bnd_3ce_s1736 = bnd_3ce - 1;
              sll_recursive@ANONYMOUS(l_3cd_s1735, bnd_3ce_s1736, _pac_sc_s170_s172_3da, active__ANONYMOUS_s909_3d0, history__ANONYMOUS_s1501_3d1, key__ANONYMOUS_s910_3d2, next__ANONYMOUS_s911_3d3, p_history__ANONYMOUS_s1051_3d4, supernext__ANONYMOUS_s912_3d5, symbolic__ANONYMOUS_s913_3d6, ts__ANONYMOUS_s914_3d7);
              _pac_sc_s170_3d9 = _pac_sc_s170_s172_3da;
              if(_pac_sc_s170_3d9)/*lseg_header.skh:43*/
              {
                int _pac_sc_s170_s174_3db;
                int l_342_s1737;
                assert ((l_3cd >= 0) && (l_3cd < 4)); //lseg_header.skh:43: Array out of bounds
                l_342_s1737 = next__ANONYMOUS_s911_3d3[l_3cd];
                int bnd_343_s1738;
                bnd_343_s1738 = bnd_3ce - 1;
                min_recursive@ANONYMOUS(l_342_s1737, bnd_343_s1738, _pac_sc_s170_s174_3db, active__ANONYMOUS_s909_3d0, history__ANONYMOUS_s1501_3d1, key__ANONYMOUS_s910_3d2, next__ANONYMOUS_s911_3d3, p_history__ANONYMOUS_s1051_3d4, supernext__ANONYMOUS_s912_3d5, symbolic__ANONYMOUS_s913_3d6, ts__ANONYMOUS_s914_3d7);
                assert ((l_3cd >= 0) && (l_3cd < 4)); //lseg_header.skh:43: Array out of bounds
                _pac_sc_s170_3d9 = (key__ANONYMOUS_s910_3d2[l_3cd]) <= _pac_sc_s170_s174_3db;
              }
              _out_3cf = _pac_sc_s170_3d9;
              return;
            }
            else
            {
              assert ((l_3cd >= 0) && (l_3cd < 4)); //lseg_header.skh:44: Array out of bounds
              if(0 == (supernext__ANONYMOUS_s912_3d5[l_3cd]))/*lseg_header.skh:44*/
              {
                _out_3cf = 1;
                return;
              }
              else
              {
                bit _pac_sc_s1846;
                {
                  assert ((l_3cd >= 0) && (l_3cd < 4)); //lseg_header.skh:45: Array out of bounds
                  _pac_sc_s1846 = 0 < (supernext__ANONYMOUS_s912_3d5[l_3cd]);
                  if(_pac_sc_s1846)/*lseg_header.skh:45*/
                  {
                    assert ((l_3cd >= 0) && (l_3cd < 4)); //lseg_header.skh:45: Array out of bounds
                    _pac_sc_s1846 = (supernext__ANONYMOUS_s912_3d5[l_3cd]) < 4;
                  }
                }
                if(_pac_sc_s1846)/*lseg_header.skh:45*/
                {
                  bit _pac_sc_s175_3dc;
                  bit _pac_sc_s176_3dd;
                  bit _pac_sc_s176_s178_3de;
                  sllseg_history@ANONYMOUS(l_3cd, ts__ANONYMOUS_s914_3d7, _pac_sc_s176_s178_3de, p_history__ANONYMOUS_s1051_3d4, ts__ANONYMOUS_s914_3d7);
                  _pac_sc_s176_3dd = _pac_sc_s176_s178_3de;
                  if(_pac_sc_s176_3dd)/*lseg_header.skh:45*/
                  {
                    bit _pac_sc_s176_s180_3df;
                    int l_3cd_s1739;
                    assert ((l_3cd >= 0) && (l_3cd < 4)); //lseg_header.skh:45: Array out of bounds
                    l_3cd_s1739 = supernext__ANONYMOUS_s912_3d5[l_3cd];
                    int bnd_3ce_s1740;
                    bnd_3ce_s1740 = bnd_3ce - 1;
                    sll_recursive@ANONYMOUS(l_3cd_s1739, bnd_3ce_s1740, _pac_sc_s176_s180_3df, active__ANONYMOUS_s909_3d0, history__ANONYMOUS_s1501_3d1, key__ANONYMOUS_s910_3d2, next__ANONYMOUS_s911_3d3, p_history__ANONYMOUS_s1051_3d4, supernext__ANONYMOUS_s912_3d5, symbolic__ANONYMOUS_s913_3d6, ts__ANONYMOUS_s914_3d7);
                    _pac_sc_s176_3dd = _pac_sc_s176_s180_3df;
                  }
                  _pac_sc_s175_3dc = _pac_sc_s176_3dd;
                  if(_pac_sc_s175_3dc)/*lseg_header.skh:45*/
                  {
                    int _pac_sc_s175_s182_3e0;
                    maxseg_history@ANONYMOUS(l_3cd, ts__ANONYMOUS_s914_3d7, _pac_sc_s175_s182_3e0, p_history__ANONYMOUS_s1051_3d4, ts__ANONYMOUS_s914_3d7);
                    int _pac_sc_s175_s184_3e1;
                    int l_342_s1741;
                    assert ((l_3cd >= 0) && (l_3cd < 4)); //lseg_header.skh:45: Array out of bounds
                    l_342_s1741 = supernext__ANONYMOUS_s912_3d5[l_3cd];
                    int bnd_343_s1742;
                    bnd_343_s1742 = bnd_3ce - 1;
                    min_recursive@ANONYMOUS(l_342_s1741, bnd_343_s1742, _pac_sc_s175_s184_3e1, active__ANONYMOUS_s909_3d0, history__ANONYMOUS_s1501_3d1, key__ANONYMOUS_s910_3d2, next__ANONYMOUS_s911_3d3, p_history__ANONYMOUS_s1051_3d4, supernext__ANONYMOUS_s912_3d5, symbolic__ANONYMOUS_s913_3d6, ts__ANONYMOUS_s914_3d7);
                    _pac_sc_s175_3dc = _pac_sc_s175_s182_3e0 <= _pac_sc_s175_s184_3e1;
                  }
                  _out_3cf = _pac_sc_s175_3dc;
                  return;
                }
                else
                {
                  _out_3cf = 0;
                  return;
                }
              }
            }
          }
        }
      }
    }
  }
}
/*lseg_header.skh:23*/

uninterp void sllseg (int l1, int t, ref bit _out)/*lseg_header.skh:23*/
/*lseg_header.skh:75*/

void sllseg_history (int l1_3f7, int ts_0_3f8, ref bit _out_3f9, ref global bit[4 * 4] p_history__ANONYMOUS_s842_3fa, ref global int ts__ANONYMOUS_s843_3fb)/*lseg_header.skh:75*/
{
  {
    {
      _out_3f9 = 0;
      int ts_3fc;
      ts_3fc = ts_0_3f8;
      bit __sa1_3fd;
      bit _pac_sc_s1854;
      {
        _pac_sc_s1854 = ts_3fc > 0;
        if(_pac_sc_s1854)/*lseg_header.skh:76*/
        {
          assert ((l1_3f7 >= 0) && (l1_3f7 < 4)); //lseg_header.skh:76: Array out of bounds
          assert ((ts_3fc >= 0) && (ts_3fc < 4)); //lseg_header.skh:76: Array out of bounds
          _pac_sc_s1854 = p_history__ANONYMOUS_s842_3fa[(4 * l1_3f7) + ts_3fc];
        }
      }
      __sa1_3fd = _pac_sc_s1854;
      while(__sa1_3fd)
      {
        int uo_s28_3ff;
        uo_s28_3ff = ts_3fc;
        ts_3fc = ts_3fc - 1;
        uo_s28_3ff;
        bit _pac_sc_s1855;
        {
          _pac_sc_s1855 = ts_3fc > 0;
          if(_pac_sc_s1855)/*lseg_header.skh:76*/
          {
            assert ((l1_3f7 >= 0) && (l1_3f7 < 4)); //lseg_header.skh:76: Array out of bounds
            assert ((ts_3fc >= 0) && (ts_3fc < 4)); //lseg_header.skh:76: Array out of bounds
            _pac_sc_s1855 = p_history__ANONYMOUS_s842_3fa[(4 * l1_3f7) + ts_3fc];
          }
        }
        __sa1_3fd = _pac_sc_s1855;
      }
      bit _out_s186_400;
      sllseg(l1_3f7, ts_3fc, _out_s186_400);
      _out_3f9 = _out_s186_400;
      return;
    }
  }
}
/*sll_len_rec.sk:33*/

void snapshot_list_comp_len_rec (int x_bb, ref int osll_bc, ref int olen_bd, ref global bit[4] active__ANONYMOUS_s1400_be, ref global bit[4 * 4] history__ANONYMOUS_s1355_bf, ref global int[3] locvars__ANONYMOUS_s809_c0, ref global int[4] next__ANONYMOUS_s1401_c1, ref global bit[4 * 4] p_history__ANONYMOUS_s1402_c2, ref global int[4] supernext__ANONYMOUS_s1403_c3, ref global bit[4] symbolic__ANONYMOUS_s1404_c4, ref global int ts__ANONYMOUS_s1356_c5)/*sll_len_rec.sk:33*/
{
  {
    {
      int olen_s214_c6;
      int l_1fd_s1656;
      assert ((x_bb >= 0) && (x_bb < 3)); //sll_len_rec.sk:34: Array out of bounds
      l_1fd_s1656 = locvars__ANONYMOUS_s809_c0[x_bb];
      len_comp@ANONYMOUS(l_1fd_s1656, olen_s214_c6, active__ANONYMOUS_s1400_be, history__ANONYMOUS_s1355_bf, next__ANONYMOUS_s1401_c1, p_history__ANONYMOUS_s1402_c2, supernext__ANONYMOUS_s1403_c3, symbolic__ANONYMOUS_s1404_c4, ts__ANONYMOUS_s1356_c5);
      olen_bd = olen_s214_c6;
    }
  }
}
/*sll_len_rec.sk:78*/

void statement0 (int locrange_107, int intrange_108, int locrange2_109, int intrange2_10a, ref global bit[4] active__ANONYMOUS_s959_10b, ref global bit error_flag__ANONYMOUS_s1480_10c, ref global int fake_unfold__ANONYMOUS_s1481_10d, ref global bit[4 * 4] history__ANONYMOUS_s971_10e, ref global int[2] intvars__ANONYMOUS_s1505_10f, ref global int[4] key__ANONYMOUS_s1200_110, ref global int[4] left__ANONYMOUS_s1482_111, ref global int[3] locvars__ANONYMOUS_s1244_112, ref global int malloc_budget__ANONYMOUS_s1245_113, ref global int[4] next__ANONYMOUS_s960_114, ref global bit[4 * 4] p_history__ANONYMOUS_s961_115, ref global int[4] right__ANONYMOUS_s1483_116, ref global int[4] supernext__ANONYMOUS_s962_117, ref global bit[4] symbolic__ANONYMOUS_s963_118, ref global int ts__ANONYMOUS_s964_119)/*sll_len_rec.sk:78*/
{
  {
    {
      int locrange_11a;
      locrange_11a = locrange_107;
      int intrange_11b;
      intrange_11b = intrange_108;
      int locrange2_11c;
      locrange2_11c = locrange2_109;
      int intrange2_11d;
      intrange2_11d = intrange2_10a;
      bit _has_out__11e;
      _has_out__11e = 0;
      int _whichexpr_s42_11f;
      _whichexpr_s42_11f = ??/* H__18_390int:3 */;
      assert ((0 <= _whichexpr_s42_11f) && (_whichexpr_s42_11f < 8)); //regen H__18
      int st_choice_120;
      st_choice_120 = (_whichexpr_s42_11f == 0 ? 1 : (_whichexpr_s42_11f == 1 ? 5 : (_whichexpr_s42_11f == 2 ? 2 : (_whichexpr_s42_11f == 3 ? 6 : (_whichexpr_s42_11f == 4 ? 0 : (_whichexpr_s42_11f == 5 ? 7 : (_whichexpr_s42_11f == 6 ? 3 : 4)))))));
      int v_121;
      int v_s83_122;
      int r_123;
      r_123 = locrange_11a;
      bit _has_out__124;
      _has_out__124 = 0;
      v_s83_122 = 0;
      int n_125;
      n_125 = ??/* H__0_390_179int:2 */;
      assert ((n_125 >= 0) && (n_125 < r_123)); //Assert at aux.skh:57 (4802876604280322908)
      v_s83_122 = n_125 + 1;
      _has_out__124 = 1;
      v_121 = v_s83_122;
      int anyv_126;
      int anyv_s85_127;
      int r_128;
      r_128 = locrange_11a + locrange2_11c;
      bit _has_out__129;
      _has_out__129 = 0;
      anyv_s85_127 = 0;
      int n_12a;
      n_12a = ??/* H__0_390_180int:2 */;
      assert ((n_12a >= 0) && (n_12a < r_128)); //Assert at aux.skh:57 (2566713670548246667)
      anyv_s85_127 = n_12a + 1;
      _has_out__129 = 1;
      anyv_126 = anyv_s85_127;
      if(st_choice_120 == 1)/*lseg_header.skh:803*/
      {
        assert (locrange_11a > 0); //Assert at lseg_header.skh:804 (-2792941638347748768)
        locderef2var@ANONYMOUS(anyv_126, v_121, active__ANONYMOUS_s959_10b, error_flag__ANONYMOUS_s1480_10c, history__ANONYMOUS_s971_10e, key__ANONYMOUS_s1200_110, locvars__ANONYMOUS_s1244_112, malloc_budget__ANONYMOUS_s1245_113, next__ANONYMOUS_s960_114, p_history__ANONYMOUS_s961_115, supernext__ANONYMOUS_s962_117, symbolic__ANONYMOUS_s963_118, ts__ANONYMOUS_s964_119);
      }
      else
      {
        if(st_choice_120 == 5)/*lseg_header.skh:807*/
        {
          assert (locrange_11a > 0); //Assert at lseg_header.skh:808 (-2008416004571881760)
          int _out_s87_12b;
          int r_12c;
          r_12c = (locrange_11a + locrange2_11c) + 1;
          bit _has_out__12d;
          _has_out__12d = 0;
          _out_s87_12b = 0;
          _out_s87_12b = ??/* H__1_390_182int:3 */;
          assert ((_out_s87_12b >= 0) && (_out_s87_12b < r_12c)); //Assert at aux.skh:63 (1955052870986062035)
          _has_out__12d = 1;
          locVarAssign@ANONYMOUS(v_121, _out_s87_12b, locvars__ANONYMOUS_s1244_112);
        }
        else
        {
          if(st_choice_120 == 2)/*lseg_header.skh:811*/
          {
            assert ((locrange_11a + locrange2_11c) > 0); //Assert at lseg_header.skh:812 (-2310300437042240355)
            assert (intrange_11b > 0); //Assert at lseg_header.skh:813 (3004789109731018110)
            int _out_s89_12e;
            int r_12f;
            r_12f = intrange_11b;
            bit _has_out__130;
            _has_out__130 = 0;
            _out_s89_12e = 0;
            _out_s89_12e = ??/* H__1_390_184int:3 */;
            assert ((_out_s89_12e >= 0) && (_out_s89_12e < r_12f)); //Assert at aux.skh:63 (1955052870986062035)
            _has_out__130 = 1;
            intderef2var@ANONYMOUS(anyv_126, _out_s89_12e, active__ANONYMOUS_s959_10b, error_flag__ANONYMOUS_s1480_10c, history__ANONYMOUS_s971_10e, intvars__ANONYMOUS_s1505_10f, key__ANONYMOUS_s1200_110, locvars__ANONYMOUS_s1244_112, next__ANONYMOUS_s960_114, p_history__ANONYMOUS_s961_115, supernext__ANONYMOUS_s962_117, symbolic__ANONYMOUS_s963_118, ts__ANONYMOUS_s964_119);
          }
          else
          {
            if(st_choice_120 == 6)/*lseg_header.skh:816*/
            {
              assert (intrange_11b > 0); //Assert at lseg_header.skh:817 (2362173374202530978)
              int _out_s91_131;
              int r_132;
              r_132 = intrange_11b;
              bit _has_out__133;
              _has_out__133 = 0;
              _out_s91_131 = 0;
              _out_s91_131 = ??/* H__1_390_186int:3 */;
              assert ((_out_s91_131 >= 0) && (_out_s91_131 < r_132)); //Assert at aux.skh:63 (1955052870986062035)
              _has_out__133 = 1;
              int _out_s93_134;
              int r_135;
              r_135 = intrange_11b + intrange2_11d;
              bit _has_out__136;
              _has_out__136 = 0;
              _out_s93_134 = 0;
              _out_s93_134 = ??/* H__1_390_187int:3 */;
              assert ((_out_s93_134 >= 0) && (_out_s93_134 < r_135)); //Assert at aux.skh:63 (1955052870986062035)
              _has_out__136 = 1;
              int c3_2bc_s1669;
              c3_2bc_s1669 = ??/* H__8_390int:3 */;
              intVarAssign@ANONYMOUS(_out_s91_131, _out_s93_134, c3_2bc_s1669, intvars__ANONYMOUS_s1505_10f);
            }
            else
            {
              if(st_choice_120 == 0)/*lseg_header.skh:820*/
              {
                assert (locrange_11a > 0); //Assert at lseg_header.skh:821 (683367849163778499)
                malloc@ANONYMOUS(v_121, active__ANONYMOUS_s959_10b, error_flag__ANONYMOUS_s1480_10c, key__ANONYMOUS_s1200_110, locvars__ANONYMOUS_s1244_112, malloc_budget__ANONYMOUS_s1245_113, next__ANONYMOUS_s960_114, symbolic__ANONYMOUS_s963_118);
              }
              else
              {
                if(st_choice_120 == 7)/*lseg_header.skh:824*/
                {
                  assert ((locrange_11a + locrange2_11c) > 0); //Assert at lseg_header.skh:825 (9044677493976616536)
                  free@ANONYMOUS(anyv_126, active__ANONYMOUS_s959_10b, error_flag__ANONYMOUS_s1480_10c, history__ANONYMOUS_s971_10e, locvars__ANONYMOUS_s1244_112, malloc_budget__ANONYMOUS_s1245_113, next__ANONYMOUS_s960_114, p_history__ANONYMOUS_s961_115, symbolic__ANONYMOUS_s963_118, ts__ANONYMOUS_s964_119);
                }
                else
                {
                  if(st_choice_120 == 3)/*lseg_header.skh:828*/
                  {
                    assert ((locrange_11a + locrange2_11c) > 0); //Assert at lseg_header.skh:829 (-8748994740097171140)
                    int _out_s95_137;
                    int r_138;
                    r_138 = (locrange_11a + locrange2_11c) + 1;
                    bit _has_out__139;
                    _has_out__139 = 0;
                    _out_s95_137 = 0;
                    _out_s95_137 = ??/* H__1_390_191int:3 */;
                    assert ((_out_s95_137 >= 0) && (_out_s95_137 < r_138)); //Assert at aux.skh:63 (1955052870986062035)
                    _has_out__139 = 1;
                    locMutate@ANONYMOUS(anyv_126, _out_s95_137, 0, active__ANONYMOUS_s959_10b, error_flag__ANONYMOUS_s1480_10c, fake_unfold__ANONYMOUS_s1481_10d, history__ANONYMOUS_s971_10e, left__ANONYMOUS_s1482_111, locvars__ANONYMOUS_s1244_112, next__ANONYMOUS_s960_114, p_history__ANONYMOUS_s961_115, right__ANONYMOUS_s1483_116, symbolic__ANONYMOUS_s963_118, ts__ANONYMOUS_s964_119);
                  }
                  else
                  {
                    if(st_choice_120 == 4)/*lseg_header.skh:832*/
                    {
                      assert ((locrange_11a + locrange2_11c) > 0); //Assert at lseg_header.skh:833 (2339611481557920207)
                      assert ((intrange_11b + intrange2_11d) > 0); //Assert at lseg_header.skh:834 (1969111369591760787)
                      int _out_s97_13a;
                      int r_13b;
                      r_13b = intrange_11b + intrange2_11d;
                      bit _has_out__13c;
                      _has_out__13c = 0;
                      _out_s97_13a = 0;
                      _out_s97_13a = ??/* H__1_390_193int:3 */;
                      assert ((_out_s97_13a >= 0) && (_out_s97_13a < r_13b)); //Assert at aux.skh:63 (1955052870986062035)
                      _has_out__13c = 1;
                      intMutate@ANONYMOUS(anyv_126, _out_s97_13a, active__ANONYMOUS_s959_10b, error_flag__ANONYMOUS_s1480_10c, fake_unfold__ANONYMOUS_s1481_10d, history__ANONYMOUS_s971_10e, intvars__ANONYMOUS_s1505_10f, key__ANONYMOUS_s1200_110, locvars__ANONYMOUS_s1244_112, next__ANONYMOUS_s960_114, p_history__ANONYMOUS_s961_115, symbolic__ANONYMOUS_s963_118, ts__ANONYMOUS_s964_119);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
/*sll_len_rec.sk:81*/

void statement1 (int locrange_13d, int intrange_13e, int locrange2_13f, int intrange2_140, ref global bit[4] active__ANONYMOUS_s978_141, ref global bit error_flag__ANONYMOUS_s1211_142, ref global int fake_unfold__ANONYMOUS_s1335_143, ref global bit[4 * 4] history__ANONYMOUS_s979_144, ref global int[2] intvars__ANONYMOUS_s1139_145, ref global int[4] key__ANONYMOUS_s1135_146, ref global int[4] left__ANONYMOUS_s1433_147, ref global int[3] locvars__ANONYMOUS_s1136_148, ref global int malloc_budget__ANONYMOUS_s1137_149, ref global int[4] next__ANONYMOUS_s980_14a, ref global bit[4 * 4] p_history__ANONYMOUS_s981_14b, ref global int[4] right__ANONYMOUS_s1434_14c, ref global int[4] supernext__ANONYMOUS_s1140_14d, ref global bit[4] symbolic__ANONYMOUS_s982_14e, ref global int ts__ANONYMOUS_s983_14f)/*sll_len_rec.sk:81*/
{
  {
    {
      int locrange_150;
      locrange_150 = locrange_13d;
      int intrange_151;
      intrange_151 = intrange_13e;
      int locrange2_152;
      locrange2_152 = locrange2_13f;
      int intrange2_153;
      intrange2_153 = intrange2_140;
      bit _has_out__154;
      _has_out__154 = 0;
      int _whichexpr_s42_155;
      _whichexpr_s42_155 = ??/* H__18_391int:3 */;
      assert ((0 <= _whichexpr_s42_155) && (_whichexpr_s42_155 < 8)); //regen H__18
      int st_choice_156;
      st_choice_156 = (_whichexpr_s42_155 == 0 ? 1 : (_whichexpr_s42_155 == 1 ? 5 : (_whichexpr_s42_155 == 2 ? 2 : (_whichexpr_s42_155 == 3 ? 6 : (_whichexpr_s42_155 == 4 ? 0 : (_whichexpr_s42_155 == 5 ? 7 : (_whichexpr_s42_155 == 6 ? 3 : 4)))))));
      int v_157;
      int v_s83_158;
      int r_159;
      r_159 = locrange_150;
      bit _has_out__15a;
      _has_out__15a = 0;
      v_s83_158 = 0;
      int n_15b;
      n_15b = ??/* H__0_391_179int:2 */;
      assert ((n_15b >= 0) && (n_15b < r_159)); //Assert at aux.skh:57 (4072264460798006241)
      v_s83_158 = n_15b + 1;
      _has_out__15a = 1;
      v_157 = v_s83_158;
      int anyv_15c;
      int anyv_s85_15d;
      int r_15e;
      r_15e = locrange_150 + locrange2_152;
      bit _has_out__15f;
      _has_out__15f = 0;
      anyv_s85_15d = 0;
      int n_160;
      n_160 = ??/* H__0_391_180int:2 */;
      assert ((n_160 >= 0) && (n_160 < r_15e)); //Assert at aux.skh:57 (780166647146053359)
      anyv_s85_15d = n_160 + 1;
      _has_out__15f = 1;
      anyv_15c = anyv_s85_15d;
      if(st_choice_156 == 1)/*lseg_header.skh:803*/
      {
        assert (locrange_150 > 0); //Assert at lseg_header.skh:804 (-7173558443898227165)
        locderef2var@ANONYMOUS(anyv_15c, v_157, active__ANONYMOUS_s978_141, error_flag__ANONYMOUS_s1211_142, history__ANONYMOUS_s979_144, key__ANONYMOUS_s1135_146, locvars__ANONYMOUS_s1136_148, malloc_budget__ANONYMOUS_s1137_149, next__ANONYMOUS_s980_14a, p_history__ANONYMOUS_s981_14b, supernext__ANONYMOUS_s1140_14d, symbolic__ANONYMOUS_s982_14e, ts__ANONYMOUS_s983_14f);
      }
      else
      {
        if(st_choice_156 == 5)/*lseg_header.skh:807*/
        {
          assert (locrange_150 > 0); //Assert at lseg_header.skh:808 (6704669542428902299)
          int _out_s87_161;
          int r_162;
          r_162 = (locrange_150 + locrange2_152) + 1;
          bit _has_out__163;
          _has_out__163 = 0;
          _out_s87_161 = 0;
          _out_s87_161 = ??/* H__1_391_182int:3 */;
          assert ((_out_s87_161 >= 0) && (_out_s87_161 < r_162)); //Assert at aux.skh:63 (1955052870986062035)
          _has_out__163 = 1;
          locVarAssign@ANONYMOUS(v_157, _out_s87_161, locvars__ANONYMOUS_s1136_148);
        }
        else
        {
          if(st_choice_156 == 2)/*lseg_header.skh:811*/
          {
            assert ((locrange_150 + locrange2_152) > 0); //Assert at lseg_header.skh:812 (-6283978424086651176)
            assert (intrange_151 > 0); //Assert at lseg_header.skh:813 (-7336430976188344654)
            int _out_s89_164;
            int r_165;
            r_165 = intrange_151;
            bit _has_out__166;
            _has_out__166 = 0;
            _out_s89_164 = 0;
            _out_s89_164 = ??/* H__1_391_184int:3 */;
            assert ((_out_s89_164 >= 0) && (_out_s89_164 < r_165)); //Assert at aux.skh:63 (1955052870986062035)
            _has_out__166 = 1;
            intderef2var@ANONYMOUS(anyv_15c, _out_s89_164, active__ANONYMOUS_s978_141, error_flag__ANONYMOUS_s1211_142, history__ANONYMOUS_s979_144, intvars__ANONYMOUS_s1139_145, key__ANONYMOUS_s1135_146, locvars__ANONYMOUS_s1136_148, next__ANONYMOUS_s980_14a, p_history__ANONYMOUS_s981_14b, supernext__ANONYMOUS_s1140_14d, symbolic__ANONYMOUS_s982_14e, ts__ANONYMOUS_s983_14f);
          }
          else
          {
            if(st_choice_156 == 6)/*lseg_header.skh:816*/
            {
              assert (intrange_151 > 0); //Assert at lseg_header.skh:817 (282725291816456003)
              int _out_s91_167;
              int r_168;
              r_168 = intrange_151;
              bit _has_out__169;
              _has_out__169 = 0;
              _out_s91_167 = 0;
              _out_s91_167 = ??/* H__1_391_186int:3 */;
              assert ((_out_s91_167 >= 0) && (_out_s91_167 < r_168)); //Assert at aux.skh:63 (1955052870986062035)
              _has_out__169 = 1;
              int _out_s93_16a;
              int r_16b;
              r_16b = intrange_151 + intrange2_153;
              bit _has_out__16c;
              _has_out__16c = 0;
              _out_s93_16a = 0;
              _out_s93_16a = ??/* H__1_391_187int:3 */;
              assert ((_out_s93_16a >= 0) && (_out_s93_16a < r_16b)); //Assert at aux.skh:63 (1955052870986062035)
              _has_out__16c = 1;
              int c3_2bc_s1670;
              c3_2bc_s1670 = ??/* H__8_391int:3 */;
              intVarAssign@ANONYMOUS(_out_s91_167, _out_s93_16a, c3_2bc_s1670, intvars__ANONYMOUS_s1139_145);
            }
            else
            {
              if(st_choice_156 == 0)/*lseg_header.skh:820*/
              {
                assert (locrange_150 > 0); //Assert at lseg_header.skh:821 (-3770771388840893844)
                malloc@ANONYMOUS(v_157, active__ANONYMOUS_s978_141, error_flag__ANONYMOUS_s1211_142, key__ANONYMOUS_s1135_146, locvars__ANONYMOUS_s1136_148, malloc_budget__ANONYMOUS_s1137_149, next__ANONYMOUS_s980_14a, symbolic__ANONYMOUS_s982_14e);
              }
              else
              {
                if(st_choice_156 == 7)/*lseg_header.skh:824*/
                {
                  assert ((locrange_150 + locrange2_152) > 0); //Assert at lseg_header.skh:825 (6012911450557417106)
                  free@ANONYMOUS(anyv_15c, active__ANONYMOUS_s978_141, error_flag__ANONYMOUS_s1211_142, history__ANONYMOUS_s979_144, locvars__ANONYMOUS_s1136_148, malloc_budget__ANONYMOUS_s1137_149, next__ANONYMOUS_s980_14a, p_history__ANONYMOUS_s981_14b, symbolic__ANONYMOUS_s982_14e, ts__ANONYMOUS_s983_14f);
                }
                else
                {
                  if(st_choice_156 == 3)/*lseg_header.skh:828*/
                  {
                    assert ((locrange_150 + locrange2_152) > 0); //Assert at lseg_header.skh:829 (8720602257715468372)
                    int _out_s95_16d;
                    int r_16e;
                    r_16e = (locrange_150 + locrange2_152) + 1;
                    bit _has_out__16f;
                    _has_out__16f = 0;
                    _out_s95_16d = 0;
                    _out_s95_16d = ??/* H__1_391_191int:3 */;
                    assert ((_out_s95_16d >= 0) && (_out_s95_16d < r_16e)); //Assert at aux.skh:63 (1955052870986062035)
                    _has_out__16f = 1;
                    locMutate@ANONYMOUS(anyv_15c, _out_s95_16d, 0, active__ANONYMOUS_s978_141, error_flag__ANONYMOUS_s1211_142, fake_unfold__ANONYMOUS_s1335_143, history__ANONYMOUS_s979_144, left__ANONYMOUS_s1433_147, locvars__ANONYMOUS_s1136_148, next__ANONYMOUS_s980_14a, p_history__ANONYMOUS_s981_14b, right__ANONYMOUS_s1434_14c, symbolic__ANONYMOUS_s982_14e, ts__ANONYMOUS_s983_14f);
                  }
                  else
                  {
                    if(st_choice_156 == 4)/*lseg_header.skh:832*/
                    {
                      assert ((locrange_150 + locrange2_152) > 0); //Assert at lseg_header.skh:833 (-1943546974763835196)
                      assert ((intrange_151 + intrange2_153) > 0); //Assert at lseg_header.skh:834 (-8103572759352365735)
                      int _out_s97_170;
                      int r_171;
                      r_171 = intrange_151 + intrange2_153;
                      bit _has_out__172;
                      _has_out__172 = 0;
                      _out_s97_170 = 0;
                      _out_s97_170 = ??/* H__1_391_193int:3 */;
                      assert ((_out_s97_170 >= 0) && (_out_s97_170 < r_171)); //Assert at aux.skh:63 (1955052870986062035)
                      _has_out__172 = 1;
                      intMutate@ANONYMOUS(anyv_15c, _out_s97_170, active__ANONYMOUS_s978_141, error_flag__ANONYMOUS_s1211_142, fake_unfold__ANONYMOUS_s1335_143, history__ANONYMOUS_s979_144, intvars__ANONYMOUS_s1139_145, key__ANONYMOUS_s1135_146, locvars__ANONYMOUS_s1136_148, next__ANONYMOUS_s980_14a, p_history__ANONYMOUS_s981_14b, symbolic__ANONYMOUS_s982_14e, ts__ANONYMOUS_s983_14f);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
/*sll_len_rec.sk:84*/

void statement2 (int locrange_1ac, int intrange_1ad, int locrange2_1ae, int intrange2_1af, ref global bit[4] active__ANONYMOUS_s1059_1b0, ref global bit error_flag__ANONYMOUS_s1426_1b1, ref global int fake_unfold__ANONYMOUS_s1073_1b2, ref global bit[4 * 4] history__ANONYMOUS_s1074_1b3, ref global int[2] intvars__ANONYMOUS_s1075_1b4, ref global int[4] key__ANONYMOUS_s1060_1b5, ref global int[4] left__ANONYMOUS_s1598_1b6, ref global int[3] locvars__ANONYMOUS_s1076_1b7, ref global int malloc_budget__ANONYMOUS_s1215_1b8, ref global int[4] next__ANONYMOUS_s1061_1b9, ref global bit[4 * 4] p_history__ANONYMOUS_s1009_1ba, ref global int[4] right__ANONYMOUS_s1599_1bb, ref global int[4] supernext__ANONYMOUS_s1062_1bc, ref global bit[4] symbolic__ANONYMOUS_s1063_1bd, ref global int ts__ANONYMOUS_s1010_1be)/*sll_len_rec.sk:84*/
{
  {
    {
      int locrange_1bf;
      locrange_1bf = locrange_1ac;
      int intrange_1c0;
      intrange_1c0 = intrange_1ad;
      int locrange2_1c1;
      locrange2_1c1 = locrange2_1ae;
      int intrange2_1c2;
      intrange2_1c2 = intrange2_1af;
      bit _has_out__1c3;
      _has_out__1c3 = 0;
      int _whichexpr_s42_1c4;
      _whichexpr_s42_1c4 = ??/* H__18_392int:3 */;
      assert ((0 <= _whichexpr_s42_1c4) && (_whichexpr_s42_1c4 < 8)); //regen H__18
      int st_choice_1c5;
      st_choice_1c5 = (_whichexpr_s42_1c4 == 0 ? 1 : (_whichexpr_s42_1c4 == 1 ? 5 : (_whichexpr_s42_1c4 == 2 ? 2 : (_whichexpr_s42_1c4 == 3 ? 6 : (_whichexpr_s42_1c4 == 4 ? 0 : (_whichexpr_s42_1c4 == 5 ? 7 : (_whichexpr_s42_1c4 == 6 ? 3 : 4)))))));
      int v_1c6;
      int v_s83_1c7;
      int r_1c8;
      r_1c8 = locrange_1bf;
      bit _has_out__1c9;
      _has_out__1c9 = 0;
      v_s83_1c7 = 0;
      int n_1ca;
      n_1ca = ??/* H__0_392_179int:2 */;
      assert ((n_1ca >= 0) && (n_1ca < r_1c8)); //Assert at aux.skh:57 (5060484334617301109)
      v_s83_1c7 = n_1ca + 1;
      _has_out__1c9 = 1;
      v_1c6 = v_s83_1c7;
      int anyv_1cb;
      int anyv_s85_1cc;
      int r_1cd;
      r_1cd = locrange_1bf + locrange2_1c1;
      bit _has_out__1ce;
      _has_out__1ce = 0;
      anyv_s85_1cc = 0;
      int n_1cf;
      n_1cf = ??/* H__0_392_180int:2 */;
      assert ((n_1cf >= 0) && (n_1cf < r_1cd)); //Assert at aux.skh:57 (-3764908846831701461)
      anyv_s85_1cc = n_1cf + 1;
      _has_out__1ce = 1;
      anyv_1cb = anyv_s85_1cc;
      if(st_choice_1c5 == 1)/*lseg_header.skh:803*/
      {
        assert (locrange_1bf > 0); //Assert at lseg_header.skh:804 (1720715446037570407)
        locderef2var@ANONYMOUS(anyv_1cb, v_1c6, active__ANONYMOUS_s1059_1b0, error_flag__ANONYMOUS_s1426_1b1, history__ANONYMOUS_s1074_1b3, key__ANONYMOUS_s1060_1b5, locvars__ANONYMOUS_s1076_1b7, malloc_budget__ANONYMOUS_s1215_1b8, next__ANONYMOUS_s1061_1b9, p_history__ANONYMOUS_s1009_1ba, supernext__ANONYMOUS_s1062_1bc, symbolic__ANONYMOUS_s1063_1bd, ts__ANONYMOUS_s1010_1be);
      }
      else
      {
        if(st_choice_1c5 == 5)/*lseg_header.skh:807*/
        {
          assert (locrange_1bf > 0); //Assert at lseg_header.skh:808 (6892555291825352119)
          int _out_s87_1d0;
          int r_1d1;
          r_1d1 = (locrange_1bf + locrange2_1c1) + 1;
          bit _has_out__1d2;
          _has_out__1d2 = 0;
          _out_s87_1d0 = 0;
          _out_s87_1d0 = ??/* H__1_392_182int:3 */;
          assert ((_out_s87_1d0 >= 0) && (_out_s87_1d0 < r_1d1)); //Assert at aux.skh:63 (1955052870986062035)
          _has_out__1d2 = 1;
          locVarAssign@ANONYMOUS(v_1c6, _out_s87_1d0, locvars__ANONYMOUS_s1076_1b7);
        }
        else
        {
          if(st_choice_1c5 == 2)/*lseg_header.skh:811*/
          {
            assert ((locrange_1bf + locrange2_1c1) > 0); //Assert at lseg_header.skh:812 (-5708552028073510018)
            assert (intrange_1c0 > 0); //Assert at lseg_header.skh:813 (4687929838101121082)
            int _out_s89_1d3;
            int r_1d4;
            r_1d4 = intrange_1c0;
            bit _has_out__1d5;
            _has_out__1d5 = 0;
            _out_s89_1d3 = 0;
            _out_s89_1d3 = ??/* H__1_392_184int:3 */;
            assert ((_out_s89_1d3 >= 0) && (_out_s89_1d3 < r_1d4)); //Assert at aux.skh:63 (1955052870986062035)
            _has_out__1d5 = 1;
            intderef2var@ANONYMOUS(anyv_1cb, _out_s89_1d3, active__ANONYMOUS_s1059_1b0, error_flag__ANONYMOUS_s1426_1b1, history__ANONYMOUS_s1074_1b3, intvars__ANONYMOUS_s1075_1b4, key__ANONYMOUS_s1060_1b5, locvars__ANONYMOUS_s1076_1b7, next__ANONYMOUS_s1061_1b9, p_history__ANONYMOUS_s1009_1ba, supernext__ANONYMOUS_s1062_1bc, symbolic__ANONYMOUS_s1063_1bd, ts__ANONYMOUS_s1010_1be);
          }
          else
          {
            if(st_choice_1c5 == 6)/*lseg_header.skh:816*/
            {
              assert (intrange_1c0 > 0); //Assert at lseg_header.skh:817 (7038577027886491860)
              int _out_s91_1d6;
              int r_1d7;
              r_1d7 = intrange_1c0;
              bit _has_out__1d8;
              _has_out__1d8 = 0;
              _out_s91_1d6 = 0;
              _out_s91_1d6 = ??/* H__1_392_186int:3 */;
              assert ((_out_s91_1d6 >= 0) && (_out_s91_1d6 < r_1d7)); //Assert at aux.skh:63 (1955052870986062035)
              _has_out__1d8 = 1;
              int _out_s93_1d9;
              int r_1da;
              r_1da = intrange_1c0 + intrange2_1c2;
              bit _has_out__1db;
              _has_out__1db = 0;
              _out_s93_1d9 = 0;
              _out_s93_1d9 = ??/* H__1_392_187int:3 */;
              assert ((_out_s93_1d9 >= 0) && (_out_s93_1d9 < r_1da)); //Assert at aux.skh:63 (1955052870986062035)
              _has_out__1db = 1;
              int c3_2bc_s1681;
              c3_2bc_s1681 = ??/* H__8_392int:3 */;
              intVarAssign@ANONYMOUS(_out_s91_1d6, _out_s93_1d9, c3_2bc_s1681, intvars__ANONYMOUS_s1075_1b4);
            }
            else
            {
              if(st_choice_1c5 == 0)/*lseg_header.skh:820*/
              {
                assert (locrange_1bf > 0); //Assert at lseg_header.skh:821 (6520608383414275267)
                malloc@ANONYMOUS(v_1c6, active__ANONYMOUS_s1059_1b0, error_flag__ANONYMOUS_s1426_1b1, key__ANONYMOUS_s1060_1b5, locvars__ANONYMOUS_s1076_1b7, malloc_budget__ANONYMOUS_s1215_1b8, next__ANONYMOUS_s1061_1b9, symbolic__ANONYMOUS_s1063_1bd);
              }
              else
              {
                if(st_choice_1c5 == 7)/*lseg_header.skh:824*/
                {
                  assert ((locrange_1bf + locrange2_1c1) > 0); //Assert at lseg_header.skh:825 (-4528433246702175327)
                  free@ANONYMOUS(anyv_1cb, active__ANONYMOUS_s1059_1b0, error_flag__ANONYMOUS_s1426_1b1, history__ANONYMOUS_s1074_1b3, locvars__ANONYMOUS_s1076_1b7, malloc_budget__ANONYMOUS_s1215_1b8, next__ANONYMOUS_s1061_1b9, p_history__ANONYMOUS_s1009_1ba, symbolic__ANONYMOUS_s1063_1bd, ts__ANONYMOUS_s1010_1be);
                }
                else
                {
                  if(st_choice_1c5 == 3)/*lseg_header.skh:828*/
                  {
                    assert ((locrange_1bf + locrange2_1c1) > 0); //Assert at lseg_header.skh:829 (6167549618492818796)
                    int _out_s95_1dc;
                    int r_1dd;
                    r_1dd = (locrange_1bf + locrange2_1c1) + 1;
                    bit _has_out__1de;
                    _has_out__1de = 0;
                    _out_s95_1dc = 0;
                    _out_s95_1dc = ??/* H__1_392_191int:3 */;
                    assert ((_out_s95_1dc >= 0) && (_out_s95_1dc < r_1dd)); //Assert at aux.skh:63 (1955052870986062035)
                    _has_out__1de = 1;
                    locMutate@ANONYMOUS(anyv_1cb, _out_s95_1dc, 0, active__ANONYMOUS_s1059_1b0, error_flag__ANONYMOUS_s1426_1b1, fake_unfold__ANONYMOUS_s1073_1b2, history__ANONYMOUS_s1074_1b3, left__ANONYMOUS_s1598_1b6, locvars__ANONYMOUS_s1076_1b7, next__ANONYMOUS_s1061_1b9, p_history__ANONYMOUS_s1009_1ba, right__ANONYMOUS_s1599_1bb, symbolic__ANONYMOUS_s1063_1bd, ts__ANONYMOUS_s1010_1be);
                  }
                  else
                  {
                    if(st_choice_1c5 == 4)/*lseg_header.skh:832*/
                    {
                      assert ((locrange_1bf + locrange2_1c1) > 0); //Assert at lseg_header.skh:833 (-975037996081841745)
                      assert ((intrange_1c0 + intrange2_1c2) > 0); //Assert at lseg_header.skh:834 (-8457962604856845930)
                      int _out_s97_1df;
                      int r_1e0;
                      r_1e0 = intrange_1c0 + intrange2_1c2;
                      bit _has_out__1e1;
                      _has_out__1e1 = 0;
                      _out_s97_1df = 0;
                      _out_s97_1df = ??/* H__1_392_193int:3 */;
                      assert ((_out_s97_1df >= 0) && (_out_s97_1df < r_1e0)); //Assert at aux.skh:63 (1955052870986062035)
                      _has_out__1e1 = 1;
                      intMutate@ANONYMOUS(anyv_1cb, _out_s97_1df, active__ANONYMOUS_s1059_1b0, error_flag__ANONYMOUS_s1426_1b1, fake_unfold__ANONYMOUS_s1073_1b2, history__ANONYMOUS_s1074_1b3, intvars__ANONYMOUS_s1075_1b4, key__ANONYMOUS_s1060_1b5, locvars__ANONYMOUS_s1076_1b7, next__ANONYMOUS_s1061_1b9, p_history__ANONYMOUS_s1009_1ba, symbolic__ANONYMOUS_s1063_1bd, ts__ANONYMOUS_s1010_1be);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
/*lseg_header.skh:1049*/

void tree_inv (int v_1f5, ref bit _out_1f6, ref global bit[4] active__ANONYMOUS_s1446_1f7, ref global int[3] locvars__ANONYMOUS_s907_1f8, ref global int[4] next__ANONYMOUS_s1447_1f9, ref global int[4] supernext__ANONYMOUS_s1448_1fa, ref global bit[4] symbolic__ANONYMOUS_s1449_1fb)/*lseg_header.skh:1049*/
{
  {
    {
      _out_1f6 = 0;
      assert ((v_1f5 > 0) && (v_1f5 < 3)); //Assert at lseg_header.skh:1050 (-4463606888024715167)
      bit _pac_sc_s1781;
      {
        assert ((v_1f5 >= 0) && (v_1f5 < 3)); //lseg_header.skh:1051: Array out of bounds
        _pac_sc_s1781 = (locvars__ANONYMOUS_s907_1f8[v_1f5]) >= 0;
        if(_pac_sc_s1781)/*lseg_header.skh:1051*/
        {
          assert ((v_1f5 >= 0) && (v_1f5 < 3)); //lseg_header.skh:1051: Array out of bounds
          _pac_sc_s1781 = (locvars__ANONYMOUS_s907_1f8[v_1f5]) < 4;
        }
      }
      if(!(_pac_sc_s1781))/*lseg_header.skh:1051*/
      {
        _out_1f6 = 0;
        return;
      }
      else
      {
        bit _out_s75_1fc;
        int t_207_s1682;
        assert ((v_1f5 >= 0) && (v_1f5 < 3)); //lseg_header.skh:1052: Array out of bounds
        t_207_s1682 = locvars__ANONYMOUS_s907_1f8[v_1f5];
        treeness@ANONYMOUS(t_207_s1682, _out_s75_1fc, active__ANONYMOUS_s1446_1f7, next__ANONYMOUS_s1447_1f9, supernext__ANONYMOUS_s1448_1fa, symbolic__ANONYMOUS_s1449_1fb);
        _out_1f6 = _out_s75_1fc;
        return;
      }
    }
  }
}
/*lseg_header.skh:306*/

void treeness (int t_207, ref bit _out_208, ref global bit[4] active__ANONYMOUS_s1428_209, ref global int[4] next__ANONYMOUS_s1429_20a, ref global int[4] supernext__ANONYMOUS_s1430_20b, ref global bit[4] symbolic__ANONYMOUS_s1431_20c)/*lseg_header.skh:306*/
{
  {
    {
      _out_208 = 0;
      bit[4] visited_20d;
      {
        for(int __sa1865 = 0; __sa1865 < 4; __sa1865 = __sa1865 + 1)/*Canonical*/
        {
          visited_20d[__sa1865] = 0;
        }
      }
      bit _out_s77_20e;
      check_p_treeness@ANONYMOUS(t_207, 0, visited_20d, 3, _out_s77_20e, active__ANONYMOUS_s1428_209, next__ANONYMOUS_s1429_20a, supernext__ANONYMOUS_s1430_20b, symbolic__ANONYMOUS_s1431_20c);
      _out_208 = _out_s77_20e;
      return;
    }
  }
}
/*lseg_header.skh:395*/

void update_reach (ref bit updated_3e2, ref bit[4] reach_3e3, int stop_3e4, ref global bit[4] active__ANONYMOUS_s760_3e5, ref global int[4] next__ANONYMOUS_s761_3e6, ref global int[4] supernext__ANONYMOUS_s762_3e7, ref global bit[4] symbolic__ANONYMOUS_s763_3e8)/*lseg_header.skh:395*/
{
  {
    {
      int i_3e9;
      if(1 < 4)/*lseg_header.skh:396*/
      {
      }
      for(i_3e9 = 1; i_3e9 < 4; i_3e9 = i_3e9 + 1)/*Canonical*/
      {
        bit _pac_sc_s1847;
        {
          bit _pac_sc_s1848;
          {
            bit _pac_sc_s1849;
            {
              _pac_sc_s1849 = reach_3e3[i_3e9];
              if(_pac_sc_s1849)/*lseg_header.skh:397*/
              {
                assert ((i_3e9 >= 0) && (i_3e9 < 4)); //lseg_header.skh:397: Array out of bounds
                _pac_sc_s1849 = active__ANONYMOUS_s760_3e5[i_3e9];
              }
            }
            _pac_sc_s1848 = _pac_sc_s1849;
            if(_pac_sc_s1848)/*lseg_header.skh:397*/
            {
              assert ((i_3e9 >= 0) && (i_3e9 < 4)); //lseg_header.skh:397: Array out of bounds
              _pac_sc_s1848 = !(symbolic__ANONYMOUS_s763_3e8[i_3e9]);
            }
          }
          _pac_sc_s1847 = _pac_sc_s1848;
          if(_pac_sc_s1847)/*lseg_header.skh:397*/
          {
            _pac_sc_s1847 = i_3e9 != stop_3e4;
          }
        }
        if(_pac_sc_s1847)/*lseg_header.skh:397*/
        {
          int n_3ec;
          assert ((i_3e9 >= 0) && (i_3e9 < 4)); //lseg_header.skh:398: Array out of bounds
          n_3ec = next__ANONYMOUS_s761_3e6[i_3e9];
          if(!((n_3ec >= 0) && (n_3ec < 4)))/*lseg_header.skh:399*/
          {
            assert ((i_3e9 >= 0) && (i_3e9 < 4)); //lseg_header.skh:399: Array out of bounds
            n_3ec = supernext__ANONYMOUS_s762_3e7[i_3e9];
          }
          if(!((n_3ec >= 0) && (n_3ec < 4)))/*lseg_header.skh:400*/
          {
            n_3ec = -1;
          }
          bit _pac_sc_s1850;
          {
            bit _pac_sc_s1851;
            {
              _pac_sc_s1851 = n_3ec > 0;
              if(_pac_sc_s1851)/*lseg_header.skh:401*/
              {
                assert ((n_3ec >= 0) && (n_3ec < 4)); //lseg_header.skh:401: Array out of bounds
                _pac_sc_s1851 = active__ANONYMOUS_s760_3e5[n_3ec];
              }
            }
            _pac_sc_s1850 = _pac_sc_s1851;
            if(_pac_sc_s1850)/*lseg_header.skh:401*/
            {
              assert ((n_3ec >= 0) && (n_3ec < 4)); //lseg_header.skh:401: Array out of bounds
              _pac_sc_s1850 = !(reach_3e3[n_3ec]);
            }
          }
          if(_pac_sc_s1850)/*lseg_header.skh:401*/
          {
            assert ((n_3ec >= 0) && (n_3ec < 4)); //lseg_header.skh:402: Either null pointer or Array out of bounds
            reach_3e3[n_3ec] = 1;
            updated_3e2 = 1;
          }
        }
      }
    }
  }
}
/* END PACKAGE ANONYMOUS*/
------------------------------

[SATBackend] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[SATBackend] MAX LOOP UNROLLING = 3
[SATBackend] MAX FUNC INLINING  = 7
estimated size of list_comp_len_rec__Wrapper
stmt cnt: 0
callee glblInit_ts__ANONYMOUS_s1654 : 1
callee glblInit_ret__ANONYMOUS_s1652 : 1
callee glblInit_ranking__ANONYMOUS_s1650 : 1
callee glblInit_malloc_budget__ANONYMOUS_s1648 : 1
callee glblInit_fake_unfold_to__ANONYMOUS_s1646 : 1
callee glblInit_fake_unfold__ANONYMOUS_s1644 : 1
callee glblInit_error_flag__ANONYMOUS_s1642 : 1
callee list_comp_len_rec0 : 73

[SATBackend] After prog.accept(partialEval)
[SATBackend] OFILE = null
    [0;32m[1484669093.7710 - DEBUG] executing ~/tools/sketch-1.7.2/sketch-backend/src/SketchSolver/cegis --bnd-inbits 3 --boundmode CALLNAME --verbosity 10 --print-version -simiters 4 --assumebcheck --bnd-inline-amnt 7 -angelictupledepth 1 -srctupledepth 2 -sprandbias 1 -o /home/waghon/.sketch/tmp/sll_len_rec.sk/solution0-0 /home/waghon/.sketch/tmp/sll_len_rec.sk/input0.tmp[0m
[SATBackend] Launching: ~/tools/sketch-1.7.2/sketch-backend/src/SketchSolver/cegis --bnd-inbits 3 --boundmode CALLNAME --verbosity 10 --print-version -simiters 4 --assumebcheck --bnd-inline-amnt 7 -angelictupledepth 1 -srctupledepth 2 -sprandbias 1 -o /home/waghon/.sketch/tmp/sll_len_rec.sk/solution0-0 /home/waghon/.sketch/tmp/sll_len_rec.sk/input0.tmp 
starting command line: [~/tools/sketch-1.7.2/sketch-backend/src/SketchSolver/cegis, --bnd-inbits, 3, --boundmode, CALLNAME, --verbosity, 10, --print-version, -simiters, 4, --assumebcheck, --bnd-inline-amnt, 7, -angelictupledepth, 1, -srctupledepth, 2, -sprandbias, 1, -o, /home/waghon/.sketch/tmp/sll_len_rec.sk/solution0-0, /home/waghon/.sketch/tmp/sll_len_rec.sk/input0.tmp]
    [0;31m[1484669093.8410 - ERROR] [SKETCH] Sketch Not Resolved Error: nullThe sketch could not be resolved.[0m
    [0;32m[1484669093.8420 - DEBUG] [SKETCH] stack trace written to file: /home/waghon/.sketch/tmp/stacktrace.txt[0m
    [0;32m[1484669093.8421 - DEBUG] Backend solver input file at /home/waghon/.sketch/tmp/sll_len_rec.sk/input0.tmp[0m
Total time = 1245
