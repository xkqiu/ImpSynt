pragma options "--slv-simiters 10 --bnd-inbits 3 --bnd-bound-mode CALLSITE --bnd-inline-amnt 3 --bnd-unroll-amnt 5 ";

int TIMESIZE = 4;
int BOUND = 2;
int INTMAX = 15;
int HEAPSIZE = 6;
int LOCVARSIZE = 5;
int INTVARSIZE = 2;
int MBUDGET = 4;

include "header/bst_header.skh";

int old_bst, old_k, old_len, old_min, old_max, old_size, old_height;

int newer_k, newer_bst, newer_min, newer_max, newer_size;

void rec_bst_remove_root_rec(int root, int k, int recret, ref bit[HEAPSIZE-1] new_symbolic, ref int[HEAPSIZE-1] new_next, ref int[HEAPSIZE-1] new_supernext, ref int[HEAPSIZE-1] new_key) {

	assertPost(pre_cond_bst_remove_root_rec(root, k));

	snapshot_bst_remove_root_rec(root, k, newer_k, newer_bst, newer_min, newer_max, newer_size);

	locvars[recret] = havoc(locvars[root], new_symbolic, new_next, new_supernext, new_key);

	assumePre(post_cond_bst_remove_root_rec(recret, root, k, newer_min, newer_max, newer_size, newer_k));
}

int rank_func_bst_remove_root_rec = SIZE; //len, min or max

void snapshot_bst_remove_root_rec(int root, int k, ref int ok, ref int obst, ref int omin, ref int omax, ref int osize) {
	obst = bst_comp(locvars[root]);
	omin = min_comp(locvars[root]);
	omax = max_comp(locvars[root]);
	osize = size_comp(locvars[root]);
	ok = intvars[k];
}

bit pre_cond_bst_remove_root_rec(int root, int k) {
	return (bst_inv(root) && (keyEqTo(root, k))) && (! (locvar_eq(root, 0)));
}

bit post_cond_bst_remove_root_rec(int r, int root, int k, ref int old_min_root, ref int old_max_root, ref int old_size_root, int old_k) {
	return ((bst_inv(r) && (size_equal_inv(r, (old_size_root - 1)))) && ((old_size_root == 1) || (((max_leq_inv(r, old_max_root)) && ((min_equal_inv(r, old_min_root)) || (! (min_leq_inv(r, old_min_root))))) && (((old_k == old_min_root) || (min_equal_inv(r, old_min_root))) && ((old_k == old_max_root) || (max_equal_inv(r, old_max_root)))))));
}

bit cond0() {
	return basic_branch_cond(4, 4, 2, 1);
}

harness void bst_remove_root_rec__0(int[LOCVARSIZE-1] llocvars, int[INTVARSIZE] lintvars, int[HEAPSIZE-1] lleft, int[HEAPSIZE-1] lright, int[HEAPSIZE-1] lkey, bit[HEAPSIZE-1] lsymbolic, bit[HEAPSIZE-1] lactive) {

	int[HEAPSIZE-1] lnext = {};
	int[HEAPSIZE-1] lsupernext = {};
	init(llocvars, lintvars, lnext, lsupernext, lleft, lright, lkey, lsymbolic, lactive);

	assume(basic_assumptions() && basic_axioms());

	assume pre_cond_bst_remove_root_rec(4, 1);

	snapshot_bst_remove_root_rec(4, 1, old_k, old_bst, old_min, old_max, old_size);

	ranking_snapshot(rank_func_bst_remove_root_rec, 4);

	assume cond0();

	ret_loc(gen_non_zero(4));

	assertPost(post_cond_bst_remove_root_rec(ret, 4, 1, old_min, old_max, old_size, old_k));

}
bit cond1() {
	return basic_branch_cond(4, 4, 2, 1);
}

harness void bst_remove_root_rec__1(int[LOCVARSIZE-1] llocvars, int[INTVARSIZE] lintvars, int[HEAPSIZE-1] lleft, int[HEAPSIZE-1] lright, int[HEAPSIZE-1] lkey, bit[HEAPSIZE-1] lsymbolic, bit[HEAPSIZE-1] lactive) {

	int[HEAPSIZE-1] lnext = {};
	int[HEAPSIZE-1] lsupernext = {};
	init(llocvars, lintvars, lnext, lsupernext, lleft, lright, lkey, lsymbolic, lactive);

	assume(basic_assumptions() && basic_axioms());

	assume pre_cond_bst_remove_root_rec(4, 1);

	snapshot_bst_remove_root_rec(4, 1, old_k, old_bst, old_min, old_max, old_size);

	ranking_snapshot(rank_func_bst_remove_root_rec, 4);

	assume !cond0();

	assume cond1();

	ret_loc(gen_non_zero(4));

	assertPost(post_cond_bst_remove_root_rec(ret, 4, 1, old_min, old_max, old_size, old_k));

}
harness void bst_remove_root_rec__2(int[LOCVARSIZE-1] llocvars, int[INTVARSIZE] lintvars, int[HEAPSIZE-1] lleft, int[HEAPSIZE-1] lright, int[HEAPSIZE-1] lkey, bit[HEAPSIZE-1] lsymbolic, bit[HEAPSIZE-1] lactive) {

	int[HEAPSIZE-1] lnext = {};
	int[HEAPSIZE-1] lsupernext = {};
	init(llocvars, lintvars, lnext, lsupernext, lleft, lright, lkey, lsymbolic, lactive);

	assume(basic_assumptions() && basic_axioms());

	assume pre_cond_bst_remove_root_rec(4, 1);

	snapshot_bst_remove_root_rec(4, 1, old_k, old_bst, old_min, old_max, old_size);

	ranking_snapshot(rank_func_bst_remove_root_rec, 4);

	assume !cond0();

	assume !cond1();

	statement(3, 1, 1, 1);
	statement(3, 1, 1, 1);
	int rank_var_for_call_0 = gen_non_zero(4);
	assertPost(ranking_decreases(rank_func_bst_remove_root_rec, rank_var_for_call_0));
	rec_bst_remove_root_rec(rank_var_for_call_0, gen_all(2), gen_non_zero(3), new_symbolic, new_next, new_supernext, new_key);
	statement(3, 1, 1, 1);
	ret_loc(gen_non_zero(4));

	assertPost(post_cond_bst_remove_root_rec(ret, 4, 1, old_min, old_max, old_size, old_k));

}
