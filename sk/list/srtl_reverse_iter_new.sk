pragma options "--slv-simiters 4 --bnd-inbits 3 --bnd-inline-amnt 8 --bnd-unroll-amnt 4 ";

int TIMESIZE = 4;
int BOUND = 4;
int INTMAX = 7;
int HEAPSIZE = 5;
int LOCVARSIZE = 6;
int INTVARSIZE = 1;
int MBUDGET = 1;

include "header/lseg_header.skh";

int old_sll, old_len, old_min, old_max, old_size, old_height, old_lenseg, old_minseg, old_maxseg;

int rank_func_srtl_reverse_iter = 
LENSEG;

void snapshot_srtl_reverse_iter(int x, int y, ref int osll, ref int olenseg, ref int ominseg, ref int omaxseg) {
	olenseg = lenseg_comp(locvars[x], locvars[y]);
	ominseg = minseg_comp(locvars[x], locvars[y]);
	omaxseg = maxseg_comp(locvars[x], locvars[y]);
}

bit pre_cond_srtl_reverse_iter(int x, int y) {
	return sllseg_inv(x, y) && ((! (locvar_eq(x, y))) && (nextTo(y, y)));
}

bit post_cond_srtl_reverse_iter(int r, int x, int y, ref int old_lenseg_x_y, ref int old_minseg_x_y, ref int old_maxseg_x_y) {
	return ((rsllseg_inv(r, x) && (locvar_eq(r, y))) && (lenseg_comp(locvars[r], locvars[x]) == old_lenseg_x_y)) && ((minseg_comp(locvars[r], locvars[x]) == old_minseg_x_y) && (maxseg_comp(locvars[r], locvars[x]) == old_maxseg_x_y));
}

int rank_var_srtl_reverse_iter = 3;
int rank_var_aux_srtl_reverse_iter = {| 4 | 5 |};

int mutate_var_srtl_reverse_iter = {| 1 | 2 |};

bit preserve_sll = false;
bit preserve_len = false;
bit preserve_min = false;
bit preserve_max = false;

bit preserve_lenseg = true;
bit preserve_minseg = true;
bit preserve_maxseg = true;

void guess_ranking_srtl_reverse_iter() {
	assume rank_var_srtl_reverse_iter>0 && rank_var_srtl_reverse_iter<LOCVARSIZE;
	assume rank_var_aux_srtl_reverse_iter>0 && rank_var_aux_srtl_reverse_iter<LOCVARSIZE;
	ranking_snapshot(rank_func_srtl_reverse_iter, rank_var_srtl_reverse_iter, rank_var_aux_srtl_reverse_iter);
}

bit loop_preserves_srtl_reverse_iter() {
	bit single = false;
	int comp1 = {| 1 | 2 |};
	int comp2 = comp1 + 1;
	int comp3 = {| 4 | 5 |};
	int comp4 = {| 4 | 5 |};
	return (preserve_sll ? sll_equal_inv(LOCVARSIZE-1) : true)
	  && (preserve_len ? len_preserve_inv(old_len, comp1, comp2, comp3, single) : true)
	  && (preserve_min ? min_preserve_inv(old_min, comp1, comp2, comp3, single) : true)
	  && (preserve_max ? max_preserve_inv(old_max, comp1, comp2, comp3, single) : true)
	  && ((preserve_lenseg && comp3 != comp4) ? lenseg_preserve_inv(old_lenseg, comp1, comp2, comp3, comp4, single) : true)
	  && ((preserve_minseg && comp3 != comp4) ? minseg_preserve_inv(old_minseg, comp1, comp2, comp3, comp4, single) : true)
	  && ((preserve_maxseg && comp3 != comp4) ? maxseg_preserve_inv(old_maxseg, comp1, comp2, comp3, comp4, single) : true)
	;
}

bit loop_inv_srtl_reverse_iter() {
	return loop_preserves_srtl_reverse_iter()
	 && predicate({| 0 | 1 |}, 3, 0, 2, 0)

	 && predicate({| 8 | 9 |}, 3, 0, 2, 0)

	 && predicate(2, 3, 0, 2, 0)

	 && any_pred(3, 0, 2, 0)
	 && any_pred(3, 0, 2, 0);
}

bit loop_inv_pre_srtl_reverse_iter() {
	return loop_inv_srtl_reverse_iter();
}

bit loop_inv_post_srtl_reverse_iter() {
	return loop_inv_srtl_reverse_iter()
	  && ranking_decreases(rank_func_srtl_reverse_iter, rank_var_srtl_reverse_iter, rank_var_aux_srtl_reverse_iter);
}

bit loop_cond_srtl_reverse_iter() {
	return cond_for_loop(3, 2, 0);
}

harness void before_loop_srtl_reverse_iter(int[LOCVARSIZE-1] llocvars, int[INTVARSIZE] lintvars, int[HEAPSIZE-1] lnext, int[HEAPSIZE-1] lsupernext, int[HEAPSIZE-1] lkey, bit[HEAPSIZE-1] lsymbolic, bit[HEAPSIZE-1] lactive) {

	int[HEAPSIZE-1] lleft = {};
	int[HEAPSIZE-1] lright = {};
	init(llocvars, lintvars, lnext, lsupernext, lleft, lright, lkey, lsymbolic, lactive);

	assume(basic_assumptions() && basic_axioms());
	assume pre_cond_srtl_reverse_iter(5, 4);
	snapshot_srtl_reverse_iter(5, 4, old_sll, old_lenseg, old_minseg, old_maxseg);

	update_locvar0(1, LOCVARSIZE-1, INTVARSIZE);
	update_locvar1(2, LOCVARSIZE-1, INTVARSIZE);
	update_locvar2(3, LOCVARSIZE-1, INTVARSIZE);

	assertPost(loop_inv_pre_srtl_reverse_iter());
}

harness void iterate_srtl_reverse_iter(int lold_sll, int lold_lenseg, int lold_minseg, int lold_maxseg, int lold_sll, int lold_lenseg, int lold_minseg, int lold_maxseg, int[LOCVARSIZE-1] llocvars, int[INTVARSIZE] lintvars, int[HEAPSIZE-1] lnext, int[HEAPSIZE-1] lsupernext, int[HEAPSIZE-1] lkey, bit[HEAPSIZE-1] lsymbolic, bit[HEAPSIZE-1] lactive) {

	int[HEAPSIZE-1] lleft = {};
	int[HEAPSIZE-1] lright = {};
	init(llocvars, lintvars, lnext, lsupernext, lleft, lright, lkey, lsymbolic, lactive);

	old_sll = lold_sll;
	old_lenseg = lold_lenseg;
	old_minseg = lold_minseg;
	old_maxseg = lold_maxseg;
	old_sll = lold_sll;
	old_lenseg = lold_lenseg;
	old_minseg = lold_minseg;
	old_maxseg = lold_maxseg;

	assume(basic_assumptions() && basic_axioms());
	assume loop_inv_pre_srtl_reverse_iter();
	assume loop_cond_srtl_reverse_iter();
	guess_ranking_srtl_reverse_iter();

	update_locvar3(1, 3, 0);
	update_locvar4(2, 3, 0);
	update_locvar5(3, 3, 0);
	mutate_locvar0(mutate_var_srtl_reverse_iter, 3, 0);

	assertPost(loop_inv_post_srtl_reverse_iter());
}

harness void after_loop_srtl_reverse_iter(int lold_sll, int lold_lenseg, int lold_minseg, int lold_maxseg, int lold_sll, int lold_lenseg, int lold_minseg, int lold_maxseg, int[LOCVARSIZE-1] llocvars, int[INTVARSIZE] lintvars, int[HEAPSIZE-1] lnext, int[HEAPSIZE-1] lsupernext, int[HEAPSIZE-1] lkey, bit[HEAPSIZE-1] lsymbolic, bit[HEAPSIZE-1] lactive) {

	int[HEAPSIZE-1] lleft = {};
	int[HEAPSIZE-1] lright = {};
	init(llocvars, lintvars, lnext, lsupernext, lleft, lright, lkey, lsymbolic, lactive);

	old_sll = lold_sll;
	old_lenseg = lold_lenseg;
	old_minseg = lold_minseg;
	old_maxseg = lold_maxseg;
	old_sll = lold_sll;
	old_lenseg = lold_lenseg;
	old_minseg = lold_minseg;
	old_maxseg = lold_maxseg;

	assume(basic_assumptions() && basic_axioms());
	assume loop_inv_srtl_reverse_iter();
	assume !loop_cond_srtl_reverse_iter();

	mutate_locvar1({| 1 | 2 | 3 |}, 3, 0);
	ret_loc(loc_id0(5));

	assertPost(post_cond_srtl_reverse_iter(ret, 5, 4, old_lenseg, old_minseg, old_maxseg));
}

int loc_id0(int locrange) { 
	return gen_non_zero(locrange);
}
void update_locvar0(int to, int locrange, int intrange) { 
	update_locvar(to , locrange, intrange);
}
void update_locvar1(int to, int locrange, int intrange) { 
	update_locvar(to , locrange, intrange);
}
void update_locvar2(int to, int locrange, int intrange) { 
	update_locvar(to , locrange, intrange);
}
void update_locvar3(int to, int locrange, int intrange) { 
	update_locvar(to, locrange, intrange);
}
void update_locvar4(int to, int locrange, int intrange) { 
	update_locvar(to, locrange, intrange);
}
void update_locvar5(int to, int locrange, int intrange) { 
	update_locvar(to, locrange, intrange);
}
void mutate_locvar0(int v, int locrange, int intrange) { 
	mutate_locvar(v, locrange, intrange);
}
void mutate_locvar1(int v, int locrange, int intrange) { 
	mutate_locvar(v, locrange, intrange);
}
