pragma options "--slv-simiters 4 --bnd-inbits 3 --bnd-inline-amnt 7 --bnd-unroll-amnt 3 ";

int TIMESIZE = 4;
int BOUND = 3;
int INTMAX = 7;
int HEAPSIZE = 4;
int LOCVARSIZE = 3;
int INTVARSIZE = 1;
int MBUDGET = 1;

include "header/lseg_header.skh";

int old_sll, old_len, old_min, old_max, old_size, old_height, old_lenseg, old_minseg, old_maxseg;

int rank_func_list_find_max_iter = 
LEN;

void snapshot_list_find_max_iter(int x, ref int osll, ref int omax) {
	omax = max_comp(locvars[x]);
}

bit pre_cond_list_find_max_iter(int x) {
	return tree_inv(x);
}

bit post_cond_list_find_max_iter(int r, int x, ref int old_max_x) {
	return intvars[r] == old_max_x;
}

int rank_var_list_find_max_iter = 1;
int rank_var_aux_list_find_max_iter = {| 2 |};

int mutate_var_list_find_max_iter = ;

bit preserve_sll = false;
bit preserve_len = false;
bit preserve_min = false;
bit preserve_max = true;

bit preserve_lenseg = false;
bit preserve_minseg = false;
bit preserve_maxseg = false;

void guess_ranking_list_find_max_iter() {
	assume rank_var_list_find_max_iter>0 && rank_var_list_find_max_iter<LOCVARSIZE;
	assume rank_var_aux_list_find_max_iter>0 && rank_var_aux_list_find_max_iter<LOCVARSIZE;
	ranking_snapshot(rank_func_list_find_max_iter, rank_var_list_find_max_iter, rank_var_aux_list_find_max_iter);
}

bit loop_preserves_list_find_max_iter() {
	bit single = true;
	int comp1 = {| 1 |};
	int comp2 = comp1 + 1;
	int comp3 = {| 2 |};
	int comp4 = {| 2 |};
	return (preserve_sll ? sll_equal_inv(LOCVARSIZE-1) : true)
	  && (preserve_len ? len_preserve_inv(old_len, comp1, comp2, comp3, single) : true)
	  && (preserve_min ? min_preserve_inv(old_min, comp1, comp2, comp3, single) : true)
	  && (preserve_max ? max_preserve_inv(old_max, comp1, comp2, comp3, single) : true)
	  && ((preserve_lenseg && comp3 != comp4) ? lenseg_preserve_inv(old_lenseg, comp1, comp2, comp3, comp4, single) : true)
	  && ((preserve_minseg && comp3 != comp4) ? minseg_preserve_inv(old_minseg, comp1, comp2, comp3, comp4, single) : true)
	  && ((preserve_maxseg && comp3 != comp4) ? maxseg_preserve_inv(old_maxseg, comp1, comp2, comp3, comp4, single) : true)
	;
}

bit loop_inv_list_find_max_iter() {
	return loop_preserves_list_find_max_iter()
	 && any_pred(1, 1, 1, 0);
}

bit loop_inv_pre_list_find_max_iter() {
	return loop_inv_list_find_max_iter();
}

bit loop_inv_post_list_find_max_iter() {
	return loop_inv_list_find_max_iter()
	  && ranking_decreases(rank_func_list_find_max_iter, rank_var_list_find_max_iter, rank_var_aux_list_find_max_iter);
}

bit loop_cond_list_find_max_iter() {
	return cond_for_loop(1, 1, 1);
}

harness void before_loop_list_find_max_iter(int[LOCVARSIZE-1] llocvars, int[INTVARSIZE] lintvars, int[HEAPSIZE-1] lnext, int[HEAPSIZE-1] lsupernext, int[HEAPSIZE-1] lkey, bit[HEAPSIZE-1] lsymbolic, bit[HEAPSIZE-1] lactive) {

	int[HEAPSIZE-1] lleft = {};
	int[HEAPSIZE-1] lright = {};
	init(llocvars, lintvars, lnext, lsupernext, lleft, lright, lkey, lsymbolic, lactive);

	assume(basic_assumptions() && basic_axioms());
	assume pre_cond_list_find_max_iter(2);
	snapshot_list_find_max_iter(2, old_sll, old_max);

	update_intvar0(LOCVARSIZE-1, INTVARSIZE);
	update_locvar0(1, LOCVARSIZE-1, INTVARSIZE);

	assertPost(loop_inv_pre_list_find_max_iter());
}

harness void iterate_list_find_max_iter(int lold_sll, int lold_max, int[LOCVARSIZE-1] llocvars, int[INTVARSIZE] lintvars, int[HEAPSIZE-1] lnext, int[HEAPSIZE-1] lsupernext, int[HEAPSIZE-1] lkey, bit[HEAPSIZE-1] lsymbolic, bit[HEAPSIZE-1] lactive) {

	int[HEAPSIZE-1] lleft = {};
	int[HEAPSIZE-1] lright = {};
	init(llocvars, lintvars, lnext, lsupernext, lleft, lright, lkey, lsymbolic, lactive);

	old_sll = lold_sll;
	old_max = lold_max;

	assume(basic_assumptions() && basic_axioms());
	assume loop_inv_pre_list_find_max_iter();
	assume loop_cond_list_find_max_iter();
	guess_ranking_list_find_max_iter();

	update_intvar1(1, 1);
	update_locvar1(1, 1, 1);

	assertPost(loop_inv_post_list_find_max_iter());
}

harness void after_loop_list_find_max_iter(int lold_sll, int lold_max, int[LOCVARSIZE-1] llocvars, int[INTVARSIZE] lintvars, int[HEAPSIZE-1] lnext, int[HEAPSIZE-1] lsupernext, int[HEAPSIZE-1] lkey, bit[HEAPSIZE-1] lsymbolic, bit[HEAPSIZE-1] lactive) {

	int[HEAPSIZE-1] lleft = {};
	int[HEAPSIZE-1] lright = {};
	init(llocvars, lintvars, lnext, lsupernext, lleft, lright, lkey, lsymbolic, lactive);

	old_sll = lold_sll;
	old_max = lold_max;

	assume(basic_assumptions() && basic_axioms());
	assume loop_inv_list_find_max_iter();
	assume !loop_cond_list_find_max_iter();

	mutate_locvar0({| 1 |}, 1, 1);
	ret_int(int_id0(1));

	assertPost(post_cond_list_find_max_iter(ret, 2, old_max));
}

int int_id0(int intrange) { 
	return gen_all(intrange);
}
void update_intvar0(int locrange, int intrange) { 
	update_intvar_statement(0, locrange - 1, intrange);
}
void update_intvar1(int locrange, int intrange) { 
	update_intvar(0, locrange, intrange);
}
void update_locvar0(int to, int locrange, int intrange) { 
	update_locvar(to , locrange, intrange);
}
void update_locvar1(int to, int locrange, int intrange) { 
	update_locvar(to, locrange, intrange);
}
void mutate_locvar0(int v, int locrange, int intrange) { 
	mutate_locvar(v, locrange, intrange);
}
