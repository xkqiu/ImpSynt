pragma options "--slv-simiters 10 --bnd-inbits 2 --bnd-inline-amnt 3 --bnd-unroll-amnt 3 ";

int TIMESIZE = 4;
int BOUND = 3;
int INTMAX = 7;
int HEAPSIZE = 4;
int LOCVARSIZE = 4;
int INTVARSIZE = 1;
int MBUDGET = 1;

include "header/lseg_header.skh";

int old_sll, old_len, old_min, old_max, old_size, old_height, old_lenseg, old_minseg, old_maxseg;

int rank_func_srtl_reverse_iter = LEN; //len, min or max

void snapshot_srtl_reverse_iter(int x, ref int osll, ref int olen, ref int omin, ref int omax) {
	olen = len_comp(locvars[x]);
	omin = min_comp(locvars[x]);
	omax = max_comp(locvars[x]);
}

bit pre_cond_srtl_reverse_iter(int x) {
	return sll_inv(x);
}

bit post_cond_srtl_reverse_iter(int r, int x, ref int old_len_x, ref int old_min_x, ref int old_max_x) {
	return (rsll_inv(r) && (len_equal_inv(r, old_len_x))) && ((min_equal_inv(r, old_min_x)) && (max_equal_inv(r, old_max_x)));
}

int rank_var_srtl_reverse_iter = {| 1 | 2 | 3 |};

bit preserve_sll = false;
bit preserve_len = true;
bit preserve_min = true;
bit preserve_max = true;

bit preserve_lenseg = false;
bit preserve_minseg = false;
bit preserve_maxseg = false;

void guess_ranking_srtl_reverse_iter() {
	assume rank_var_srtl_reverse_iter>0 && rank_var_srtl_reverse_iter<LOCVARSIZE;
	ranking_snapshot(rank_func_srtl_reverse_iter, rank_var_srtl_reverse_iter);
}

bit loop_preserves_srtl_reverse_iter() {
	bit single = false;
	int comp1 = gen_non_zero(2);
	int comp2 = comp1 + 1;
	int comp3 = gen_non_zero(0) + 3;
	int comp4 = gen_non_zero(0) + 3;
	return (preserve_sll ? sll_equal_inv(LOCVARSIZE-1) : true)
	  && (preserve_len ? len_preserve_inv(LOCVARSIZE-1, old_len, comp1, comp2, single) : true)
	  && (preserve_min ? min_preserve_inv(LOCVARSIZE-1, old_min, comp1, comp2, single) : true)
	  && (preserve_max ? max_preserve_inv(LOCVARSIZE-1, old_max, comp1, comp2, single) : true)
	  && (preserve_lenseg ? lenseg_preserve_inv(LOCVARSIZE-1, old_lenseg, comp1, comp2, comp3, comp4, single) : true)
	  && (preserve_minseg ? minseg_preserve_inv(LOCVARSIZE-1, old_minseg, comp1, comp2, comp3, comp4, single) : true)
	  && (preserve_maxseg ? maxseg_preserve_inv(LOCVARSIZE-1, old_maxseg, comp1, comp2, comp3, comp4, single) : true)
	;
}

bit loop_inv_srtl_reverse_iter() {
	return loop_preserves_srtl_reverse_iter()
	 && any_pred(3, 0, 0, 0)
	 && any_pred(3, 0, 0, 0)
	 && any_pred(3, 0, 0, 0)
	 && any_pred(3, 0, 0, 0);
}

bit loop_inv_pre_srtl_reverse_iter() {
	return loop_inv_srtl_reverse_iter();
}

bit loop_inv_post_srtl_reverse_iter() {
	return loop_inv_srtl_reverse_iter()
	  && ranking_decreases(rank_func_srtl_reverse_iter, rank_var_srtl_reverse_iter);
}

bit loop_cond_srtl_reverse_iter() {
	return cond_for_loop(3, 3, 0);
}

harness void before_loop_srtl_reverse_iter(int[LOCVARSIZE-1] llocvars, int[INTVARSIZE] lintvars, int[HEAPSIZE-1] lnext, int[HEAPSIZE-1] lsupernext, int[HEAPSIZE-1] lkey, bit[HEAPSIZE-1] lsymbolic, bit[HEAPSIZE-1] lactive) {

	int[HEAPSIZE-1] lleft = {};
	int[HEAPSIZE-1] lright = {};
	init(llocvars, lintvars, lnext, lsupernext, lleft, lright, lkey, lsymbolic, lactive);

	assume(basic_assumptions() && basic_axioms());
	assume pre_cond_srtl_reverse_iter(3);
	snapshot_srtl_reverse_iter(3, old_sll, old_len, old_min, old_max);

	update_locvar0(1, LOCVARSIZE-1, INTVARSIZE);
	update_locvar1(2, LOCVARSIZE-1, INTVARSIZE);
	update_locvar2(3, LOCVARSIZE-1, INTVARSIZE);

	assertPost(loop_inv_pre_srtl_reverse_iter());
}

harness void iterate_srtl_reverse_iter(int lold_sll, int lold_len, int lold_min, int lold_max, int[LOCVARSIZE-1] llocvars, int[INTVARSIZE] lintvars, int[HEAPSIZE-1] lnext, int[HEAPSIZE-1] lsupernext, int[HEAPSIZE-1] lkey, bit[HEAPSIZE-1] lsymbolic, bit[HEAPSIZE-1] lactive) {

	int[HEAPSIZE-1] lleft = {};
	int[HEAPSIZE-1] lright = {};
	init(llocvars, lintvars, lnext, lsupernext, lleft, lright, lkey, lsymbolic, lactive);

	old_sll = lold_sll;
	old_len = lold_len;
	old_min = lold_min;
	old_max = lold_max;

	assume(basic_assumptions() && basic_axioms());
	assume loop_inv_pre_srtl_reverse_iter();
	assume loop_cond_srtl_reverse_iter();
	guess_ranking_srtl_reverse_iter();

	update_locvar3(1, 3, 0);
	update_locvar4(2, 3, 0);
	update_locvar5(3, 3, 0);
	mutate_locvar0(1, 3, 0);
	mutate_locvar1(2, 3, 0);
	mutate_locvar2(3, 3, 0);

	assertPost(loop_inv_post_srtl_reverse_iter());
}

harness void after_loop_srtl_reverse_iter(int lold_sll, int lold_len, int lold_min, int lold_max, int[LOCVARSIZE-1] llocvars, int[INTVARSIZE] lintvars, int[HEAPSIZE-1] lnext, int[HEAPSIZE-1] lsupernext, int[HEAPSIZE-1] lkey, bit[HEAPSIZE-1] lsymbolic, bit[HEAPSIZE-1] lactive) {

	int[HEAPSIZE-1] lleft = {};
	int[HEAPSIZE-1] lright = {};
	init(llocvars, lintvars, lnext, lsupernext, lleft, lright, lkey, lsymbolic, lactive);

	old_sll = lold_sll;
	old_len = lold_len;
	old_min = lold_min;
	old_max = lold_max;

	assume(basic_assumptions() && basic_axioms());
	assume loop_inv_pre_srtl_reverse_iter();
	assume !loop_cond_srtl_reverse_iter();

	ret_loc(loc_id0(3));

	assertPost(post_cond_srtl_reverse_iter(ret, 3, old_len, old_min, old_max));
}

int loc_id0(int locrange) { 
	return gen_non_zero(locrange);
}
void update_locvar0(int to, int locrange, int intrange) { 
	update_locvar_statement(to , locrange - 3);
}
void update_locvar1(int to, int locrange, int intrange) { 
	update_locvar_statement(to , locrange - 2);
}
void update_locvar2(int to, int locrange, int intrange) { 
	update_locvar_statement(to , locrange - 1);
}
void update_locvar3(int to, int locrange, int intrange) { 
	update_locvar(to, locrange, intrange);
}
void update_locvar4(int to, int locrange, int intrange) { 
	update_locvar(to, locrange, intrange);
}
void update_locvar5(int to, int locrange, int intrange) { 
	update_locvar(to, locrange, intrange);
}
void mutate_locvar0(int v, int locrange, int intrange) { 
	mutate_locvar(v, locrange, intrange);
}
void mutate_locvar1(int v, int locrange, int intrange) { 
	mutate_locvar(v, locrange, intrange);
}
void mutate_locvar2(int v, int locrange, int intrange) { 
	mutate_locvar(v, locrange, intrange);
}
