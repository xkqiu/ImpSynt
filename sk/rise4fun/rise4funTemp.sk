pragma options "--slv-simiters 4 --bnd-inbits 3 --bnd-inline-amnt 7 --bnd-unroll-amnt 3 ";

int TIMESIZE = 4;
int BOUND = 3;
int INTMAX = 7;
int HEAPSIZE = 4;
int LOCVARSIZE = 3;
int INTVARSIZE = 2;
int MBUDGET = 1;

include "header/lseg_header.skh";

int old_sll, old_len, old_min, old_max, old_size, old_height, old_lenseg, old_minseg, old_maxseg;

int newer_sll, newer_min;

void rec_list_find_min_rec(int x, int recret, ref int rv, ref bit[HEAPSIZE-1] new_symbolic, ref int[HEAPSIZE-1] new_next, ref int[HEAPSIZE-1] new_supernext, ref int[HEAPSIZE-1] new_key) {

	assertPost(pre_cond_list_find_min_rec(x));

	snapshot_list_find_min_rec(x, newer_sll, newer_min);

	havoc(locvars[x], new_symbolic, new_next, new_supernext, new_key);

	intvars[recret] = rv;

	assumePre(post_cond_list_find_min_rec(recret, x, newer_min));
}

int rank_func_list_find_min_rec = 
LEN;

void snapshot_list_find_min_rec(int x, ref int osll, ref int omin) {
	omin = min_comp(locvars[x]);
}

bit pre_cond_list_find_min_rec(int x) {
	return tree_inv(x);
}

bit post_cond_list_find_min_rec(int r, int x, ref int old_min_x) {
	return tree_inv(x) && (intvars[r] == old_min_x);
}

harness void list_find_min_rec(int[LOCVARSIZE-1] llocvars, int[INTVARSIZE] lintvars, int[HEAPSIZE-1] lnext, int[HEAPSIZE-1] lsupernext, int[HEAPSIZE-1] lkey, bit[HEAPSIZE-1] lsymbolic, bit[HEAPSIZE-1] lactive, int ret_value, bit[HEAPSIZE-1] new_symbolic, int[HEAPSIZE-1] new_next, int[HEAPSIZE-1] new_supernext, int[HEAPSIZE-1] new_key) {

	int[HEAPSIZE-1] lleft = {};
	int[HEAPSIZE-1] lright = {};
	init(llocvars, lintvars, lnext, lsupernext, lleft, lright, lkey, lsymbolic, lactive);

	assume(basic_assumptions() && basic_axioms());

	assume pre_cond_list_find_min_rec(2);

	snapshot_list_find_min_rec(2, old_sll, old_min);

	ranking_snapshot(rank_func_list_find_min_rec, 2, 1);

	if (basic_cond0(2, 2)) 	{
	statement0(1, 2, 1, 0);
	statement1(1, 2, 1, 0);

	}

	else 	{
	statement2(1, 2, 1, 0);
	int rank_var_for_call_0 = loc_id0(2);
	assertPost(ranking_decreases(rank_func_list_find_min_rec, rank_var_for_call_0, 1));
	rec_list_find_min_rec(rank_var_for_call_0, int_id0(2), ret_value, new_symbolic, new_next, new_supernext, new_key);
	if (basic_cond1(2, 2)) 	statement3(1, 2, 1, 0);


	}

	ret_int(0);

	assertPost(post_cond_list_find_min_rec(ret, 2, old_min));

}
void statement0(int locrange, int intrange, int locrange2, int intrange2) { 
	statement(locrange, intrange, locrange2, intrange2);
}
void statement1(int locrange, int intrange, int locrange2, int intrange2) { 
	statement(locrange, intrange, locrange2, intrange2);
}
void statement2(int locrange, int intrange, int locrange2, int intrange2) { 
	statement(locrange, intrange, locrange2, intrange2);
}
void statement3(int locrange, int intrange, int locrange2, int intrange2) { 
	statement(locrange, intrange, locrange2, intrange2);
}
bit basic_cond0(int locrange, int intrange) { 
	return basic_cond(locrange, intrange);
}
bit basic_cond1(int locrange, int intrange) { 
	return basic_cond(locrange, intrange);
}
int loc_id0(int locrange) { 
	return gen_non_zero(locrange);
}
int int_id0(int intrange) { 
	return gen_all(intrange);
}
