
/*
v1 = v3.left;
v2 = v3.right;
if (v1 == null) return v2;
else if (v2 == null) return v1;
else {
	v2 = v1.right;
	v3.left = v2;
	v2 = remove_root(v3, k0);
	v1.right = v2;
	return v1;
}
*/

loc bst_remove_root_rec(loc root, int k)
requires ( bst^(root) & (root |-> int key: k) )
	& (~ (root l= nil))
ensures ( ( bst^(resultloc) & (size^(resultloc) i= (old(size^(root)) - 1)) ) & ( (old(size^(root)) i= 1) |
	(   ( (max^(resultloc) <= old(max^(root))) & ( (min^(resultloc) i= old(min^(root))) | (~ (min^(resultloc) <= old(min^(root))))) ) &
		(  ( (old(k) i= old(min^(root))) | (min^(resultloc) i= old(min^(root))) ) &
		( (old(k) i= old(max^(root))) | (max^(resultloc) i= old(max^(root))) )  )   )	
	) )

{
    statement(2);
    if (cond(1)) return ???;
    else if (cond(1)) return ???;
    else {
        statement(2);
        loc ??? := bst_remove_root_rec(???, ??);
        statement(1);
        return ???;
    }
}

